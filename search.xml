<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Oozie安装详细步骤</title>
      <link href="2020/03/10/Oozie%E5%AE%89%E8%A3%85%E8%AF%A6%E7%BB%86%E6%AD%A5%E9%AA%A4/"/>
      <url>2020/03/10/Oozie%E5%AE%89%E8%A3%85%E8%AF%A6%E7%BB%86%E6%AD%A5%E9%AA%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="Oozie安装详细步骤"><a href="#Oozie安装详细步骤" class="headerlink" title="Oozie安装详细步骤"></a>Oozie安装详细步骤</h1><h2 id="一、Oozie的下载"><a href="#一、Oozie的下载" class="headerlink" title="一、Oozie的下载"></a>一、Oozie的下载</h2><p>Apache Ooize是需要进行编译的。</p><p>我们使用CDH编译好的Oozie</p><h3 id="Oozie下载地址："><a href="#Oozie下载地址：" class="headerlink" title="Oozie下载地址："></a>Oozie下载地址：</h3><p><a href="http://archive.cloudera.com/cdh5/cdh/5/oozie-4.1.0-cdh5.14.4/.tar.gz" target="_blank" rel="noopener">http://archive.cloudera.com/cdh5/cdh/5/oozie-4.1.0-cdh5.14.4/.tar.gz</a></p><p>Oozie的WebUI使用ExtJS</p><h3 id="ExtJS下载地址："><a href="#ExtJS下载地址：" class="headerlink" title="ExtJS下载地址："></a>ExtJS下载地址：</h3><p> <a href="http://archive.cloudera.com/gplextras/misc/ext-2.2.zip" target="_blank" rel="noopener">http://archive.cloudera.com/gplextras/misc/ext-2.2.zip</a> </p><h2 id="二、Oozie的安装"><a href="#二、Oozie的安装" class="headerlink" title="二、Oozie的安装"></a>二、Oozie的安装</h2><p>安装文档：</p><p><a href="http://oozie.apache.org/docs/4.1.0/DG_QuickStart.html#Server_Installation" target="_blank" rel="noopener">http://oozie.apache.org/docs/4.1.0/DG_QuickStart.html#Server_Installation</a></p><h3 id="1、上传压缩包"><a href="#1、上传压缩包" class="headerlink" title="1、上传压缩包"></a>1、上传压缩包</h3><blockquote><p>oozie-4.1.0-cdh5.14.4.tar.gz<br>ext-2.2.zip<br>mysql-connector-java-5.1.39.jar</p></blockquote><h3 id="2、解压Oozie"><a href="#2、解压Oozie" class="headerlink" title="2、解压Oozie"></a>2、解压Oozie</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[hadoop@hadoop10 installPkg]$ tar -zxvf oozie-4.1.0-cdh5.14.4.tar.gz -C ../apps/</span><br></pre></td></tr></table></figure><h3 id="3、-在Hadoop-core-site-xml中需要以下两个属性"><a href="#3、-在Hadoop-core-site-xml中需要以下两个属性" class="headerlink" title="3、 在Hadoop core-site.xml中需要以下两个属性"></a>3、 在Hadoop core-site.xml中需要以下两个属性</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">OOZIE</span></span><br><span class="line"><span class="comment">* 表示所有host和group</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.proxyuser.hadoop.hosts<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>*<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.proxyuser.hadoop.groups<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>*<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4、分发-core-site-xml，然后重新启动Hadoop"><a href="#4、分发-core-site-xml，然后重新启动Hadoop" class="headerlink" title="4、分发 core-site.xml，然后重新启动Hadoop"></a>4、分发 core-site.xml，然后重新启动Hadoop</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[hadoop@hadoop10 hadoop]$ xsync core-site.xml</span><br></pre></td></tr></table></figure><h3 id="5、将oozie-hadooplibs-4-1-0-cdh5-14-4-tar-gz解压到Ooize的解压目录下"><a href="#5、将oozie-hadooplibs-4-1-0-cdh5-14-4-tar-gz解压到Ooize的解压目录下" class="headerlink" title="5、将oozie-hadooplibs-4.1.0-cdh5.14.4.tar.gz解压到Ooize的解压目录下"></a>5、将oozie-hadooplibs-4.1.0-cdh5.14.4.tar.gz解压到Ooize的解压目录下</h3><p><strong>注意：hadooplibs直接在解压目录之下</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[hadoop@hadoop10 oozie-4.1.0-cdh5.14.4]$ tar -zxvf oozie-hadooplibs-4.1.0-cdh5.14.4.tar.gz -C /home/hadoop/apps/</span><br></pre></td></tr></table></figure><h3 id="6、-在Oozie的解压目录中创建一个libext-目录"><a href="#6、-在Oozie的解压目录中创建一个libext-目录" class="headerlink" title="6、 在Oozie的解压目录中创建一个libext/目录"></a>6、 在Oozie的解压目录中创建一个libext/目录</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[hadoop@hadoop10 oozie-4.1.0-cdh5.14.4]$ mkdir libext</span><br></pre></td></tr></table></figure><h3 id="7、-将相应的Hadoop-jar从hadooplibs-hadooplib-2-6-0-cdh5-14-4-oozie-4-1-0-cdh5-14-4复制到libext-目录中"><a href="#7、-将相应的Hadoop-jar从hadooplibs-hadooplib-2-6-0-cdh5-14-4-oozie-4-1-0-cdh5-14-4复制到libext-目录中" class="headerlink" title="7、 将相应的Hadoop jar从hadooplibs/hadooplib-2.6.0-cdh5.14.4.oozie-4.1.0-cdh5.14.4复制到libext/目录中"></a>7、 将相应的Hadoop jar从hadooplibs/hadooplib-2.6.0-cdh5.14.4.oozie-4.1.0-cdh5.14.4复制到libext/目录中</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[hadoop@hadoop10 oozie-4.1.0-cdh5.14.4]$ cp hadooplibs/hadooplib-2.6.0-cdh5.14.4.oozie-4.1.0-cdh5.14.4/* libext/</span><br></pre></td></tr></table></figure><h3 id="8、将mysql的驱动包上传到Oozie的libext下"><a href="#8、将mysql的驱动包上传到Oozie的libext下" class="headerlink" title="8、将mysql的驱动包上传到Oozie的libext下"></a>8、将mysql的驱动包上传到Oozie的libext下</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[hadoop@hadoop10 oozie-4.1.0-cdh5.14.4]$ cp /home/hadoop/apps/hive/lib/mysql-connector-java-5.1.39.jar libext/</span><br></pre></td></tr></table></figure><h3 id="9、-如果使用ExtJS库，将ZIP文件复制到libext-目录"><a href="#9、-如果使用ExtJS库，将ZIP文件复制到libext-目录" class="headerlink" title="9、 如果使用ExtJS库，将ZIP文件复制到libext/目录"></a>9、 如果使用ExtJS库，将ZIP文件复制到libext/目录</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[hadoop@hadoop10 oozie-4.1.0-cdh5.14.4]$ cp /home/hadoop/installPkg/ext-2.2.zip libext/</span><br></pre></td></tr></table></figure><h3 id="10、在MySQL中创建oozie数据库"><a href="#10、在MySQL中创建oozie数据库" class="headerlink" title="10、在MySQL中创建oozie数据库"></a>10、在MySQL中创建oozie数据库</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[hadoop@hadoop10 libext]$ mysql -uroot -p123456</span><br><span class="line">mysql&gt; create database oozie;</span><br></pre></td></tr></table></figure><h3 id="11、更改oozie-site-xml-配置文件，将数据库换成MySQL"><a href="#11、更改oozie-site-xml-配置文件，将数据库换成MySQL" class="headerlink" title="11、更改oozie-site.xml 配置文件，将数据库换成MySQL"></a>11、更改oozie-site.xml 配置文件，将数据库换成MySQL</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[hadoop@hadoop10 conf]$ vim oozie-site.xml</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>oozie.service.JPAService.jdbc.driver<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>oozie.service.JPAService.jdbc.url<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>jdbc:mysql://hadoop10:3306/oozie<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>oozie.service.JPAService.jdbc.username<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>root<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>oozie.service.JPAService.jdbc.password<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="12、在oozie-site-xml-中设置Oozie的hadoop的配置目录"><a href="#12、在oozie-site-xml-中设置Oozie的hadoop的配置目录" class="headerlink" title="12、在oozie-site.xml 中设置Oozie的hadoop的配置目录"></a>12、在oozie-site.xml 中设置Oozie的hadoop的配置目录</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[hadoop@hadoop10 conf]$ vim oozie-site.xml</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">*= 表示hadoop所有的配置文件都在该目录下</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>oozie.service.HadoopAccessorService.hadoop.configurations<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>*=/home/hadoop/apps/hadoop/etc/hadoop<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="13、使用脚本创建Oozie在hdfs上的共享库-需要启动hdfs-yarn"><a href="#13、使用脚本创建Oozie在hdfs上的共享库-需要启动hdfs-yarn" class="headerlink" title="13、使用脚本创建Oozie在hdfs上的共享库(需要启动hdfs,yarn)"></a>13、使用脚本创建Oozie在hdfs上的共享库(需要启动hdfs,yarn)</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[hadoop@hadoop10 oozie-4.1.0-cdh5.14.4]$ bin/oozie-setup.sh sharelib create -fs hdfs://ns1 -locallib oozie-sharelib-4.1.0-cdh5.14.4-yarn.tar.gz </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">----------------成功后输出以下<span class="built_in">log</span>信息---------------------</span></span><br><span class="line">the destination path for sharelib is: /user/hadoop/share/lib/lib_20201104142818</span><br></pre></td></tr></table></figure><h3 id="14、使用脚本初始化Oozie在数据库中的状态信息（建表）"><a href="#14、使用脚本初始化Oozie在数据库中的状态信息（建表）" class="headerlink" title="14、使用脚本初始化Oozie在数据库中的状态信息（建表）"></a>14、使用脚本初始化Oozie在数据库中的状态信息（建表）</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[hadoop@hadoop10 oozie-4.1.0-cdh5.14.4]$ bin/oozie-setup.sh db create -run -sqlfile ./OozieSql.sql</span><br></pre></td></tr></table></figure><h3 id="15、使用脚本将Oozie打成war包"><a href="#15、使用脚本将Oozie打成war包" class="headerlink" title="15、使用脚本将Oozie打成war包"></a>15、使用脚本将Oozie打成war包</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[hadoop@hadoop10 oozie-4.1.0-cdh5.14.4]$ bin/oozie-setup.sh prepare-war</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">----------------成功后输出以下<span class="built_in">log</span>信息---------------------</span></span><br><span class="line">New Oozie WAR file with added 'ExtJS library' at /home/hadoop/apps/oozie-4.1.0-cdh5.14.4/oozie-server/webapps/oozie.war</span><br><span class="line"></span><br><span class="line">INFO: Oozie is ready to be started</span><br></pre></td></tr></table></figure><h3 id="16、-启动Oozie"><a href="#16、-启动Oozie" class="headerlink" title="16、 启动Oozie"></a>16、 启动Oozie</h3><h4 id="16-1-以守护进程的方式启动Oozie"><a href="#16-1-以守护进程的方式启动Oozie" class="headerlink" title="16.1 以守护进程的方式启动Oozie"></a>16.1 以守护进程的方式启动Oozie</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[hadoop@hadoop10 oozie-4.1.0-cdh5.14.4]$ bin/oozied.sh start</span><br></pre></td></tr></table></figure><h4 id="16-2-或者以前台进程运行的方式启动Oozie"><a href="#16-2-或者以前台进程运行的方式启动Oozie" class="headerlink" title="16.2 或者以前台进程运行的方式启动Oozie:"></a>16.2 或者以前台进程运行的方式启动Oozie:</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[hadoop@hadoop10 oozie-4.1.0-cdh5.14.4]$ bin/oozied.sh run</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 任务调度 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Oozie </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大数据平台的利器--Ambari+HDP</title>
      <link href="2020/01/08/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%B9%B3%E5%8F%B0%E7%9A%84%E5%88%A9%E5%99%A8--Ambari+HDP/"/>
      <url>2020/01/08/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%B9%B3%E5%8F%B0%E7%9A%84%E5%88%A9%E5%99%A8--Ambari+HDP/</url>
      
        <content type="html"><![CDATA[<h1 id="Ambari是什么"><a href="#Ambari是什么" class="headerlink" title="Ambari是什么"></a>Ambari是什么</h1><p>Ambari 是 Apache 软件基金会 的一个顶级项目。</p><p>Apache Ambari项目用于配置、管理和监视Apache Hadoop集群的软件，简化Hadoop管理。Ambari提供了一个直观、易于使用的Hadoop管理web UI。</p><p>但是这里的 Hadoop 是广义，指的是 Hadoop 整个生态圈（例如 Hive，Hbase，Sqoop，Zookeeper 等），而并不仅是特指 Hadoop。</p><p>用一句话来说，<strong>Ambari 就是为了让 Hadoop 以及相关的大数据软件更容易使用的一个工具。</strong></p><h1 id="Ambari组成"><a href="#Ambari组成" class="headerlink" title="Ambari组成"></a>Ambari组成</h1><p>Ambari 自身也是一个分布式架构的软件，主要由两部分组成：Ambari Server 和 Ambari Agent。简单来说，用户通过 Ambari Server 通知 Ambari Agent 安装对应的软件；Agent 会定时地发送各个机器每个软件模块的状态给 Ambari Server，最终这些状态信息会呈现在 Ambari 的 GUI（图形用户界面），方便用户了解到集群的各种状态，并进行相应的维护。</p><h1 id="HDP是什么"><a href="#HDP是什么" class="headerlink" title="HDP是什么"></a>HDP是什么</h1><p>Hortonworks Data Platform (HDP)是一个用于分布式存储和处理大型多源数据集的开源框架。</p><p><img src="https://i.loli.net/2020/01/08/d1klgM6E2LJsqYf.png" alt="hdp-architecture-diagram.png"></p><h1 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h1><h2 id="一、集群规划"><a href="#一、集群规划" class="headerlink" title="一、集群规划"></a>一、集群规划</h2><div class="table-container"><table><thead><tr><th>主机名</th><th>IP地址</th><th>功能</th></tr></thead><tbody><tr><td>hadoop101</td><td>192.168.10.101</td><td>Yum源</td></tr><tr><td>hadoop102</td><td>192.168.10.102</td><td>Ambri Server + MySQL</td></tr><tr><td>hadoop103</td><td>192.168.10.103</td><td>Compute Node</td></tr><tr><td>hadoop104</td><td>192.168.10.104</td><td>Compute Node</td></tr></tbody></table></div><h2 id="二、下载安装包"><a href="#二、下载安装包" class="headerlink" title="二、下载安装包"></a>二、下载安装包</h2><p>HDP： </p><p><a href="http://public-repo-1.hortonworks.com/HDP/centos6/2.x/updates/2.6.4.0/HDP-2.6.4.0-centos6-rpm.tar.gz" target="_blank" rel="noopener">http://public-repo-1.hortonworks.com/HDP/centos6/2.x/updates/2.6.4.0/HDP-2.6.4.0-centos6-rpm.tar.gz</a></p><p>ambari：</p><p><a href="http://public-repo-1.hortonworks.com/ambari/centos6/2.x/updates/2.6.1.0/ambari-2.6.1.0-centos6.tar.gz" target="_blank" rel="noopener">http://public-repo-1.hortonworks.com/ambari/centos6/2.x/updates/2.6.1.0/ambari-2.6.1.0-centos6.tar.gz</a></p><p>HDP-UTILS：</p><p><a href="http://public-repo-1.hortonworks.com/HDP-UTILS-1.1.0.21/repos/centos6/HDP-UTILS-1.1.0.21-centos6.tar.gz" target="_blank" rel="noopener">http://public-repo-1.hortonworks.com/HDP-UTILS-1.1.0.21/repos/centos6/HDP-UTILS-1.1.0.21-centos6.tar.gz</a></p><h2 id="三、新建虚拟机，安装CentOS"><a href="#三、新建虚拟机，安装CentOS" class="headerlink" title="三、新建虚拟机，安装CentOS"></a>三、新建虚拟机，安装CentOS</h2><p>安装步骤省略</p><p><strong><em>注意：磁盘空间不低于50G</em></strong></p><h2 id="四、关闭防火墙"><a href="#四、关闭防火墙" class="headerlink" title="四、关闭防火墙"></a>四、关闭防火墙</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">service iptables stop</span><br><span class="line">chkconfig iptables off</span><br></pre></td></tr></table></figure><h2 id="五、关闭SELINUX"><a href="#五、关闭SELINUX" class="headerlink" title="五、关闭SELINUX"></a>五、关闭SELINUX</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/selinux/config</span><br><span class="line">修改其中的 SELINUX=enforcing 为 SELINUX=disabled</span><br></pre></td></tr></table></figure><h2 id="六、为提升hadoop性能，hadoop环境上要求关闭Transparent-Hugepages（THP，页面内存透明化）"><a href="#六、为提升hadoop性能，hadoop环境上要求关闭Transparent-Hugepages（THP，页面内存透明化）" class="headerlink" title="六、为提升hadoop性能，hadoop环境上要求关闭Transparent Hugepages（THP，页面内存透明化）"></a>六、为提升hadoop性能，hadoop环境上要求关闭Transparent Hugepages（THP，页面内存透明化）</h2><h3 id="1、查看是否启用"><a href="#1、查看是否启用" class="headerlink" title="1、查看是否启用"></a>1、查看是否启用</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# cat /sys/kernel/mm/transparent_hugepage/defrag</span><br><span class="line">[always] madvise never</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# cat /sys/kernel/mm/transparent_hugepage/enabled</span><br><span class="line">[always] madvise never</span><br></pre></td></tr></table></figure><h3 id="2、禁用-编辑rc-local启动文件"><a href="#2、禁用-编辑rc-local启动文件" class="headerlink" title="2、禁用　编辑rc.local启动文件"></a>2、禁用　编辑rc.local启动文件</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# vim /etc/rc.d/rc.local</span><br><span class="line">增加下列内容：</span><br><span class="line">if test -f /sys/kernel/mm/transparent_hugepage/enabled; then</span><br><span class="line">echo never &gt; /sys/kernel/mm/transparent_hugepage/enabled</span><br><span class="line">fi</span><br><span class="line">if test -f /sys/kernel/mm/transparent_hugepage/defrag; then</span><br><span class="line">echo never &gt; /sys/kernel/mm/transparent_hugepage/defrag</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h3 id="3、重启"><a href="#3、重启" class="headerlink" title="3、重启"></a>3、重启</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# reboot</span><br></pre></td></tr></table></figure><h2 id="七、配置aliYum源"><a href="#七、配置aliYum源" class="headerlink" title="七、配置aliYum源"></a>七、配置aliYum源</h2><p><a href="https://developer.aliyun.com/mirror/centos?spm=a2c6h.13651102.0.0.53322f708nr7q9" target="_blank" rel="noopener">https://developer.aliyun.com/mirror/centos?spm=a2c6h.13651102.0.0.53322f708nr7q9</a></p><h3 id="1、备份"><a href="#1、备份" class="headerlink" title="1、备份"></a>1、备份</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</span><br></pre></td></tr></table></figure><h3 id="2、下载新的CentOS-Base-repo-到-etc-yum-repos-d"><a href="#2、下载新的CentOS-Base-repo-到-etc-yum-repos-d" class="headerlink" title="2、下载新的CentOS-Base.repo 到/etc/yum.repos.d/"></a>2、下载新的CentOS-Base.repo 到/etc/yum.repos.d/</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-6.repo</span><br></pre></td></tr></table></figure><h3 id="3、之后运行yum-makecache生成缓存"><a href="#3、之后运行yum-makecache生成缓存" class="headerlink" title="3、之后运行yum makecache生成缓存"></a>3、之后运行<code>yum makecache</code>生成缓存</h3><h2 id="八、配置时间同步"><a href="#八、配置时间同步" class="headerlink" title="八、配置时间同步"></a>八、配置时间同步</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y install ntp</span><br><span class="line">service ntpd start</span><br><span class="line">chkconfig ntpd on</span><br></pre></td></tr></table></figure><h2 id="九、安装jdk"><a href="#九、安装jdk" class="headerlink" title="九、安装jdk"></a>九、安装jdk</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">解压</span></span><br><span class="line">tar -zxvf jdk-8u144-linux-x64.tar.gz -C /usr</span><br><span class="line">ln -s jdk1.8.0_144 java</span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置环境变量</span></span><br><span class="line">vim /etc/profile</span><br><span class="line">export JAVA_HOME=/usr/java</span><br><span class="line">export PATH=$PATH:$JAVA_HOME/bin</span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><h2 id="十、配置IP映射"><a href="#十、配置IP映射" class="headerlink" title="十、配置IP映射"></a>十、配置IP映射</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/hosts</span><br><span class="line">192.168.10.101 hadoop101</span><br><span class="line">192.168.10.102 hadoop102</span><br><span class="line">192.168.10.103 hadoop103</span><br><span class="line">192.168.10.104 hadoop104</span><br></pre></td></tr></table></figure><h2 id="十一、克隆虚拟机"><a href="#十一、克隆虚拟机" class="headerlink" title="十一、克隆虚拟机"></a>十一、克隆虚拟机</h2><p><strong><em>步骤略</em></strong></p><h2 id="十二、安装MySQL【hadoop102】"><a href="#十二、安装MySQL【hadoop102】" class="headerlink" title="十二、安装MySQL【hadoop102】"></a>十二、安装MySQL【hadoop102】</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1、检查是否安装了MySQL</span><br><span class="line">[root@hadoop201 ~]# rpm -qa | grep -i mysql</span><br><span class="line">mysql-libs-5.1.71-1.el6.x86_64</span><br><span class="line">2、卸载</span><br><span class="line">[root@hadoop201 ~]# rpm -e --nodeps mysql-libs-5.1.71-1.el6.x86_64</span><br><span class="line">3、安装</span><br><span class="line">[root@hadoop201 ~]# rpm -ivh /opt/MySQL-server-5.5.28-1.linux2.6.x86_64.rpm</span><br><span class="line">4、启动MySQL</span><br><span class="line">[root@hadoop201 ~]# service mysql start</span><br><span class="line">chkconfig mysql on</span><br><span class="line">5、安装客户端</span><br><span class="line">[root@hadoop201 ~]# rpm -ivh  /opt/MySQL-client-5.5.28-1.linux2.6.x86_64.rpm</span><br><span class="line">6、执行配置脚本（注意：尽量不要使用全数字密码，避免出问题）</span><br><span class="line">我的密码是 hadoop102</span><br><span class="line">[root@hadoop201 ~]# /usr/bin/mysql_secure_installation</span><br><span class="line">7、授权无主机登录</span><br><span class="line">[root@hadoop102 ~]# mysql -uroot -p hadoop102</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> GRANT ALL PRIVILEGES ON *.* TO <span class="string">'root'</span>@<span class="string">'%'</span> IDENTIFIED BY <span class="string">'hadoop102'</span>;</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> FLUSH PRIVILEGES;</span></span><br></pre></td></tr></table></figure><h2 id="十三、安装httpd-hadoop101节点安装"><a href="#十三、安装httpd-hadoop101节点安装" class="headerlink" title="十三、安装httpd(hadoop101节点安装)"></a>十三、安装httpd(hadoop101节点安装)</h2><h3 id="1、安装httpd"><a href="#1、安装httpd" class="headerlink" title="1、安装httpd"></a>1、安装httpd</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y install httpd</span><br></pre></td></tr></table></figure><h3 id="2、在-var-www-html下创建ambari和hdp目录"><a href="#2、在-var-www-html下创建ambari和hdp目录" class="headerlink" title="2、在/var/www/html下创建ambari和hdp目录"></a>2、在/var/www/html下创建ambari和hdp目录</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /var/www/html/</span><br><span class="line">mkdir ambari</span><br><span class="line">mkdir hdp</span><br><span class="line">mkdir -p hdp/HDP-UTILS</span><br></pre></td></tr></table></figure><h3 id="3、上传资源包"><a href="#3、上传资源包" class="headerlink" title="3、上传资源包"></a>3、上传资源包</h3><p>上传ambari-2.6.1.0-centos6.tar.gz、HDP-2.6.4.0-centos6-rpm.tar.gz、HDP-UTILS-1.1.0.21-centos6.tar.gz</p><h3 id="4、解压到指定目录"><a href="#4、解压到指定目录" class="headerlink" title="4、解压到指定目录"></a>4、解压到指定目录</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -zxvf /opt/ambari-2.6.1.0-centos6.tar.gz -C /var/www/html/ambari/</span><br><span class="line">tar -zxvf /opt/HDP-2.6.4.0-centos6-rpm.tar.gz -C /var/www/html/hdp/</span><br><span class="line">tar -zxvf /opt/HDP-UTILS-1.1.0.21-centos6.tar.gz -C /var/www/html/hdp/HDP-UTILS/</span><br></pre></td></tr></table></figure><h3 id="5、启动httpd"><a href="#5、启动httpd" class="headerlink" title="5、启动httpd"></a>5、启动httpd</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">service httpd restart</span><br><span class="line">chkconfig httpd on</span><br></pre></td></tr></table></figure><h3 id="6、web访问"><a href="#6、web访问" class="headerlink" title="6、web访问"></a>6、web访问</h3><p>现在可以通过访问<a href="http://192.168.10.101/ambari/查看是否能成功访问" target="_blank" rel="noopener">http://192.168.10.101/ambari/查看是否能成功访问</a></p><h2 id="十四、配置Ambari-HDP本地yum源"><a href="#十四、配置Ambari-HDP本地yum源" class="headerlink" title="十四、配置Ambari+HDP本地yum源"></a>十四、配置Ambari+HDP本地yum源</h2><h3 id="1、-安装本地源制作相关工具"><a href="#1、-安装本地源制作相关工具" class="headerlink" title="1、 安装本地源制作相关工具"></a>1、 安装本地源制作相关工具</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y yum-utils createrepo yum-plugin-priorities</span><br></pre></td></tr></table></figure><h3 id="2、编辑ambari-repo"><a href="#2、编辑ambari-repo" class="headerlink" title="2、编辑ambari.repo"></a>2、编辑ambari.repo</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 ~]# cd  /var/www/html/ambari</span><br><span class="line">[root@hadoop101 ~]# vim  ambari/centos6/2.6.1.0-143/ambari.repo</span><br><span class="line"><span class="meta">#</span><span class="bash">VERSION_NUMBER=2.6.1.0-143</span></span><br><span class="line">[ambari-2.6.1.0]</span><br><span class="line">name=ambari Version - ambari-2.6.1.0</span><br><span class="line">baseurl=http://192.168.10.101/ambari/ambari/centos6/2.6.1.0-143/</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=http://192.168.10.101/ambari/ambari/centos6/2.6.1.0-143/RPM-GPG-KEY/RPM-GPG-KEY-Jenkins</span><br><span class="line">enabled=1</span><br><span class="line">priority=1</span><br></pre></td></tr></table></figure><h3 id="3、复制ambari-repo"><a href="#3、复制ambari-repo" class="headerlink" title="3、复制ambari.repo"></a>3、复制ambari.repo</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp ambari/centos6/2.6.1.0-143/ambari.repo  /etc/yum.repos.d/</span><br></pre></td></tr></table></figure><h3 id="4、编辑hdp-repo"><a href="#4、编辑hdp-repo" class="headerlink" title="4、编辑hdp.repo"></a>4、编辑hdp.repo</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 ~]# cd /var/www/html/hdp</span><br><span class="line">[root@hadoop101 ~]# vim HDP/centos6/2.6.4.0-91/hdp.repo</span><br><span class="line"><span class="meta">#</span><span class="bash">VERSION_NUMBER=2.6.4.0-91</span></span><br><span class="line">[HDP-2.6.4.0]</span><br><span class="line">name=HDP Version - HDP-2.6.4.0</span><br><span class="line">baseurl=http://192.168.10.101/hdp/HDP/centos6/2.6.4.0-91/</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=http://192.168.10.101/hdp/HDP/centos6/2.6.4.0-91/RPM-GPG-KEY/RPM-GPG-KEY-Jenkins</span><br><span class="line">enabled=1</span><br><span class="line">priority=1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[HDP-UTILS-1.1.0.22]</span><br><span class="line">name=HDP-UTILS Version - HDP-UTILS-1.1.0.22</span><br><span class="line">baseurl=http://192.168.10.101/hdp/HDP-UTILS</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=http://192.168.10.101/hdp/HDP-UTILS/RPM-GPG-KEY/RPM-GPG-KEY-Jenkins</span><br><span class="line">enabled=1</span><br><span class="line">priority=1</span><br></pre></td></tr></table></figure><h3 id="5、复制hdp-repo"><a href="#5、复制hdp-repo" class="headerlink" title="5、复制hdp.repo"></a>5、复制hdp.repo</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp HDP/centos6/2.6.4.0-91/hdp.repo /etc/yum.repos.d/</span><br></pre></td></tr></table></figure><h3 id="6、配置免密登录"><a href="#6、配置免密登录" class="headerlink" title="6、配置免密登录"></a>6、配置免密登录</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen</span><br><span class="line">ssh-copy-id root@hadoop101</span><br><span class="line">ssh-copy-id root@hadoop102</span><br><span class="line">ssh-copy-id root@hadoop103</span><br><span class="line">ssh-copy-id root@hadoop104</span><br></pre></td></tr></table></figure><h3 id="7、将创建好的文件拷贝到子节点"><a href="#7、将创建好的文件拷贝到子节点" class="headerlink" title="7、将创建好的文件拷贝到子节点"></a>7、将创建好的文件拷贝到子节点</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 etc]# scp -r yum.repos.d/ hadoop102:$PWD</span><br><span class="line">[root@hadoop101 etc]# scp -r yum.repos.d/ hadoop103:$PWD</span><br><span class="line">[root@hadoop101 etc]# scp -r yum.repos.d/ hadoop104:$PWD</span><br></pre></td></tr></table></figure><h3 id="8、生成本地源"><a href="#8、生成本地源" class="headerlink" title="8、生成本地源"></a>8、生成本地源</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">createrepo -v /var/www/html/hdp/HDP/centos6/</span><br><span class="line">createrepo -v /var/www/html/hdp/HDP-UTILS/</span><br></pre></td></tr></table></figure><h2 id="十五、安装Ambari-Server【hadoop102】"><a href="#十五、安装Ambari-Server【hadoop102】" class="headerlink" title="十五、安装Ambari Server【hadoop102】"></a>十五、安装Ambari Server<strong>【hadoop102】</strong></h2><h3 id="1、安装和配置ambari-server"><a href="#1、安装和配置ambari-server" class="headerlink" title="1、安装和配置ambari-server"></a>1、安装和配置ambari-server</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y install ambari-server</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">在mysql上创建 database ambari;</span></span><br><span class="line">mysql -uroot -phadoop102</span><br><span class="line">create database ambari;</span><br><span class="line">use ambari;</span><br><span class="line">source /var/lib/ambari-server/resources/Ambari-DDL-MySQL-CREATE.sql</span><br><span class="line"><span class="meta">#</span><span class="bash">在mysql上创建 database hive;</span></span><br><span class="line">create database hive;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">mysql驱动放入到：</span></span><br><span class="line">mkdir /usr/share/java</span><br><span class="line">cp /opt/mysql-connector-java-5.1.39.jar /var/lib/ambari-server/resources/</span><br><span class="line">cp /opt/mysql-connector-java-5.1.39.jar /usr/share/java/</span><br><span class="line">cp /opt/mysql-connector-java-5.1.39.jar /usr/lib/ambari-server/</span><br></pre></td></tr></table></figure><h3 id="2、python中英文编码问题"><a href="#2、python中英文编码问题" class="headerlink" title="2、python中英文编码问题"></a>2、python中英文编码问题</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">为了解决后期安装服务时python中英文编码问题，需要vim /usr/lib/python2.6/site-packages/resource_management/core/logger.py文件（master.one节点）</span></span><br><span class="line"><span class="meta">#</span><span class="bash">在import sys下添加如下代码：</span></span><br><span class="line">reload(sys)</span><br><span class="line">sys.setdefaultencoding('utf-8')</span><br></pre></td></tr></table></figure><h3 id="3、配置ambari-server"><a href="#3、配置ambari-server" class="headerlink" title="3、配置ambari-server"></a>3、配置ambari-server</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ambari-server setup</span><br><span class="line"></span><br><span class="line">Using python  /usr/bin/python</span><br><span class="line">Setup ambari-server</span><br><span class="line">Checking SELinux...</span><br><span class="line">SELinux status is 'enabled'</span><br><span class="line">SELinux mode is 'permissive'</span><br><span class="line">WARNING: SELinux is set to 'permissive' mode and temporarily disabled.</span><br><span class="line">OK to continue [y/n] (y)? y</span><br><span class="line">Customize user account for ambari-server daemon [y/n] (n)? y</span><br><span class="line">Enter user account for ambari-server daemon (root):root</span><br><span class="line">Adjusting ambari-server permissions and ownership...</span><br><span class="line">Checking firewall status...</span><br><span class="line">Checking JDK...</span><br><span class="line">[1] Oracle JDK 1.8 + Java Cryptography Extension (JCE) Policy Files 8</span><br><span class="line">[2] Oracle JDK 1.7 + Java Cryptography Extension (JCE) Policy Files 7</span><br><span class="line">[3] Custom JDK</span><br><span class="line">==============================================================================</span><br><span class="line">Enter choice (1): 3</span><br><span class="line">WARNING: JDK must be installed on all hosts and JAVA_HOME must be valid on all hosts.</span><br><span class="line">WARNING: JCE Policy files are required for configuring Kerberos security. If you plan to use Kerberos,please make sure JCE Unlimited Strength Jurisdiction Policy Files are valid on all hosts.</span><br><span class="line">Path to JAVA_HOME: /usr/java</span><br><span class="line">Validating JDK on Ambari Server...done.</span><br><span class="line">Checking GPL software agreement...</span><br><span class="line">GPL License for LZO: https://www.gnu.org/licenses/old-licenses/gpl-2.0.en.html</span><br><span class="line">Enable Ambari Server to download and install GPL Licensed LZO packages [y/n] (n)? y</span><br><span class="line">Completing setup...</span><br><span class="line">Configuring database...</span><br><span class="line">Enter advanced database configuration [y/n] (n)? y</span><br><span class="line">Configuring database...</span><br><span class="line">==============================================================================</span><br><span class="line">Choose one of the following options:</span><br><span class="line">[1] - PostgreSQL (Embedded)</span><br><span class="line">[2] - Oracle</span><br><span class="line">[3] - MySQL / MariaDB</span><br><span class="line">[4] - PostgreSQL</span><br><span class="line">[5] - Microsoft SQL Server (Tech Preview)</span><br><span class="line">[6] - SQL Anywhere</span><br><span class="line">[7] - BDB</span><br><span class="line">==============================================================================</span><br><span class="line">Enter choice (1): 3</span><br><span class="line">Hostname (localhost): 192.160.10.102</span><br><span class="line">Port (3306): 3306</span><br><span class="line">Database name (ambari): </span><br><span class="line">Username (ambari): root</span><br><span class="line">Enter Database Password (bigdata): hadoop102</span><br><span class="line">Configuring ambari database...</span><br><span class="line">Configuring remote database connection properties...</span><br><span class="line">WARNING: Before starting Ambari Server, you must run the following DDL against the database to create the schema: /var/lib/ambari-server/resources/Ambari-DDL-MySQL-CREATE.sql</span><br><span class="line">Proceed with configuring remote database connection properties [y/n] (y)? y</span><br><span class="line">Extracting system views...</span><br><span class="line">ambari-admin-2.6.1.0.143.jar</span><br><span class="line">...........</span><br><span class="line">Adjusting ambari-server permissions and ownership...</span><br><span class="line">Ambari Server 'setup' completed successfully.</span><br></pre></td></tr></table></figure><h3 id="4、启动ambari"><a href="#4、启动ambari" class="headerlink" title="4、启动ambari"></a>4、启动ambari</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ambari-server start</span><br></pre></td></tr></table></figure><p><strong><em>注意：出现Server not yet listening on http port 8080 after 50 seconds. Exiting异常执行以下语句：</em></strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo 'server.startup.web.timeout=120' &gt;&gt; /etc/ambari-server/conf/ambari.properties</span><br></pre></td></tr></table></figure><h2 id="十六、安装agent"><a href="#十六、安装agent" class="headerlink" title="十六、安装agent"></a>十六、安装agent</h2><p>在所有节点上安装ambari-agent</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y ambari-agent</span><br><span class="line">service ambari-agent start</span><br><span class="line">chkconfig ambari-agent on</span><br></pre></td></tr></table></figure><p><strong>成功启动后在浏览器输入Ambari地址：</strong></p><p><a href="http://192.168.10.102:8080" target="_blank" rel="noopener">http://192.168.10.102:8080</a></p><h2 id="十七、官方文档"><a href="#十七、官方文档" class="headerlink" title="十七、官方文档"></a>十七、官方文档</h2><p><a href="https://docs.cloudera.com/HDPDocuments/HDP2/HDP-2.6.4/bk_release-notes/bk_release-notes.pdf" target="_blank" rel="noopener">https://docs.cloudera.com/HDPDocuments/HDP2/HDP-2.6.4/bk_release-notes/bk_release-notes.pdf</a></p><p><a href="https://docs.cloudera.com/HDPDocuments/Ambari-2.5.1.0/bk_ambari-installation/bk_ambari-installation.pdf" target="_blank" rel="noopener">https://docs.cloudera.com/HDPDocuments/Ambari-2.5.1.0/bk_ambari-installation/bk_ambari-installation.pdf</a></p>]]></content>
      
      
      <categories>
          
          <category> Ambari+HDP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ambari </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scala隐式转换的问题分析</title>
      <link href="2019/12/24/Scala%E4%B8%AD%E9%9A%90%E5%BC%8F%E8%BD%AC%E6%8D%A2%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90/"/>
      <url>2019/12/24/Scala%E4%B8%AD%E9%9A%90%E5%BC%8F%E8%BD%AC%E6%8D%A2%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="Scala隐式转换的问题分析"><a href="#Scala隐式转换的问题分析" class="headerlink" title="Scala隐式转换的问题分析"></a>Scala隐式转换的问题分析</h1><h2 id="引出问题"><a href="#引出问题" class="headerlink" title="引出问题"></a>引出问题</h2><p>首先来看一个需求：<strong>将String类型的数字赋值给Int类型的变量。</strong></p><p>也就是这样：</p><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> num:<span class="type">Int</span>=<span class="string">"20"</span></span><br></pre></td></tr></table></figure><p>要想实现这样的效果，小伙伴们应该都能想到使用<code>隐式方法</code>这个技能。许多小伙伴一鸡冻就撸出了如下的代码：</p><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">implicit</span> <span class="function"><span class="keyword">def</span> <span class="title">strToInt</span></span>(str:<span class="type">String</span>):<span class="type">Int</span>= &#123;</span><br><span class="line">      str.toInt</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><strong><em>友情提示：</em></strong>隐式转换的代码要定义在object中哦~~~</p><p>定义了如上的隐式方法后，接下来我们来使用一下该隐式方法。接下来来一段完整代码尝尝：</p><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">TestDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> num:<span class="type">Int</span> = <span class="string">"20"</span></span><br><span class="line">    println(num)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 定义的隐式方法</span></span><br><span class="line"><span class="comment">    *    该方法的功能是将String转成Int</span></span><br><span class="line"><span class="comment">    * @param str  需要转换的字符串</span></span><br><span class="line"><span class="comment">    * @return 返回 Int</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">  <span class="keyword">implicit</span> <span class="function"><span class="keyword">def</span> <span class="title">strToInt</span></span>(str:<span class="type">String</span>):<span class="type">Int</span>= &#123;</span><br><span class="line">    str.toInt</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码撸完，感觉还不错，接着我们运行以上代码：哐当，出错啦。。。。</p><p>控制台输出以下错误信息：</p><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="type">Error</span>:(<span class="number">17</span>, <span class="number">5</span>) <span class="class"><span class="keyword">type</span> <span class="title">mismatch</span></span>;</span><br><span class="line"> found   : str<span class="class">.<span class="keyword">type</span> (<span class="params">with underlying type <span class="type">String</span></span>)</span></span><br><span class="line"><span class="class"> <span class="title">required</span></span>: ?&#123;<span class="function"><span class="keyword">def</span> <span class="title">toInt</span></span>: ?&#125;</span><br><span class="line"><span class="type">Note</span> that <span class="keyword">implicit</span> conversions are not applicable because they are ambiguous:</span><br><span class="line"> both method augmentString in <span class="class"><span class="keyword">object</span> <span class="title">Predef</span> <span class="title">of</span> <span class="title">type</span> (<span class="params">x: <span class="type">String</span></span>)<span class="title">scala</span>.<span class="title">collection</span>.<span class="title">immutable</span>.<span class="title">StringOps</span></span></span><br><span class="line"><span class="class"> <span class="title">and</span> <span class="title">method</span> <span class="title">strToInt</span> <span class="title">in</span> <span class="title">object</span> <span class="title">TestDemo</span> <span class="title">of</span> <span class="title">type</span> (<span class="params">str: <span class="type">String</span></span>)<span class="title">Int</span></span></span><br><span class="line"><span class="class"> <span class="title">are</span> <span class="title">possible</span> <span class="title">conversion</span> <span class="title">functions</span> <span class="title">from</span> <span class="title">str</span>.<span class="title">type</span> <span class="title">to</span> <span class="title">?</span></span>&#123;<span class="function"><span class="keyword">def</span> <span class="title">toInt</span></span>: ?&#125;</span><br><span class="line">    str.toInt</span><br><span class="line"><span class="type">Error</span>:(<span class="number">17</span>, <span class="number">9</span>) value toInt is not a member of <span class="type">String</span></span><br><span class="line">    str.toInt</span><br></pre></td></tr></table></figure><p>大伙看错误信息中有个关键的单词<code>ambiguous(模糊不清的，模棱两可的)</code>，以上错误信息的大致意思是说：</p><blockquote><p>隐式转换在这里不适用了，因为隐式转换出现了模糊不清的情况，这里有两个方法<br>一个在object Predef中有一个<strong>augmentString</strong>方法将x:String转成scala.collection.immutable.StringOps，<br>另一个在object TestDemo中有<strong>strToInt</strong>方法将str: String转成了Int<br>以上两个方法都可以将str: String转成了Int，所以隐式转换出现了模糊不清的情况</p></blockquote><p>看完后估计有的小伙伴还是一头雾水，这到底是说的啥，这到底是为什么？？好，那接下来我们就看看其中的究竟。</p><h2 id="分析原因"><a href="#分析原因" class="headerlink" title="分析原因"></a>分析原因</h2><h3 id="分析String相关的源码"><a href="#分析String相关的源码" class="headerlink" title="分析String相关的源码"></a>分析String相关的源码</h3><p>首先我们来看一段代码：</p><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">   <span class="keyword">val</span> str:<span class="type">String</span> = <span class="string">"20"</span></span><br><span class="line">   <span class="keyword">val</span> i = str.toInt</span><br><span class="line">   println(i)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>以上代码的正确编译运行，输出结果是Int类型的<code>20</code>。</p><p>接下来我们按住键盘上的Ctrl，鼠标点击String查看String类型，发现在object Predef中有这么一段代码：</p><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">String</span>        </span>= java.lang.<span class="type">String</span></span><br></pre></td></tr></table></figure><p>通过这段代码我们知道，Scala中的String其实是使用了java中的String。好了，那我们回顾以下java中的String有toInt()方法吗，熟悉Java的肯定立马就能回答：没有。对的，就是没有！！</p><p>String中没有toInt()方法，但是这里的<code>str</code>却可以使用<code>toInt()</code>，那说明<code>str.toInt</code>这里发生了隐式转换。没错，这里的str由String转换成了StringOps。这么转换的呢，我们上源码：</p><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">implicit</span> <span class="function"><span class="keyword">def</span> <span class="title">augmentString</span></span>(x: <span class="type">String</span>): <span class="type">StringOps</span> = <span class="keyword">new</span> <span class="type">StringOps</span>(x)</span><br></pre></td></tr></table></figure><p>在object Perdef中有一个隐式方法<code>augmentString</code>将String转换成了StringOps。接着我们再来看看StringOps的源码：</p><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">StringOps</span>(<span class="params">override val repr: <span class="type">String</span></span>) <span class="keyword">extends</span> <span class="title">AnyVal</span> <span class="keyword">with</span> <span class="title">StringLike</span>[<span class="type">String</span>] </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="keyword">protected</span>[<span class="keyword">this</span>] <span class="function"><span class="keyword">def</span> <span class="title">thisCollection</span></span>: <span class="type">WrappedString</span> = </span><br><span class="line">    <span class="keyword">new</span> <span class="type">WrappedString</span>(repr)</span><br><span class="line">    </span><br><span class="line">  <span class="keyword">override</span> <span class="keyword">protected</span>[<span class="keyword">this</span>] <span class="function"><span class="keyword">def</span> <span class="title">toCollection</span></span>(repr: <span class="type">String</span>): <span class="type">WrappedString</span> = </span><br><span class="line">  <span class="keyword">new</span> <span class="type">WrappedString</span>(repr)</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** Creates a string builder buffer as builder for this class */</span></span><br><span class="line">  <span class="keyword">override</span> <span class="keyword">protected</span>[<span class="keyword">this</span>] <span class="function"><span class="keyword">def</span> <span class="title">newBuilder</span> </span>= <span class="type">StringBuilder</span>.newBuilder</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">apply</span></span>(index: <span class="type">Int</span>): <span class="type">Char</span> = repr charAt index</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">slice</span></span>(from: <span class="type">Int</span>, until: <span class="type">Int</span>): <span class="type">String</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> start = <span class="keyword">if</span> (from &lt; <span class="number">0</span>) <span class="number">0</span> <span class="keyword">else</span> from</span><br><span class="line">    <span class="keyword">if</span> (until &lt;= start || start &gt;= repr.length)</span><br><span class="line">      <span class="keyword">return</span> <span class="string">""</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> end = <span class="keyword">if</span> (until &gt; length) length <span class="keyword">else</span> until</span><br><span class="line">    repr.substring(start, end)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">toString</span> </span>= repr</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">length</span> </span>= repr.length</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">seq</span> </span>= <span class="keyword">new</span> <span class="type">WrappedString</span>(repr)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在StringOps中没有直接发现toInt()方法，不要慌，仔细看看<code>StringOps</code>继承了<code>StringLike</code>，接着我们看看<code>StringLike</code>源码：</p><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">StringLike</span>[+<span class="type">Repr</span>] <span class="keyword">extends</span> <span class="title">Any</span> <span class="keyword">with</span> <span class="title">scala</span>.<span class="title">collection</span>.<span class="title">IndexedSeqOptimized</span>[<span class="type">Char</span>, <span class="type">Repr</span>] <span class="keyword">with</span> <span class="title">Ordered</span>[<span class="type">String</span>] </span>&#123;</span><br><span class="line"> <span class="comment">//省略代码................</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">toInt</span></span>: <span class="type">Int</span>         = java.lang.<span class="type">Integer</span>.parseInt(toString)</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * @throws java.lang.NumberFormatException  - If the string does not contain a parsable long.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">toLong</span></span>: <span class="type">Long</span>       = java.lang.<span class="type">Long</span>.parseLong(toString)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>终于在StringLike中找到了toInt，因为<code>StringOps</code>继承了<code>StringLike</code>，所以<code>StringOps</code>也就有了toInt()。</p><p>再看刚才的隐式方法：</p><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">implicit</span> <span class="function"><span class="keyword">def</span> <span class="title">augmentString</span></span>(x: <span class="type">String</span>): <span class="type">StringOps</span> = <span class="keyword">new</span> <span class="type">StringOps</span>(x)</span><br></pre></td></tr></table></figure><p>隐式方法<code>augmentString</code>将String转换成了<code>StringOps</code>，所以：</p><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">   <span class="keyword">val</span> str:<span class="type">String</span> = <span class="string">"20"</span></span><br><span class="line">   <span class="keyword">val</span> i = str.toInt <span class="comment">// 底层代码实现：augmentString(str).toInt</span></span><br><span class="line">   println(i)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>好了，通过以上代码分析，我们知道<code>StringOps</code>中存在<code>toInt</code>方法，所以通过隐式转换将str转成StringOps后就可以调用toInt了。</p><h3 id="分析Int相关的源码"><a href="#分析Int相关的源码" class="headerlink" title="分析Int相关的源码"></a>分析Int相关的源码</h3><p>接下来，我们继续分析Int类的源码：</p><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Int</span> <span class="title">private</span> <span class="keyword">extends</span> <span class="title">AnyVal</span> </span>&#123;</span><br><span class="line">  <span class="comment">//省略代码</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">toInt</span></span>: <span class="type">Int</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">toLong</span></span>: <span class="type">Long</span></span><br><span class="line">  <span class="comment">//省略代码</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>通过查看Int的源码发现在Int中也存在一个<code>toInt</code>的方法，那么现在如果也存在一个将String转成Int的隐式方法，那么，String也能调用<code>toInt</code>了。分析到这里，我们渐渐的感觉到发现冲突产生的地方了，好的，我们马上来看看我们写的隐式方法的代码：</p><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 定义的隐式方法</span></span><br><span class="line"><span class="comment">    *    该方法的功能是将String转成Int</span></span><br><span class="line"><span class="comment">    * @param str  需要转换的字符串</span></span><br><span class="line"><span class="comment">    * @return 返回 Int</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="keyword">implicit</span> <span class="function"><span class="keyword">def</span> <span class="title">strToInt</span></span>(str:<span class="type">String</span>):<span class="type">Int</span>= &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * 通过分析我们知道StringOps和Int都有toInt方法，所以</span></span><br><span class="line"><span class="comment">      * str.toInt在这里有两个隐式函数都可以进行转换</span></span><br><span class="line"><span class="comment">      * 1、使用scala.Predef 中的</span></span><br><span class="line"><span class="comment">      *       implicit def augmentString(x: String): StringOps = new StringOps(x)</span></span><br><span class="line"><span class="comment">      *   所以str.toInt 就等价于  augmentString(str).toInt</span></span><br><span class="line"><span class="comment">      *</span></span><br><span class="line"><span class="comment">      * 2、使用自己定义这个隐式方法(递归调用)</span></span><br><span class="line"><span class="comment">      *      augmentString 就等价于 strToInt(str).toInt</span></span><br><span class="line"><span class="comment">      *</span></span><br><span class="line"><span class="comment">      *  好了，我们知道隐式转换只能匹配一个，不能有多个，</span></span><br><span class="line"><span class="comment">      *  而这里str.toInt找到两个隐式转换都可以实现，所以出现了之前“模棱两可”的错误信息</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">    str.toInt</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>既然分析清楚了出现错误的原因，接下来我们就根据原因来看看如何解决吧。</p><p><strong>解决方法的本质就是不要让toInt隐式转换的时候找到多个隐式方法出现“模棱两可”。</strong></p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h3><p>使用<code>Integer.parseInt(str)</code>替换<code>str.toInt</code>。完整代码代码如下：</p><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">TestDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> str:<span class="type">Int</span> = <span class="string">"20"</span></span><br><span class="line">    println(str)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">implicit</span> <span class="function"><span class="keyword">def</span> <span class="title">strToInt</span></span>(str:<span class="type">String</span>):<span class="type">Int</span>= &#123;</span><br><span class="line">    <span class="type">Integer</span>.parseInt(str)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用<code>Integer.parseInt(str)</code>替换<code>str.toInt</code>，没有使用<code>str.toInt</code>了，隐式转换自然就就没有了。</p><h3 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h3><p>使用<code>new StringOps(str).toInt</code>替换<code>str.toInt</code>。完整代码代码如下：</p><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">TestDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> str:<span class="type">Int</span> = <span class="string">"20"</span></span><br><span class="line">    println(str)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">implicit</span> <span class="function"><span class="keyword">def</span> <span class="title">strToInt</span></span>(str:<span class="type">String</span>):<span class="type">Int</span>= &#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="type">StringOps</span>(str).toInt</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用<code>new StringOps(str).toInt</code>替换<code>str.toInt</code>。这里使用<code>new StringOps(str)</code>显式调用了<code>toInt</code>，所以也没有隐式转换了。</p><h3 id="方案三"><a href="#方案三" class="headerlink" title="方案三"></a>方案三</h3><p>将自己定义的隐式方法<code>implicit def strToInt(str:String):Int</code>的返回值省略，该方法就不能被递归调用了，那这时候<code>str.toInt</code>就只有<code>implicit def augmentString(x: String): StringOps</code>这一个隐式转换方法了，也解决了两个隐式方法的冲突问题。完整代码如下：</p><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">TestDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> str:<span class="type">Int</span> = <span class="string">"20"</span>  <span class="comment">// error</span></span><br><span class="line">    println(str)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">implicit</span> <span class="function"><span class="keyword">def</span> <span class="title">strToInt</span></span>(str:<span class="type">String</span>) = &#123;</span><br><span class="line">    str.toInt</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码第四行<code>val str:Int = &quot;20&quot;</code>编译错误，错误信息如下：</p><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="type">Error</span>:(<span class="number">8</span>, <span class="number">19</span>) <span class="class"><span class="keyword">type</span> <span class="title">mismatch</span></span>;</span><br><span class="line"> found   : <span class="type">String</span>(<span class="string">"20"</span>)</span><br><span class="line"> required: <span class="type">Int</span></span><br><span class="line"> <span class="type">Note</span>: <span class="keyword">implicit</span> method strToInt is not applicable here because it comes after the application point and it lacks an explicit result <span class="class"><span class="keyword">type</span></span></span><br><span class="line"><span class="class">    <span class="title">val</span> <span class="title">str</span></span>:<span class="type">Int</span> = <span class="string">"20"</span></span><br></pre></td></tr></table></figure><p>出现该错误的原因是：</p><blockquote><p>隐式方法没有显式给出返回类型，必须位于应用点之前</p></blockquote><p>所以正确代码如下：</p><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">TestDemo</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">implicit</span> <span class="function"><span class="keyword">def</span> <span class="title">strToInt</span></span>(str:<span class="type">String</span>) = &#123;</span><br><span class="line">    str.toInt</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> str:<span class="type">Int</span> = <span class="string">"20"</span></span><br><span class="line">    println(str)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好了，到这里我们的问题分析及解决方案就结束了，希望对大家有所帮助。</p>]]></content>
      
      
      <categories>
          
          <category> Scala </category>
          
      </categories>
      
      
        <tags>
            
            <tag> scala </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shell学习-03</title>
      <link href="2018/03/12/Shell%E5%AD%A6%E4%B9%A0-03/"/>
      <url>2018/03/12/Shell%E5%AD%A6%E4%B9%A0-03/</url>
      
        <content type="html"><![CDATA[<h2 id="expect"><a href="#expect" class="headerlink" title="expect"></a>expect</h2><p>expect是一个用于交互的工具。</p><p>作用：当我们执行一个命令的时候，用来进行交互输入需要的信息，以完成功能</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@hadoop10 ~]# yum -y install expect</span><br></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">expect操作流程：</span></span><br><span class="line">spawn 需要执行的进程 --- expect获取需要进行交互的关键字 --- send 发送交互信息 --- 交互执行完成</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 常用命令总结</span></span></span><br><span class="line">spawn               交互程序开始后面跟命令或者指定程序</span><br><span class="line">expect              获取匹配信息匹配成功则执行expect后面的程序动作</span><br><span class="line">send exp_send       用于发送指定的字符串信息</span><br><span class="line">exp_continue        在expect中多次匹配就需要用到</span><br><span class="line">exit                退出expect脚本</span><br><span class="line">eof                 expect执行结束 退出</span><br><span class="line">set                 定义变量</span><br><span class="line">set timeout         设置超时时间</span><br><span class="line">----------------------------------------</span><br><span class="line"><span class="meta">#</span><span class="bash">!/usr/bin/expect</span></span><br><span class="line"></span><br><span class="line">spawn ssh root@hadoop11</span><br><span class="line"></span><br><span class="line">expect &#123;</span><br><span class="line">  "yes/no" &#123; send "yes\r";exp_continue &#125;</span><br><span class="line">  "password:" &#123; send "123456\r" &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#</span><span class="bash">interact</span></span><br><span class="line">expect eof</span><br><span class="line">-------------------------------------</span><br><span class="line"><span class="meta">#</span><span class="bash">设置变量</span></span><br><span class="line"><span class="meta">#</span><span class="bash">!/usr/bin/expect</span></span><br><span class="line"></span><br><span class="line">set USERNAME [lindex $argv 0]</span><br><span class="line">set HOSTNAME [lindex $argv 1]</span><br><span class="line"></span><br><span class="line">spawn ssh $USERNAME@$HOSTNAME</span><br><span class="line"></span><br><span class="line">expect &#123;</span><br><span class="line">  "yes/no" &#123; send "yes\r";exp_continue &#125;</span><br><span class="line">  "password:" &#123; send "123456\r" &#125;</span><br><span class="line">&#125;</span><br><span class="line">interact</span><br><span class="line">---------------------------------------------</span><br></pre></td></tr></table></figure><h3 id="编写脚本，实现免密登录"><a href="#编写脚本，实现免密登录" class="headerlink" title="编写脚本，实现免密登录"></a>编写脚本，实现免密登录</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 接收用户输入的用户名</span></span></span><br><span class="line">USERNAME=$1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#自己完成expect是否安装的检测</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#自己完善~/.ssh/id_rsa已经存在的问题</span></span></span><br><span class="line"></span><br><span class="line">ssh-keygen -P "" -f ~/.ssh/id_rsa</span><br><span class="line"></span><br><span class="line">for IP in `cat /opt/nodes`</span><br><span class="line">do</span><br><span class="line">    ##使用expect</span><br><span class="line">   /usr/bin/expect&lt;&lt;EOF</span><br><span class="line">spawn ssh-copy-id $USERNAME@$IP</span><br><span class="line">expect &#123;</span><br><span class="line">  "yes/no" &#123; send "yes\r";exp_continue &#125;</span><br><span class="line">  "password:" &#123; send "123456\r" &#125;</span><br><span class="line">&#125;</span><br><span class="line">expect eof</span><br><span class="line">EOF</span><br><span class="line">done</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">程序&lt;&lt;EOF</span><br><span class="line"></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">表示&lt;&lt;EOF到EOF之间的信息都是交给&lt;&lt;EOF前面的程序的</span><br><span class="line"></span><br><span class="line">-------------------------------------------------</span><br><span class="line">程序&lt;&lt;-EOF</span><br><span class="line"></span><br><span class="line">EOF</span><br><span class="line">-EOF表示最后的EOF前面可以添加tab制表符</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shell学习-01</title>
      <link href="2018/03/11/Shell%E5%AD%A6%E4%B9%A0-01/"/>
      <url>2018/03/11/Shell%E5%AD%A6%E4%B9%A0-01/</url>
      
        <content type="html"><![CDATA[<h2 id="Shell"><a href="#Shell" class="headerlink" title="Shell"></a>Shell</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看当前的shell</span></span><br><span class="line">[root@hadoop10 cron]# echo $SHELL</span><br><span class="line">/bin/bash</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看所有的shell</span></span><br><span class="line">[root@hadoop10 cron]# cat /etc/shells </span><br><span class="line">/bin/sh</span><br><span class="line">/bin/bash</span><br><span class="line">/sbin/nologin</span><br><span class="line">/bin/dash</span><br><span class="line">/bin/tcsh</span><br><span class="line">/bin/csh</span><br></pre></td></tr></table></figure><h3 id="Shell-元字符"><a href="#Shell-元字符" class="headerlink" title="Shell 元字符"></a>Shell 元字符</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">以下的元字符（该字符不表示自身字符的含义了）。一般使用在正则中</span><br><span class="line">^ 行首</span><br><span class="line"><span class="meta">$</span><span class="bash"> 行尾</span></span><br><span class="line">* 数量词，表示0或多个字符。*需要放在一个实体字符之后</span><br><span class="line">. 表示任意字符</span><br><span class="line">\ 转义字符</span><br><span class="line">[] 匹配[]中的任意一个字符</span><br><span class="line">[^] []中的^表示非</span><br><span class="line">&#123;n,m&#125; 表示数量n-m个。需要放在一个实体字符之后</span><br><span class="line">案例：</span><br><span class="line">  [root@hadoop10 opt]# ll | grep .*\.txt #过滤后缀是.txt的文件</span><br></pre></td></tr></table></figure><h3 id="Shell的执行顺序"><a href="#Shell的执行顺序" class="headerlink" title="Shell的执行顺序"></a>Shell的执行顺序</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">command1 &amp;&amp; command2 #当command1执行成功才会执行command2</span><br><span class="line">command1 || command2 #当command1执行失败才会执行command2</span><br><span class="line"></span><br><span class="line">[root@hadoop10 opt]# ls  &amp;&gt;/dev/null  &amp;&amp; echo "java" || echo "php"</span><br></pre></td></tr></table></figure><h2 id="Shell变量"><a href="#Shell变量" class="headerlink" title="Shell变量"></a>Shell变量</h2><p>Shell变量可以是字母，数字，下划线。数字不能开头</p><p>建议：所有的变量大写</p><h3 id="系统预置的或者自己设置的环境变量"><a href="#系统预置的或者自己设置的环境变量" class="headerlink" title="系统预置的或者自己设置的环境变量"></a>系统预置的或者自己设置的环境变量</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">查看环境变量</span></span><br><span class="line">set 或者 env</span><br></pre></td></tr></table></figure><h3 id="编写shell脚本"><a href="#编写shell脚本" class="headerlink" title="编写shell脚本"></a>编写shell脚本</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">在Linux中文件扩展名的概念，脚本的shell脚本的时候扩展名使用.sh</span><br><span class="line">1、vim sh01.sh</span><br><span class="line">2、</span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 编写的第一个脚本</span></span></span><br><span class="line">echo "hello"</span><br><span class="line">3、执行shell脚本</span><br><span class="line">a:[root@hadoop10 opt]# /bin/bash sh01.sh  -- 在子shell中执行</span><br><span class="line">b:[root@hadoop10 opt]# /bin/sh sh01.sh    -- 在子shell中执行</span><br><span class="line">ab两种执行方式，没有把sh01.sh当成脚本，而是一个普通的文件。因为sh01.sh成为了bash命令的文件参数</span><br><span class="line"></span><br><span class="line">c:自己成为脚本，独立执行</span><br><span class="line">chmod u+x sh01.sh</span><br><span class="line">[root@hadoop10 opt]# sh01.sh</span><br><span class="line">-bash: sh01.sh: command not found</span><br><span class="line">原因：sh01.sh没有配置环境变量</span><br><span class="line">没有环境变量需要带上路径执行。</span><br><span class="line">[root@hadoop10 opt]# ./sh01.sh  --在子shell中执行</span><br><span class="line">hello</span><br><span class="line"></span><br><span class="line">d: source ./sh01.sh   ---在当前进程执行</span><br><span class="line">   . ./sh01.sh   #source可以简写成.</span><br></pre></td></tr></table></figure><p>子shell运行演示：</p><p><img src="https://i.loli.net/2020/11/10/v3fmFI6EAXxS2jt.png" alt="11.png"></p><h3 id="预定义变量"><a href="#预定义变量" class="headerlink" title="预定义变量"></a>预定义变量</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">所有的预定义变量都是由一个$和符号组成</span><br><span class="line"><span class="meta">$</span><span class="bash">0 <span class="comment">#当前脚本的执行名称</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash">n <span class="comment">#获取第n个参数；如果n&gt;=10，那么就要写成$&#123;10&#125;</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash">* <span class="comment">#获取所有的参数</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash">@ <span class="comment">#获取所有的参数</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"><span class="comment"># #获取参数个数</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash">$ <span class="comment">#获取当前脚本的PID</span></span></span><br><span class="line">   [root@hadoop10 opt]# cd /proc/$$/fd</span><br><span class="line"><span class="meta">$</span><span class="bash">! <span class="comment">#获取上一个后台进程的PID</span></span></span><br><span class="line">    [root@hadoop10 fd]# ls &amp;</span><br><span class="line">    [1] 2224</span><br><span class="line">    [root@hadoop10 fd]# echo $!</span><br><span class="line">    2224</span><br><span class="line"><span class="meta">$</span><span class="bash">? <span class="comment">#返回上一个指令的返回值</span></span></span><br><span class="line">   0：表示成功</span><br><span class="line">   非0：表示失败</span><br></pre></td></tr></table></figure><h3 id="用户自定义变量"><a href="#用户自定义变量" class="headerlink" title="用户自定义变量"></a>用户自定义变量</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">定义变量格式：</span><br><span class="line">   变量名=值</span><br><span class="line">[root@hadoop10 opt]# name="zhangsan"    # 定义变量</span><br><span class="line"></span><br><span class="line">获取变量的值使用 $变量名</span><br><span class="line">[root@hadoop10 opt]# echo $name  # 使用变量</span><br><span class="line">   zhangsan</span><br><span class="line">[root@hadoop10 opt]# unset name  # 删除变量</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">declare</span>可以显示执行数据的类型</span></span><br><span class="line">[root@hadoop10 opt]# declare -i age=10</span><br><span class="line">-i:Integer</span><br><span class="line">-f：function</span><br><span class="line">-x:export 全局变量</span><br><span class="line">-a：array 数组</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">export</span> 全局变量。作用：是将变量提升到当前进程及子进程中使用</span></span><br><span class="line">AGE=10</span><br><span class="line">export AGE</span><br><span class="line">或者：</span><br><span class="line">export NAME="zhangsan"</span><br></pre></td></tr></table></figure><h4 id="案例：配置jdk的环境变量"><a href="#案例：配置jdk的环境变量" class="headerlink" title="案例：配置jdk的环境变量"></a>案例：配置jdk的环境变量</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1、vim /etc/profile</span><br><span class="line">   export JAVA_HOME=/opt/jdk</span><br><span class="line">   export PATH=$PATH:$JAVA_HOME/bin</span><br><span class="line">2、让环境变量生效 --- 将/etc/profile加载到本进程中</span><br><span class="line">   . /etc/profile</span><br></pre></td></tr></table></figure><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">NUM=10</span><br><span class="line">echo $NUM  #获取变量的值</span><br><span class="line">echo $&#123;#NUM&#125; #获取值的长度</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">数组定义的格式</span></span><br><span class="line">语法： 数组名=(元素)</span><br><span class="line">[root@hadoop10 ~]# scores=()</span><br><span class="line">[root@hadoop10 ~]# scores=(1 2 3 4 5)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">获取数组的元素</span></span><br><span class="line">语法：$&#123;数组名[index]&#125;  index从0开始</span><br><span class="line">[root@hadoop10 ~]# echo $&#123;scores[0]&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">给数组的元素赋值</span></span><br><span class="line">语法：数组名[index]=值</span><br><span class="line">[root@hadoop10 ~]# scores[0]=100</span><br><span class="line">[root@hadoop10 ~]# echo $&#123;scores[0]&#125;</span><br><span class="line">100</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">获取数组的所有元素</span></span><br><span class="line">语法：$&#123;数组名[*]&#125; 或者 $&#123;数组名[@]&#125;</span><br><span class="line">[root@hadoop10 ~]# echo $&#123;scores[@]&#125; </span><br><span class="line">100 2 3 4 5</span><br><span class="line">[root@hadoop10 ~]# echo $&#123;scores[*]&#125;</span><br><span class="line">100 2 3 4 5</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">获取数组的长度  --- 其实是获取有效数字(存在集合中的值)的个数</span></span><br><span class="line">语法：$&#123;#数组名[*]&#125; 或者 $&#123;#数组名[@]&#125;</span><br><span class="line">[root@hadoop10 ~]# echo $&#123;#scores[*]&#125;</span><br><span class="line">5</span><br><span class="line">[root@hadoop10 ~]# echo $&#123;#scores[@]&#125;</span><br><span class="line">5</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">删除数组的元素</span></span><br><span class="line">语法：unset 数组名[index]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">删除数组</span></span><br><span class="line">语法：unset 数组名</span><br></pre></td></tr></table></figure><h2 id="特殊符号"><a href="#特殊符号" class="headerlink" title="特殊符号"></a>特殊符号</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">"" 双引号： 引号的变量会生效</span><br><span class="line">'' 单引号： 引号的变量是字符串</span><br><span class="line">`` 后引号： 命令生效</span><br><span class="line"></span><br><span class="line">vim sh02.sh</span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">NAME="sunyue"</span><br><span class="line">echo "NAME is $NAME"</span><br><span class="line">echo 'NAME is $NAME'</span><br><span class="line"></span><br><span class="line">[root@hadoop10 opt]# ./sh02.sh </span><br><span class="line">NAME is sunyue</span><br><span class="line">NAME is $NAME</span><br><span class="line"></span><br><span class="line">------------------------------------</span><br><span class="line">vim sh02.sh</span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">BASENAME=`basename /opt/sh01.sh`</span><br><span class="line">echo "basename is $BASENAME"</span><br><span class="line"></span><br><span class="line">[root@hadoop10 opt]# ./sh02.sh </span><br><span class="line">basename is sh01.sh</span><br></pre></td></tr></table></figure><h2 id="算术运算"><a href="#算术运算" class="headerlink" title="算术运算"></a>算术运算</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">() :#执行命令</span><br><span class="line">[root@hadoop10 opt]# (1+2)  </span><br><span class="line">-bash: 1+2: command not found</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash">():<span class="comment">#获取命令执行的结果</span></span></span><br><span class="line">[root@hadoop10 opt]# bs=$(basename /opt/sh01.sh)</span><br><span class="line">[root@hadoop10 opt]# echo $bs</span><br><span class="line">sh01.sh</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash">((算术表达式))：<span class="comment">#算术运算</span></span></span><br><span class="line">[root@hadoop10 opt]# a=$((1+2))</span><br><span class="line">[root@hadoop10 opt]# echo $a</span><br><span class="line">3</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash">[算术表达式]：<span class="comment">#算术运算</span></span></span><br><span class="line">[root@hadoop10 opt]# b=$[1+2]</span><br><span class="line">[root@hadoop10 opt]# echo $b</span><br><span class="line">3</span><br><span class="line">[root@hadoop10 opt]# echo $((3**2))  # 3的2次方</span><br><span class="line">9</span><br><span class="line"></span><br><span class="line">expr 算术表达式 #算术运算</span><br><span class="line">[root@hadoop10 opt]# a=$(expr 1 + 2)</span><br><span class="line">[root@hadoop10 opt]# echo $a</span><br><span class="line">3</span><br><span class="line"></span><br><span class="line">[root@hadoop10 opt]# a=`expr 1 + 2`</span><br><span class="line">[root@hadoop10 opt]# a=`expr 2 \* 3`</span><br><span class="line"></span><br><span class="line">a=2</span><br><span class="line">b=3</span><br><span class="line">[root@hadoop10 opt]# c=`expr $a + $b`</span><br><span class="line">[root@hadoop10 opt]# c=`expr 2 \* \( 3 - 1 \)`</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">let</span></span></span><br><span class="line">[root@hadoop10 opt]# let num=1+2</span><br><span class="line">[root@hadoop10 opt]# echo $num</span><br></pre></td></tr></table></figure><h2 id="逻辑判断"><a href="#逻辑判断" class="headerlink" title="逻辑判断"></a>逻辑判断</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">逻辑判断是需要交给测试符号判断的</span><br><span class="line"></span><br><span class="line">test</span><br><span class="line"></span><br><span class="line">man test</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 文件相关的判断</span></span><br><span class="line">-d FILE</span><br><span class="line">      FILE exists and is a directory</span><br><span class="line">-e FILE</span><br><span class="line">      FILE exists</span><br><span class="line">-f FILE</span><br><span class="line">     FILE exists and is a regular file</span><br><span class="line">-r FILE</span><br><span class="line">     FILE exists and read permission is granted</span><br><span class="line">     </span><br><span class="line">[root@hadoop10 opt]# test -f sh01.sh </span><br><span class="line">[root@hadoop10 opt]# echo $?</span><br><span class="line">0</span><br><span class="line"></span><br><span class="line">------------------------------------------</span><br><span class="line">[ #是test的简写</span><br><span class="line"></span><br><span class="line">[root@hadoop10 opt]# type -a [</span><br><span class="line">[ is a shell builtin</span><br><span class="line">[ is /usr/bin/[</span><br><span class="line">[root@hadoop10 opt]# [ -f sh01.sh ]</span><br><span class="line">[root@hadoop10 opt]# echo $?</span><br><span class="line">0</span><br><span class="line">[root@hadoop10 opt]# [ -d sh01.sh ] </span><br><span class="line">[root@hadoop10 opt]# echo $?</span><br><span class="line">1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">String相关的判断 ： 字符串建议都加上双引号</span></span><br><span class="line"> -n STRING</span><br><span class="line">      the length of STRING is nonzero</span><br><span class="line"> -z STRING</span><br><span class="line">      the length of STRING is zero</span><br><span class="line"> STRING1 = STRING2</span><br><span class="line">     the strings are equal</span><br><span class="line">STRING1 != STRING2</span><br><span class="line">     the strings are not equal</span><br><span class="line">[root@hadoop10 opt]# [ -z "$name" ]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Integer比较</span></span><br><span class="line"></span><br><span class="line">INTEGER1 -eq INTEGER2</span><br><span class="line">INTEGER1 is equal to INTEGER2</span><br><span class="line"></span><br><span class="line">INTEGER1 -ge INTEGER2</span><br><span class="line">INTEGER1 is greater than or equal to INTEGER2</span><br><span class="line"></span><br><span class="line">INTEGER1 -gt INTEGER2</span><br><span class="line">INTEGER1 is greater than INTEGER2</span><br><span class="line"></span><br><span class="line">INTEGER1 -le INTEGER2</span><br><span class="line">INTEGER1 is less than or equal to INTEGER2</span><br><span class="line"></span><br><span class="line">INTEGER1 -lt INTEGER2</span><br><span class="line">INTEGER1 is less than INTEGER2</span><br><span class="line"></span><br><span class="line">INTEGER1 -ne INTEGER2</span><br><span class="line">INTEGER1 is not equal to INTEGER2</span><br></pre></td></tr></table></figure><h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><h3 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="keyword">if</span>语句</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">NUM=$1</span><br><span class="line"></span><br><span class="line">if [ $NUM -gt 10 ]</span><br><span class="line">then</span><br><span class="line">  echo "比10大"</span><br><span class="line">else</span><br><span class="line"> echo "小了"</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">if...then...elif...then...fi</span></span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">NUM=$1</span><br><span class="line"></span><br><span class="line">if [ $NUM -ge 90 ]</span><br><span class="line">then</span><br><span class="line">  echo "优秀"</span><br><span class="line">elif [ $NUM -ge 60 ]</span><br><span class="line">then</span><br><span class="line">  echo "及格"</span><br><span class="line">else</span><br><span class="line">  echo "滚蛋"</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h3 id="case"><a href="#case" class="headerlink" title="case"></a>case</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">NUM=$1</span><br><span class="line">case $NUM in</span><br><span class="line">10)</span><br><span class="line">  echo "10---"</span><br><span class="line">  ;;</span><br><span class="line">12)</span><br><span class="line">  echo "12----"</span><br><span class="line">  ;;</span><br><span class="line">*)</span><br><span class="line">  echo "other----------"</span><br><span class="line">  ;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure><h3 id="for循环格式一"><a href="#for循环格式一" class="headerlink" title="for循环格式一"></a>for循环格式一</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 循环输出1-10的值</span></span></span><br><span class="line">for((i=1;i&lt;=10;i++))</span><br><span class="line">do</span><br><span class="line">   echo -n $i</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">----------------------------------------</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="meta">#!/bin/bash</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 输出1-10的偶数</span></span></span><br><span class="line">for(( i = 1;i &lt;= 10;i++))</span><br><span class="line">do</span><br><span class="line">  if [ $[$i % 2] -eq 0 ]</span><br><span class="line">   then</span><br><span class="line">     echo  $i</span><br><span class="line">   fi</span><br><span class="line">done</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shell学习-02</title>
      <link href="2018/03/11/Shell%E5%AD%A6%E4%B9%A0-02/"/>
      <url>2018/03/11/Shell%E5%AD%A6%E4%B9%A0-02/</url>
      
        <content type="html"><![CDATA[<h2 id="for循环格式二"><a href="#for循环格式二" class="headerlink" title="for循环格式二"></a>for循环格式二</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">for...in 语句</span><br><span class="line">&#123;1..10&#125; #表示集合 1到10</span><br><span class="line">&#123;1,2,3&#125; #表示集合 1 2 3</span><br><span class="line">------------------------------</span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#循环输出1-10的所有数</span></span></span><br><span class="line">for i in &#123;1..10&#125;</span><br><span class="line">do</span><br><span class="line">  echo $i</span><br><span class="line">done</span><br><span class="line">--------------------------------</span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#循环输出1-10的所有数</span></span></span><br><span class="line">for i in &#123;1,2,3,4,5,6,7,8,9,10&#125;</span><br><span class="line">do</span><br><span class="line">  echo $i</span><br><span class="line">done</span><br><span class="line">------------------------------------</span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">for i in 1 2 3 4 5</span><br><span class="line">do</span><br><span class="line"> echo $i</span><br><span class="line">done</span><br><span class="line">-----------------------------------------</span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">a=(1 2 3 4 5)</span><br><span class="line">for i in $&#123;a[*]&#125;</span><br><span class="line">do</span><br><span class="line"> echo $i</span><br><span class="line">done</span><br><span class="line">--------------------------------------------</span><br><span class="line"></span><br><span class="line">"$*": #循环的时候，把所有的参数当作整体</span><br><span class="line">"$@": #循环的时候,把所有参数当成一个一个的元素</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">for i in "$*"</span><br><span class="line">do</span><br><span class="line">  echo $i</span><br><span class="line">done</span><br><span class="line">[root@hadoop10 opt]# ./forin03.sh 1 2 3 4 5</span><br><span class="line">1 2 3 4 5</span><br><span class="line">-------------------------------------------------</span><br><span class="line"><span class="meta">#</span><span class="bash">seq</span></span><br><span class="line">NAME</span><br><span class="line">       seq - print a sequence of numbers</span><br><span class="line">SYNOPSIS</span><br><span class="line">       seq [OPTION]... LAST</span><br><span class="line">       seq [OPTION]... FIRST LAST</span><br><span class="line">       seq [OPTION]... FIRST INCREMENT LAST</span><br><span class="line"></span><br><span class="line">----------------------</span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">for i in `seq 1 10`</span><br><span class="line">do</span><br><span class="line">  echo $i</span><br><span class="line">done</span><br><span class="line">----------------------</span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">for i in $(seq 1 10)</span><br><span class="line">do</span><br><span class="line">  echo $i</span><br><span class="line">done</span><br><span class="line">----------------------</span><br><span class="line">data.txt:</span><br><span class="line">1 2</span><br><span class="line">3 4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">for i in `cat /opt/data.txt`</span><br><span class="line">do</span><br><span class="line">   echo $i</span><br><span class="line">done</span><br><span class="line"><span class="meta">#</span><span class="bash">注意：<span class="keyword">for</span>循环能够识别空格、制表符和换行</span></span><br><span class="line">-------------------------------------</span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">read -p"请输入一个数字" START  END</span><br><span class="line">for i in $(seq $START $END)</span><br><span class="line">do</span><br><span class="line">  echo $i</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h2 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">循环输出1-10的所有数 </span></span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">i=1</span><br><span class="line">while [ $i -le 10 ]</span><br><span class="line">do</span><br><span class="line">  echo $i</span><br><span class="line">  ((i++))</span><br><span class="line">done</span><br><span class="line">---------------------------------</span><br><span class="line"><span class="meta">#</span><span class="bash">循环输出1-10的所有偶数</span></span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">i=1</span><br><span class="line">while [ $i -le 10 ]</span><br><span class="line">do</span><br><span class="line">  if [ $[$i%2] -eq 0 ]</span><br><span class="line">  then</span><br><span class="line">    echo $i</span><br><span class="line">  fi</span><br><span class="line">    ((i++))</span><br><span class="line">done</span><br><span class="line">--------------------------------------</span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">while read i</span><br><span class="line">do</span><br><span class="line">  echo $i</span><br><span class="line">done &lt; /opt/data.txt</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># while 读取文本是按行读取</span></span></span><br><span class="line">----------------------------------------</span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">while :</span><br><span class="line">do</span><br><span class="line">  echo "shell---------"</span><br><span class="line">  sleep 2s</span><br><span class="line">done</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#这里的: 表示true</span></span></span><br></pre></td></tr></table></figure><h2 id="until循环"><a href="#until循环" class="headerlink" title="until循环"></a>until循环</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">until和while正好相反。</span><br><span class="line">while是条件成立时执行</span><br><span class="line">until是条件不成立时执行</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">read -p"输入一个数据：" i</span><br><span class="line">until [ $i -le 10 ]</span><br><span class="line">do</span><br><span class="line">  echo $i</span><br><span class="line">  ((i--))</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h2 id="循环中断"><a href="#循环中断" class="headerlink" title="循环中断"></a>循环中断</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">break</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">for i in `seq 1 10`</span><br><span class="line">do</span><br><span class="line">   if [ $i -eq 5 ]</span><br><span class="line">   then</span><br><span class="line">     break</span><br><span class="line">   fi</span><br><span class="line">    echo "$i"</span><br><span class="line">done</span><br><span class="line">-------------------------</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">continue</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">for i in `seq 1 10`</span><br><span class="line">do</span><br><span class="line">   if [ $i -eq 5 ]</span><br><span class="line">   then</span><br><span class="line">     continue</span><br><span class="line">   fi</span><br><span class="line">    echo "$i"</span><br><span class="line">done</span><br><span class="line">--------------------------</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">exit</span> 终止脚本程序</span></span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">for i in `seq 1 10`</span><br><span class="line">do</span><br><span class="line">   if [ $i -eq 5 ]</span><br><span class="line">   then</span><br><span class="line">     exit 100</span><br><span class="line">   fi</span><br><span class="line">    echo "$i"</span><br><span class="line">done</span><br><span class="line">echo "over----------"</span><br></pre></td></tr></table></figure><h2 id="编写脚本，检测当前网络中哪些服务器在线？？"><a href="#编写脚本，检测当前网络中哪些服务器在线？？" class="headerlink" title="编写脚本，检测当前网络中哪些服务器在线？？"></a>编写脚本，检测当前网络中哪些服务器在线？？</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#检测当前网络中哪些服务器在线？？</span></span></span><br><span class="line">for IP in `seq 1 254`</span><br><span class="line">do</span><br><span class="line">  ping -c1 -W1 192.168.10.$IP &amp;&gt;/dev/null</span><br><span class="line">  if [ $? -eq 0 ];then</span><br><span class="line">     echo "192.168.10.$IP is active" &gt;&gt; /opt/ip.txt </span><br><span class="line">  fi</span><br><span class="line">done &amp;</span><br></pre></td></tr></table></figure><h2 id="批量添加用户"><a href="#批量添加用户" class="headerlink" title="批量添加用户"></a>批量添加用户</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#批量添加用户</span></span></span><br><span class="line">for NAME in `cat /opt/names.txt`</span><br><span class="line">do</span><br><span class="line">    useradd $NAME</span><br><span class="line">    echo "123456" | passwd --stdin $NAME &amp;&gt; /dev/null</span><br><span class="line">done &amp;</span><br></pre></td></tr></table></figure><h2 id="编写一个脚本，实现将文件分发到其他远程节点"><a href="#编写一个脚本，实现将文件分发到其他远程节点" class="headerlink" title="编写一个脚本，实现将文件分发到其他远程节点"></a>编写一个脚本，实现将文件分发到其他远程节点</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#判断参数</span></span></span><br><span class="line">if [ $# -eq 0 ];then</span><br><span class="line">  echo "Please enter one or more files or directories!!"</span><br><span class="line">  exit 1</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#获取当前的用户名</span></span></span><br><span class="line">USERNAME=$(whoami)</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#获取当前的主机名</span></span></span><br><span class="line">HOSTNAME=$(hostname)</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#获取机配置文件nodes的路径</span></span></span><br><span class="line">DIRNAME=`dirname $0`</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#读取目标主机配置文件nodes</span></span></span><br><span class="line"></span><br><span class="line">for HOST in `cat $DIRNAME/nodes`</span><br><span class="line">do</span><br><span class="line">        if [ "$HOST" = "$HOSTNAME" ];then</span><br><span class="line">          continue</span><br><span class="line">        fi</span><br><span class="line">        </span><br><span class="line">        #获取文件</span><br><span class="line">        for file in $*</span><br><span class="line">         do</span><br><span class="line">         ## 获取文件的相对路径</span><br><span class="line">         DIR_NAME=`dirname $file`</span><br><span class="line">         ##获取文件的名称</span><br><span class="line">         FILE_NAME=$(basename $file)         </span><br><span class="line">         ## 相对路径转成绝对路径</span><br><span class="line">         FILE_ABS_PATH=`cd $DIR_NAME;pwd`</span><br><span class="line">         </span><br><span class="line">         rsync -rvl $FILE_ABS_PATH/$FILE_NAME $USERNAME@$HOST:$FILE_ABS_PATH</span><br><span class="line">        done</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h2 id="sed流编辑器-—-扩展"><a href="#sed流编辑器-—-扩展" class="headerlink" title="sed流编辑器 —- 扩展"></a>sed流编辑器 —- 扩展</h2><p>vim编辑器是基于交互方式的编辑器。在shell编程的代码我们需要通过代码编辑文本，此时使用sed流编辑器。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">sed语法格式</span></span><br><span class="line">sed [可选] command 文件</span><br><span class="line"><span class="meta">#</span><span class="bash">可选</span></span><br><span class="line">-n: #只会打印到匹配到的行</span><br><span class="line">-i: #修改原文件</span><br><span class="line">-r: #扩展正则</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">command</span></span></span><br><span class="line">这里可以是命令和正则规则</span><br><span class="line">d #删除</span><br><span class="line">n #</span><br><span class="line">p # 打印输出</span><br><span class="line"></span><br><span class="line">--------------------</span><br><span class="line">[root@hadoop10 opt]# sed -i '9,$d' 1.txt #删除第9行到最后一行，-i更改源文件</span><br><span class="line">[root@hadoop10 opt]# sed -n /daemon/p 1.txt #打印匹配的行</span><br><span class="line"></span><br><span class="line">[root@hadoop10 opt]# sed /adm/d 1.txt  #删除匹配内容的行</span><br><span class="line"></span><br><span class="line">[root@hadoop10 opt]# sed 's/bin/xxx/g' 1.txt &gt; 2.txt #将所有的bin替换成xxx,修改后的内容保存成2.txt</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux学习-05</title>
      <link href="2018/03/10/Linux%E5%AD%A6%E4%B9%A0-05/"/>
      <url>2018/03/10/Linux%E5%AD%A6%E4%B9%A0-05/</url>
      
        <content type="html"><![CDATA[<h2 id="进程树"><a href="#进程树" class="headerlink" title="进程树"></a>进程树</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@hadoop10 opt]# pstree</span><br><span class="line">init─┬─abrtd</span><br><span class="line">     ├─acpid</span><br><span class="line">     ├─anacron</span><br><span class="line">     ├─atd</span><br><span class="line">     ├─auditd───&#123;auditd&#125;</span><br><span class="line">     ├─automount───4*[&#123;automount&#125;]</span><br><span class="line">     ├─certmonger</span><br><span class="line">     ├─crond</span><br><span class="line">     ├─cupsd</span><br><span class="line">     ├─dbus-daemon───&#123;dbus-daemon&#125;</span><br><span class="line">     ├─hald─┬─hald-runner─┬─hald-addon-acpi</span><br><span class="line">     │      │             └─hald-addon-inpu</span><br><span class="line">     │      └─&#123;hald&#125;</span><br><span class="line">     ├─master─┬─pickup</span><br><span class="line">     │        └─qmgr</span><br><span class="line">     ├─mcelog</span><br><span class="line">     ├─6*[mingetty]</span><br><span class="line">     ├─rpc.statd</span><br><span class="line">     ├─rpcbind</span><br><span class="line">     ├─rsyslogd───3*[&#123;rsyslogd&#125;]</span><br><span class="line">     ├─sshd───sshd───bash───pstree</span><br><span class="line">     └─udevd───2*[udevd]</span><br></pre></td></tr></table></figure><h2 id="日期时间"><a href="#日期时间" class="headerlink" title="日期时间"></a>日期时间</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">date +%F  #获取年月日</span><br><span class="line">date -s "2020-08-04 10:08:20" # 设置时间</span><br><span class="line">hwclock -w #将系统时间写入硬件</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">配置时间同步服务器</span></span><br><span class="line">yum -y install ntp</span><br><span class="line">service ntpd start</span><br><span class="line">chkconfig ntpd on</span><br></pre></td></tr></table></figure><h2 id="kill"><a href="#kill" class="headerlink" title="kill"></a>kill</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kill pid # 杀死进程</span><br><span class="line">kill -9 pid #强制杀死进程</span><br><span class="line">kill %jobid #杀死后台运行的job</span><br></pre></td></tr></table></figure><h2 id="basename和dirname"><a href="#basename和dirname" class="headerlink" title="basename和dirname"></a>basename和dirname</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">basename: #返回路径中最后一级目录名或者文件名</span><br><span class="line">[root@hadoop10 jdk]# basename /opt/apps/jdk/src.zip </span><br><span class="line">src.zip</span><br><span class="line">[root@hadoop10 jdk]# basename /opt/apps/jdk/</span><br><span class="line">jdk</span><br><span class="line"></span><br><span class="line">dirname:# 除去basename就是dirname</span><br><span class="line"></span><br><span class="line">[root@hadoop10 jdk]# dirname /opt/apps/jdk/src.zip </span><br><span class="line">/opt/apps/jdk</span><br><span class="line">[root@hadoop10 jdk]# dirname ./src.zip               </span><br><span class="line">.</span><br><span class="line">[root@hadoop10 jdk]# dirname /opt/apps/jdk/</span><br><span class="line">/opt/apps</span><br><span class="line"></span><br><span class="line">一个文件或目录的完整路径就是 dirname+"/"+basename</span><br></pre></td></tr></table></figure><h2 id="上传下载"><a href="#上传下载" class="headerlink" title="上传下载"></a>上传下载</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@hadoop10 jdk]# yum -y install lrzsz</span><br><span class="line">rz：#上传</span><br><span class="line">sz：#下载</span><br></pre></td></tr></table></figure><h2 id="任务调度"><a href="#任务调度" class="headerlink" title="任务调度"></a>任务调度</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> .---------------- minute (0 - 59)</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> |  .------------- hour (0 - 23)</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> |  |  .---------- day of month (1 - 31)</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> |  |  |  |  |</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> *  *  *  *  * user-name <span class="built_in">command</span> to be executed</span></span><br><span class="line"></span><br><span class="line">日跟星期是或的关系</span><br><span class="line">* #表示每xxx.比如每分钟  每小时 每天</span><br><span class="line">*/5 *  *  *  *  #每5分钟</span><br><span class="line">1 2 2 * *  #每月的2号2:01分</span><br><span class="line">1 2 2 * 3  #每月的2号或者周三的2:01分</span><br><span class="line">1 * * * 2 #每周2的每小时的01分</span><br><span class="line">*/2 * 2 1 3 #每年的1月2号或者1月的每周三，每2分钟执行一次</span><br><span class="line">10 14 2 3 2 #每年的3月2日或者3月的每周2的14:10分</span><br><span class="line">1,7,9 2 2 * *  #每月的2号2:01分 2:07分 2:09分</span><br><span class="line">1-10 2 2 * *  #每月的2号2:01到10分</span><br><span class="line"></span><br><span class="line">[root@hadoop10 opt]# crontab --help</span><br><span class="line">usage:  crontab [-u user] file</span><br><span class="line">        crontab [-u user] [ -e | -l | -r ]</span><br><span class="line">                (default operation is replace, per 1003.2)</span><br><span class="line">        -e      (edit user's crontab)</span><br><span class="line">        -l      (list user's crontab)</span><br><span class="line">        -r      (delete user's crontab)</span><br><span class="line">        -i      (prompt before deleting user's crontab)</span><br><span class="line">        -s      (selinux context)</span><br><span class="line">        </span><br><span class="line">注意：</span><br><span class="line"> 1、每个用户的定时任务都存储在 /var/spool/cron/用户名 中</span><br><span class="line"> 2、root 可以给其他用户指定定时任务</span><br><span class="line">    crontab -u bigdata yy.sh</span><br><span class="line"> 3、root 可以查看和删除其他用户的定时任务</span><br><span class="line"> [root@hadoop10 cron]# crontab -l -u bigdata</span><br><span class="line">* * * * * date</span><br><span class="line"> [root@hadoop10 cron]# crontab -r -u bigdata</span><br><span class="line"> 4、如果执行的命令没有重定向输出，信息是发送到邮件</span><br></pre></td></tr></table></figure><h2 id="克隆虚拟机"><a href="#克隆虚拟机" class="headerlink" title="克隆虚拟机"></a>克隆虚拟机</h2><p>hadoop11是用hadoop10克隆得到的。那么hadoop11和hadoop10是一模一样的，所以我们需要做以下的更改：</p><p>1、改主机名</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/sysconfig/network</span><br><span class="line">HOSTNAME=hadoop11</span><br></pre></td></tr></table></figure><p>2、改网卡的物理地址</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">方式一：</span></span><br><span class="line">rm -rf /etc/udev/rules.d/70-persistent-net.rules</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">方式二：</span></span><br><span class="line">vim /etc/udev/rules.d/70-persistent-net.rules</span><br><span class="line">1、删除 eth0 这一行</span><br><span class="line">2、将eth1 改称eth0</span><br></pre></td></tr></table></figure><p>3、改IP</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/sysconfig/network-scripts/ifcfg-eth0</span><br><span class="line">1、删除物理地址 和 UUID</span><br><span class="line">2、更改ip</span><br></pre></td></tr></table></figure><p>4、重启系统</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure><h2 id="scp和rsync"><a href="#scp和rsync" class="headerlink" title="scp和rsync"></a>scp和rsync</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scp 命令用于 Linux 之间复制文件和目录。</span><br><span class="line">scp 是 secure copy 的缩写, scp 是 linux 系统下基于 ssh 登陆进行安全的远程文件拷贝命令。</span><br><span class="line">scp 是加密的</span><br><span class="line"></span><br><span class="line">[root@hadoop10 opt]# vim /etc/hosts</span><br><span class="line">192.168.10.10 hadoop10</span><br><span class="line">192.168.10.11 hadoop11</span><br><span class="line">192.168.10.12 hadoop12</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">在hadoop10节点上远程登录到hadoop11节点</span></span><br><span class="line">ssh [user@]hostname</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">免密登录</span></span><br><span class="line">ssh-keygen # 生成公钥和私钥</span><br><span class="line"> 执行命令后会在用户家目录下生成.ssh/id_rsa 私钥  id_rsa.pub公钥</span><br><span class="line">ssh-copy-id user@主机名 #发送公钥给对应的用户主机</span><br><span class="line"> 执行命令后会在用户家目录下生成.ssh/authorized_keys</span><br><span class="line"> </span><br><span class="line">ssh登录成功后会在用户家目录下生成.ssh/known_hosts 信任主机列表</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">scp 复制目录  -r 递归</span></span><br><span class="line">[root@hadoop10 opt]# scp -r a root@hadoop11:/opt/</span><br><span class="line"></span><br><span class="line">注意：scp不能拷贝软连接</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 可以拷贝任何文件级目录</span></span><br><span class="line">[root@hadoop10 opt]# rsync -l aa root@hadoop11:/opt/</span><br></pre></td></tr></table></figure><h2 id="对称加密"><a href="#对称加密" class="headerlink" title="对称加密"></a>对称加密</h2><p>   加密和解密是同一个密钥</p><h2 id="非对称加密"><a href="#非对称加密" class="headerlink" title="非对称加密"></a>非对称加密</h2><p>非对称加密就是有两个密钥，一个公钥，一个私钥</p><p>公钥加密的内容只能用私钥解密</p><p>私钥加密的内容只能用公钥解密</p><p>RSA就是一种非对称加密</p><h2 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h2><h3 id="什么是shell？shell脚本能干什么？"><a href="#什么是shell？shell脚本能干什么？" class="headerlink" title="什么是shell？shell脚本能干什么？"></a>什么是shell？shell脚本能干什么？</h3><p><img src="https://i.loli.net/2020/11/10/Q3Sp1PbkM75aues.png" alt="shell.png"></p><p>我们之前学习的命令其实都是shell命令，shell脚本就是学习入将零散的shell命令通过流程控制等语句组合在一起，完成某些功能。</p><p>编写shell脚本主要的作用：1、解决自动化问题    2、解决批量问题</p><p>什么叫脚本：直接运行的。不需要编译的。</p><h3 id="标准输入、标准输出、标准错误输出"><a href="#标准输入、标准输出、标准错误输出" class="headerlink" title="标准输入、标准输出、标准错误输出"></a>标准输入、标准输出、标准错误输出</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/proc/进程号/fd</span><br><span class="line">  0：标准输入</span><br><span class="line">  1：标准输出</span><br><span class="line">  2：标准错误输出</span><br><span class="line"> 0 1 2 表示的是文件描述符（file descriptor）</span><br></pre></td></tr></table></figure><h3 id="默认输入输出"><a href="#默认输入输出" class="headerlink" title="默认输入输出"></a>默认输入输出</h3><p><img src="https://i.loli.net/2020/11/10/AY2sO7cKhtHWQNB.png" alt="1.png"></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@hadoop10 opt]# cat 0&lt; 1.txt #将cat的标准输入重定向为1.txt</span><br><span class="line">111</span><br><span class="line">[root@hadoop10 opt]# cat 1.txt #cat 后面的文件参数是1.txt</span><br><span class="line">111</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/11/10/HdSmJ9knMyE7i3e.png" alt="2.png"></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@hadoop10 opt]# echo "java" 1&gt; 2.txt</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/11/10/NpG5CeOmk8zHVZx.png" alt="3.png"></p><p>标准输出和错误输出重定向</p><p><img src="https://i.loli.net/2020/11/10/dG4QfeolEyHrkMu.png" alt="4.png"></p><p>混合输出</p><p><img src="https://i.loli.net/2020/11/10/rn9t7b2ufIH1RTV.png" alt="5.png"></p><p><img src="https://i.loli.net/2020/11/10/4FKzLsb8YxZOVDc.png" alt="6.png"></p><p>复制文件：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@hadoop10 opt]# cat &lt; 1.txt &gt; 111.txt</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@hadoop10 opt]# cat &lt;&lt;EOF &gt;xxx.txt</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> ni hao a </span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> wo shuo hua </span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> hao hao xuexi </span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> -bash: warning: here-document at line 94 delimited by end-of-file (wanted `EOF<span class="string">')</span></span></span><br><span class="line">ctrl+d 表示EOF</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oracle安装和卸载</title>
      <link href="2018/03/10/Oracle%E5%AE%89%E8%A3%85%E5%92%8C%E5%8D%B8%E8%BD%BD/"/>
      <url>2018/03/10/Oracle%E5%AE%89%E8%A3%85%E5%92%8C%E5%8D%B8%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<h1 id="Oracle安装和卸载"><a href="#Oracle安装和卸载" class="headerlink" title="Oracle安装和卸载"></a>Oracle安装和卸载</h1><h2 id="Oracle版本说明"><a href="#Oracle版本说明" class="headerlink" title="Oracle版本说明"></a>Oracle版本说明</h2><p>Oracle 9i<br>Oracle 10g<br>Oracle 11g<br>Oracle 12c</p><p>i：i 代表 Internet。8i 版本开启对 Internet 的支持。所以，在版本号之后，添加了标识 i。<br>g：g 代表 Grid 网格。10g 加入了网格计算的功能，因此版本号之后的标识使用了字母g。<br>c：c 代表云(cloud)计算设计。12c 版本表示对云计算的支持。</p><h2 id="Oracle安装"><a href="#Oracle安装" class="headerlink" title="Oracle安装"></a>Oracle安装</h2><ol><li><p>两个.zip文件下载完成后，解压两个压缩包到同一目录（默认是“database”）。</p></li><li><p>双击解压目录下的setup.exe安装oracle（注意：安装文件路径不要使用特殊字符、空格、汉字等）。执行安装程序，会出现一个命令行窗口。</p></li><li><p>命令行窗口小时候，如果出现以下界面：</p><p><img src="https://i.loli.net/2019/12/16/pRQrNP8syHDjvBS.jpg" alt="0.jpg"></p><p>出现这个问题是因为配置文件中配置了对应的系统，所以需要添加自己对应的系统。<br>首先打开解压后的database文件夹，找到stage文件夹，再找到cvu文件夹，进去后打开cvu_prereq.xml文件，在该文件中的CERTIFIED_SYSTEMS标签中添加如下内容：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">OPERATING_SYSTEM</span> <span class="attr">RELEASE</span>=<span class="string">"6.2"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">VERSION</span> <span class="attr">VALUE</span>=<span class="string">"3"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ARCHITECTURE</span> <span class="attr">VALUE</span>=<span class="string">"64-bit"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">NAME</span> <span class="attr">VALUE</span>=<span class="string">"Windows 10"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ENV_VAR_LIST</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ENV_VAR</span> <span class="attr">NAME</span>=<span class="string">"PATH"</span> <span class="attr">MAX_LENGTH</span>=<span class="string">"1023"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ENV_VAR_LIST</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">OPERATING_SYSTEM</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改完成后保存退出，再次点击setup.exe运行就不会出现这个错误了。</p></li><li><p>开始安装<br><img src="https://i.loli.net/2019/12/16/jza9GdfpF6BknMu.jpg" alt="1.jpg"></p><p><img src="https://i.loli.net/2019/12/16/KOXfQHAoj5iRZsm.jpg" alt="2.jpg"></p></li></ol><p>​        <img src="https://i.loli.net/2019/12/16/bMKkYPWxU69hHDn.jpg" alt="3.jpg"></p><p><img src="https://i.loli.net/2019/12/16/i5CFNlHKczEAQRg.jpg" alt="4.jpg"></p><p><img src="https://i.loli.net/2019/12/16/NKAMr5Z3ByLgVzD.jpg" alt="4-1.jpg"></p><p><img src="https://i.loli.net/2019/12/16/CfMtenBqkVXU4vS.jpg" alt="4-2.jpg"></p><p><img src="https://i.loli.net/2019/12/16/EFTkZA6sQaw4mqj.jpg" alt="5.jpg"></p><p><img src="https://i.loli.net/2019/12/16/cvMHVqlZw9uf5rg.jpg" alt="6.jpg"></p><p><img src="https://i.loli.net/2019/12/16/YBj39618g52PFGp.jpg" alt="7.jpg"></p><p><img src="https://i.loli.net/2019/12/16/wqvpmD3tkcoBx6S.jpg" alt="7-1.jpg"></p><p><img src="https://i.loli.net/2019/12/16/IjraQJVFX5HZuSk.jpg" alt="7-2.jpg"></p><p><img src="https://i.loli.net/2019/12/16/1MQrmJ4n6Wy2D9d.jpg" alt="7-3.jpg"></p><p><img src="https://i.loli.net/2019/12/16/RMyVxrPzDUNwQJE.jpg" alt="7-4.jpg"></p><p><img src="https://i.loli.net/2019/12/16/NaidTWpsxj5PLol.jpg" alt="8.jpg"></p><h2 id="Oracle卸载"><a href="#Oracle卸载" class="headerlink" title="Oracle卸载"></a>Oracle卸载</h2><ol><li><p>停止使用 Oracle 的服务</p><p>进入计算机管理，在服务中，找到 oracle 开头的所有服务，右击选择停止。</p></li><li><p>运行卸载 Oracle 数据库程</p><p>在开始菜单中找到 Oracle 安装产品，点击运行 Oracle 自带的卸载程序 Universal Installer工具卸载。</p></li><li><p>删除使用 Oracle 的服务</p><p>开始菜单中，找到 Universal Installer，运行 Oracle Universal Installer，单击卸载产品，在产品清单窗口中，单击全部展开，除了 OraDb11g_home1 外，勾选其他项目，单击删除，根据软件提示单击下一步最终完成卸载。</p></li><li><p>删除注册表中 Oracle 相关项</p><ul><li><p>在 命 令 窗 口 ， 输 入 regedit ， 打 开 注 册 表 ， 依 次 展 开<code>HKEY_LOCAL_MACHINE\SOFTWARE</code>，找到 oracle删除</p></li><li><p>依次展开 <code>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services</code> 中，删除所有oracle 开头的项</p></li><li><p>依 次 展 开<code>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Eventlog\Application</code>，删除<br>所有 oracle 开头的项</p></li><li>扩展删除（以下不是必须的注册表删除项），如果安装不成功也可以把这些删除了<ul><li>在 <code>HKEY_CLASSES_ROOT</code>，删除以 Ora、Oracle、Orcl 或 EnumOra 为前缀的键</li><li>删 除<br><code>HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\MenuOrder\StartMenu\Programs</code> 中所有以 oracle 开头的键</li><li>删 除 <code>HKEY_LOCAL_MACHINE\SOFTWARE\ODBC\ODBCINST.INI</code> 中 除 <code>Microsoft ODBC for Oracle</code>注册表键以外的所有含有 Oracle 的键</li></ul></li></ul></li><li><p>删除 Oracle 环境变量</p><p>右键点击我的电脑—&gt;属性—&gt;高级—&gt;环境变量,删除环境变量 ORACLE_HOME、TNS_ADMIN 等环境变量，删除 PATH 中等环境变量有关 Oracle 的设定的路径信息</p></li><li><p>删除“开始”菜单中 Oracle 目录</p><p>打开资源管理器，在地址栏中输入“%userprofile%\「开始」菜单\程序”回车，删除安装的 Oracle 目录。然后再到地址栏中输入“%allusersprofile%\「开始」菜单\程序”回车，删除安装的 Oracle 目录</p></li><li><p>重新启动计算机</p></li><li><p>删除 Program Files\Oracle 目录</p><p>如果 Program Files\Oracle 目录存在，则删除 Program Files\Oracle 目录。</p></li><li><p>删除 Oracle 安装目录</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux学习-04</title>
      <link href="2018/03/09/Linux%E5%AD%A6%E4%B9%A0-04/"/>
      <url>2018/03/09/Linux%E5%AD%A6%E4%B9%A0-04/</url>
      
        <content type="html"><![CDATA[<h2 id="yum源"><a href="#yum源" class="headerlink" title="yum源"></a>yum源</h2><p>rpm需要手动管理依赖。yum自动刚我们管理了依赖。</p><p>阿里云镜像地址：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https://mirrors.aliyun.com</span><br></pre></td></tr></table></figure><h3 id="显示使用的yum源"><a href="#显示使用的yum源" class="headerlink" title="显示使用的yum源"></a>显示使用的yum源</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@hadoop10 ~]# yum repolist</span><br><span class="line">Loaded plugins: fastestmirror, security</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line"> * base: mirrors.aliyun.com</span><br><span class="line"> * extras: mirrors.aliyun.com</span><br><span class="line"> * updates: mirrors.aliyun.com</span><br><span class="line">repo id              repo name     status</span><br><span class="line">base                 CentOS-6 - Base - mirrors.aliyun.com  6,713</span><br><span class="line">extras               CentOS-6 - Extras - mirrors.aliyun.com     47</span><br><span class="line">updates              CentOS-6 - Updates - mirrors.aliyun.com    1,068</span><br><span class="line">repolist: 7,828</span><br></pre></td></tr></table></figure><h3 id="EPEL"><a href="#EPEL" class="headerlink" title="EPEL"></a>EPEL</h3><p> 自行使用阿里云镜像配置</p><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum repolist #查看yum源</span><br><span class="line">yum list  #显示列出yum可以安装和已安装的package。 只根据名称查找</span><br><span class="line">yum search '查找的内容' # 会根据名称和描述信息查找</span><br><span class="line">yum list installed #显示已安装的package</span><br><span class="line">yum -y remove 程序名称 #卸载程序</span><br><span class="line">yum -y install 程序 #安装程序</span><br><span class="line">yum -y reinstall 程序 # 重新安装程序</span><br><span class="line">yum provides httpd #查看httpd是由哪一个安装包安装的</span><br><span class="line">yum history #查看yum操作记录</span><br><span class="line">yum history info 序号 #查看具体某个操作序号的信息</span><br><span class="line">yum history undo 序号 #撤销序号对应的操作</span><br><span class="line">yum update 程序 #更新</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#使用yum安装本地rpm</span></span></span><br><span class="line">yum -y install jdk-8u131-linux-x64.rpm </span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#yum通过url地址安装rpm</span></span></span><br><span class="line">yum -y install http://xxxx.rpm</span><br></pre></td></tr></table></figure><h2 id="切换用户"><a href="#切换用户" class="headerlink" title="切换用户"></a>切换用户</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">su 用户  #切换用户。切换用户后还是在原来的路径</span><br><span class="line">su - 用户 #切换用户。切换用户后进入用户的home目录下</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/11/10/SCHTxvy48k9XK67.png" alt="image-20200803150917907.png"></p><p>删除用户家目录下的.bash*文件，就会出现如下情况：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@hadoop10 ~]# su - bigdata</span><br><span class="line">-bash-4.1$ </span><br><span class="line">-bash-4.1$</span><br></pre></td></tr></table></figure><p>解决方案：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-bash-4.1$ cd /etc/skel/</span><br><span class="line">-bash-4.1$ ll -a</span><br><span class="line">total 28</span><br><span class="line">drwxr-xr-x.  2 root root  4096 Jul 29 19:40 .</span><br><span class="line">drwxr-xr-x. 94 root root 12288 Aug  3 23:24 ..</span><br><span class="line">-rw-r--r--.  1 root root    18 Jul 18  2013 .bash_logout</span><br><span class="line">-rw-r--r--.  1 root root   176 Jul 18  2013 .bash_profile</span><br><span class="line">-rw-r--r--.  1 root root   124 Jul 18  2013 .bashrc</span><br><span class="line"></span><br><span class="line">-bash-4.1$ cp .bash* /home/bigdata/</span><br><span class="line"></span><br><span class="line">-bash-4.1$ cd /home/bigdata/</span><br><span class="line">-bash-4.1$ ll -a</span><br><span class="line">total 32</span><br><span class="line">drwx------. 3 bigdata bigdata 4096 Aug  3 23:53 .</span><br><span class="line">drwxr-xr-x. 9 root    root    4096 Aug  3 22:35 ..</span><br><span class="line">-rw-------. 1 bigdata bigdata   35 Aug  3 23:50 .bash_history</span><br><span class="line">-rw-r--r--. 1 bigdata bigdata   18 Aug  3 23:53 .bash_logout</span><br><span class="line">-rw-r--r--. 1 bigdata bigdata  176 Aug  3 23:53 .bash_profile</span><br><span class="line">-rw-r--r--. 1 bigdata bigdata  124 Aug  3 23:53 .bashrc</span><br><span class="line">drwxrwxr-x. 2 bigdata bigdata 4096 Aug  3 22:49 .oracle_jre_usage</span><br><span class="line">-rw-------. 1 bigdata bigdata  599 Aug  3 23:06 .viminfo</span><br></pre></td></tr></table></figure><h2 id="前台和后台执行"><a href="#前台和后台执行" class="headerlink" title="前台和后台执行"></a>前台和后台执行</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ctrl+c # 终止执行前台命令</span><br><span class="line">ctrl+z # 暂停在后台</span><br><span class="line"></span><br><span class="line">jobs #查看后台运行的job</span><br><span class="line"></span><br><span class="line">fg:前台执行</span><br><span class="line">   fg  jobid #将后台程序运行到前台</span><br><span class="line">   </span><br><span class="line">bg:后台执行</span><br><span class="line">   bg jobid #将后台暂停程序在后台运行起来</span><br><span class="line"></span><br><span class="line">命令 &amp; #表示将程序运行在后台</span><br><span class="line">[root@hadoop10 opt]# tail -f 1.txt &amp;</span><br><span class="line">[1] 4159</span><br></pre></td></tr></table></figure><h2 id="用户提权"><a href="#用户提权" class="headerlink" title="用户提权"></a>用户提权</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">方式一：</span><br><span class="line">vim /etc/sudoers</span><br><span class="line"><span class="meta">%</span><span class="bash">wheel  ALL=(ALL)       ALL</span></span><br><span class="line"></span><br><span class="line">方式二：</span><br><span class="line">vim /etc/sudoers</span><br><span class="line">bigdata ALL=(ALL)       ALL</span><br><span class="line"></span><br><span class="line">sudo 执行管理员的命令</span><br></pre></td></tr></table></figure><h2 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看ip地址</span></span><br><span class="line">ifconfig</span><br><span class="line">ip a </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置ip地址</span></span><br><span class="line">可视化方式：setup</span><br><span class="line">命令方式：</span><br><span class="line">vim /etc/sysconfig/network-scripts/ifcfg-eth0</span><br><span class="line">    DEVICE=eth0  #网卡名称</span><br><span class="line">    HWADDR=00:0c:29:aa:a3:f3 #网卡的物理地址</span><br><span class="line">    TYPE=Ethernet #网卡的网络类型</span><br><span class="line">    UUID=54302fd2-862e-4608-bdb6-e937fab26f81</span><br><span class="line">    ONBOOT=yes # 系统启动的时候自动连接网络</span><br><span class="line">    BOOTPROTO=none # 静态IP</span><br><span class="line">    IPADDR=192.168.10.10 # ip地址</span><br><span class="line">    NETMASK=255.255.255.0 #子网掩码</span><br><span class="line">    GATEWAY=192.168.10.2 # 网关</span><br><span class="line">    DNS1=192.168.10.2 #DNS服务器地址</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"> 网卡对应的文件信息</span></span><br><span class="line">/etc/udev/rules.d/70-persistent-net.rules</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 服务相关的命令</span></span><br><span class="line">service 服务名 start/stop/restart/status  </span><br><span class="line"></span><br><span class="line">网络服务：network</span><br><span class="line">防火墙服务：iptables</span><br><span class="line">  service iptables stop</span><br><span class="line">  </span><br><span class="line">以上操作服务的命令，关机就无效了</span><br><span class="line"></span><br><span class="line">永久生效：（开机启动）</span><br><span class="line">chkconfig 服务名 on/off</span><br><span class="line">   重启才生效</span><br><span class="line"></span><br><span class="line">所以一般需要两个一起使用：</span><br><span class="line">先用service 再用 chkconfig</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">查看软件对应的网络端口</span></span><br><span class="line">[root@hadoop10 ~]# netstat -nltp | grep httpd</span><br><span class="line">[root@hadoop10 ~]# netstat -nltp | grep 5275 # 5275是进程号</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">查看进程</span></span><br><span class="line">ps -ef | grep 程序名 #查看进程</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">Java程序查看进程名</span></span><br><span class="line">jps #jps不是Linux命令，是jdk自带的命令</span><br></pre></td></tr></table></figure><h2 id="关机-重启"><a href="#关机-重启" class="headerlink" title="关机/重启"></a>关机/重启</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">关机：</span><br><span class="line"> poweroff</span><br><span class="line"> halt</span><br><span class="line"> shutdown -h now #立刻关机</span><br><span class="line"> init 0</span><br><span class="line"> </span><br><span class="line">重启：</span><br><span class="line">  reboot</span><br><span class="line">  init 6</span><br><span class="line">  </span><br><span class="line"><span class="meta">#</span><span class="bash">Linux的初始化级别</span></span><br><span class="line">cat /etc/inittab</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Default runlevel. The runlevels used are:</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   0 - halt (Do NOT <span class="built_in">set</span> initdefault to this)</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   1 - Single user mode</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   2 - Multiuser, without NFS (The same as 3, <span class="keyword">if</span> you <span class="keyword">do</span> not have networking)</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   3 - Full multiuser mode</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   4 - unused</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   5 - X11</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   6 - reboot (Do NOT <span class="built_in">set</span> initdefault to this)</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> </span></span><br><span class="line">id:3:initdefault:</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux学习-03</title>
      <link href="2018/03/09/Linux%E5%AD%A6%E4%B9%A0-03/"/>
      <url>2018/03/09/Linux%E5%AD%A6%E4%B9%A0-03/</url>
      
        <content type="html"><![CDATA[<h2 id="查询命令"><a href="#查询命令" class="headerlink" title="查询命令"></a>查询命令</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">which 命令   #查询的命令要求是配置了环境变量的。</span><br><span class="line">whereis  命令  #查询命令、源码文件、帮助手册</span><br></pre></td></tr></table></figure><h2 id="查询文件"><a href="#查询文件" class="headerlink" title="查询文件"></a>查询文件</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">locate 文件名  #locate本地维护了一个数据库，查询的时候根据索引进行文件查找</span><br><span class="line">updatedb  #更新数据库</span><br><span class="line">locate的数据库每天更新一次，为了确保能够准确的查询出文件，建议查询前先更新数据库</span><br><span class="line">----------------------------------</span><br><span class="line">find 根据目录的层次结构进行搜索</span><br><span class="line">find / -name java.txt  #从/开始查找名字是java.txt的文件</span><br><span class="line">find /opt/ -size +100M #从/opt目录中查找大小大于100M的文件</span><br><span class="line">find / -user hadoop #从/开始查找属于hadoop用户的文件</span><br><span class="line">find / -atime -5 #从/开始查找访问时间是5天前的文件</span><br></pre></td></tr></table></figure><h2 id="过滤"><a href="#过滤" class="headerlink" title="过滤"></a>过滤</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">grep [OPTION]... PATTERN [FILE]...</span><br><span class="line">在遇到pattern的地方，*就是正则符号 </span><br><span class="line">---------------------------------------------</span><br><span class="line">-n: #过滤后的内容显示行号</span><br><span class="line">[root@hadoop10 opt]# grep -n 'hello' word.txt </span><br><span class="line">1:hello java</span><br><span class="line"></span><br><span class="line">-o: #仅显示匹配到的内容</span><br><span class="line">[root@hadoop10 opt]# grep -o 'hello' word.txt  </span><br><span class="line">hello</span><br><span class="line"></span><br><span class="line">-i #忽略大小写</span><br><span class="line">[root@hadoop10 opt]# grep -io 'HELLO' word.txt </span><br><span class="line">hello</span><br><span class="line"></span><br><span class="line">-v # 显示未匹配到的内容</span><br><span class="line">[root@hadoop10 opt]# grep -iv 'HELLO' word.txt  </span><br><span class="line">hadoop linux</span><br><span class="line"></span><br><span class="line">grep -E  ===&gt; egrep</span><br></pre></td></tr></table></figure><h2 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">语法：</span><br><span class="line">  命令1 | 命令2 # 命令1的输出是命令2的输入</span><br><span class="line"></span><br><span class="line">[root@hadoop10 opt]# ll | grep '.*\.txt'</span><br><span class="line">.* #表示零个或多个任意字符</span><br><span class="line">\. #表示转义</span><br><span class="line"></span><br><span class="line">[root@hadoop10 opt]# ll | grep '.\+txt'  </span><br><span class="line">\+ #表示将实体符号+转义成正则的数量词</span><br><span class="line"></span><br><span class="line">在遇到pattern的地方，*就是正则符号 </span><br><span class="line"></span><br><span class="line">注意：</span><br><span class="line">[root@hadoop10 opt]# rm -rf *.txt</span><br><span class="line">此时的*就是通配符</span><br><span class="line"></span><br><span class="line">echo 123456 | passwd --stdin java</span><br></pre></td></tr></table></figure><h2 id="追加和重定向-覆盖"><a href="#追加和重定向-覆盖" class="headerlink" title="追加和重定向(覆盖)"></a>追加和重定向(覆盖)</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt; 追加</span></span><br><span class="line">[root@hadoop10 opt]# echo "hello123" &gt;&gt; java.txt</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">重定向(覆盖)</span></span><br><span class="line"></span><br><span class="line">[root@hadoop10 opt]# cat java.txt </span><br><span class="line">java123</span><br><span class="line">hello123</span><br><span class="line">[root@hadoop10 opt]# echo "ssssb" &gt; java.txt </span><br><span class="line">[root@hadoop10 opt]# cat java.txt </span><br><span class="line">ssssb</span><br></pre></td></tr></table></figure><h2 id="文件的权限UGO"><a href="#文件的权限UGO" class="headerlink" title="文件的权限UGO"></a>文件的权限UGO</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"> rwx  rwx rwx</span><br><span class="line">所属用户的权限   所属用户组的权限     其他用户的权限</span><br><span class="line"></span><br><span class="line">修改文件的权限：</span><br><span class="line">u: user</span><br><span class="line">g: group</span><br><span class="line">o: other</span><br><span class="line">a: all</span><br><span class="line">+ 增加权限</span><br><span class="line">- 取消权限</span><br><span class="line">chmod u+x  文件/目录</span><br><span class="line"></span><br><span class="line">文件权限的数字表示法：</span><br><span class="line">rwx</span><br><span class="line">000   -- 0</span><br><span class="line">111   -- 7</span><br><span class="line">4 2 1 </span><br><span class="line"></span><br><span class="line">chmod 764 11.txt</span><br><span class="line"></span><br><span class="line">注意：---权限是针对是否可以操作文件/目录的内容而言的</span><br><span class="line">针对文件：</span><br><span class="line">  r: 表示可以查看文件的内容</span><br><span class="line">  w: 表示可以编辑文件内容</span><br><span class="line">  x: 文件可以被执行。一般用于脚本</span><br><span class="line"> </span><br><span class="line"> 针对文件夹：</span><br><span class="line">  r: 表示可以查看目录下的内容。比如可以使用ls</span><br><span class="line">  w：表示可以在目录中创建文件及文件夹</span><br><span class="line">  x: 表示的可以进入该目录</span><br></pre></td></tr></table></figure><h2 id="更改文件的用户及用户组"><a href="#更改文件的用户及用户组" class="headerlink" title="更改文件的用户及用户组"></a>更改文件的用户及用户组</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chown 用户:用户组 文件  #修改文件的所属用户及组</span><br></pre></td></tr></table></figure><h2 id="打包和压缩"><a href="#打包和压缩" class="headerlink" title="打包和压缩"></a>打包和压缩</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">打包：</span><br><span class="line">   tar -cvf xx.tar 1.txt 2.txt</span><br><span class="line">   c: create</span><br><span class="line">   v: 显示打包过程信息</span><br><span class="line">   f: 文件</span><br><span class="line"> </span><br><span class="line">解包:</span><br><span class="line">  tar -xvf xx.tar</span><br><span class="line">  x: 解包</span><br><span class="line">  </span><br><span class="line">---------------------------------------</span><br><span class="line">压缩：</span><br><span class="line">   zip aa.zip xx.tar</span><br><span class="line">解压：</span><br><span class="line">  unzip aa.zip</span><br><span class="line">  </span><br><span class="line"> bzip2 文件</span><br><span class="line"> gzip 文件</span><br><span class="line"> gunzip xx.tar.gz  解压</span><br><span class="line"> </span><br><span class="line">打包并压缩：</span><br><span class="line"> [root@hadoop10 data]# tar -zcvf xx.tar.gz 1.txt 2.txt 3.txt </span><br><span class="line">解压并解包：</span><br><span class="line">[root@hadoop10 data]# tar -zxvf xx.tar.gz </span><br><span class="line"></span><br><span class="line">tar -zxvf jdk-8u144-linux-x64.tar.gz -C apps/</span><br><span class="line">-C:指定解压到哪里</span><br></pre></td></tr></table></figure><h2 id="软连接"><a href="#软连接" class="headerlink" title="软连接"></a>软连接</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@hadoop10 apps]# ln -s jdk1.8.0_144/ jdk</span><br><span class="line">jdk -&gt; jdk1.8.0_144/</span><br></pre></td></tr></table></figure><h2 id="rpm包的安装"><a href="#rpm包的安装" class="headerlink" title="rpm包的安装"></a>rpm包的安装</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">安装</span></span><br><span class="line">    rpm -ivh xx.rpm</span><br><span class="line">    -i:install 安装</span><br><span class="line">    -v:显示安装过程</span><br><span class="line">    -h:显示安装进度</span><br><span class="line">    </span><br><span class="line"><span class="meta">#</span><span class="bash">查询安装程序的package信息</span></span><br><span class="line">    -q  --query</span><br><span class="line">-f, --file              query/verify package(s) owning file</span><br><span class="line"></span><br><span class="line">[root@hadoop10 bin]# rpm -qf /usr/java</span><br><span class="line">    filesystem-2.4.30-3.el6.x86_64</span><br><span class="line">    jdk1.8.0_131-1.8.0_131-fcs.x86_64</span><br><span class="line">   </span><br><span class="line"><span class="meta">#</span><span class="bash">卸载</span></span><br><span class="line">-e, --erase=&lt;package&gt;+           erase (uninstall) package</span><br><span class="line">[root@hadoop10 bin]# rpm -ev  jdk1.8.0_131-1.8.0_131-fcs.x86_64</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查询所有安装的package信息</span></span><br><span class="line">[root@hadoop10 bin]# rpm -qa | grep -i mysql</span><br><span class="line"> mysql-libs-5.1.71-1.el6.x86_64</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"> 更改安装目录</span></span><br><span class="line">[root@hadoop10 opt]# rpm -ivh --prefix=/opt/java/ jdk-8u131-linux-x64.rpm</span><br><span class="line"></span><br><span class="line">rpm在安装或卸载的时候如果有其他的依赖包，需要先卸载依赖或者添加一个选项 --nodeps</span><br></pre></td></tr></table></figure><h2 id="yum"><a href="#yum" class="headerlink" title="yum"></a>yum</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">使用yum的前提是可以上网</span><br><span class="line">rpm相当于下载到本地的jar</span><br><span class="line">yum相当于maven</span><br><span class="line">yum 也提供了一个库，里面存放了rpm</span><br><span class="line">如果不能上外网，是可以搭建本地yum源。</span><br></pre></td></tr></table></figure><h3 id="更改yum源"><a href="#更改yum源" class="headerlink" title="更改yum源"></a>更改yum源</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1、进入到/etc/yum.repos.d/目录下，备份之前的CentOS-Base.repo地址。</span><br><span class="line">cd /etc/yum.repos.d/</span><br><span class="line">mv CentOS-Base.repo CentOS-Base.repo.bak</span><br><span class="line">2、下载阿里云yum源</span><br><span class="line">wget -O CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-6.repo</span><br><span class="line"></span><br><span class="line">3、将服务器上的软件包信息缓存到本地,以提高搜索安装软件的速度</span><br><span class="line">yum makecache</span><br></pre></td></tr></table></figure><h3 id="yum-命令"><a href="#yum-命令" class="headerlink" title="yum 命令"></a>yum 命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum list: 列出yum中可以安装的package</span><br><span class="line">yum list installed:查询已安装的程序</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux学习-02</title>
      <link href="2018/03/08/Linux%E5%AD%A6%E4%B9%A0-02/"/>
      <url>2018/03/08/Linux%E5%AD%A6%E4%B9%A0-02/</url>
      
        <content type="html"><![CDATA[<h2 id="Vim编辑器"><a href="#Vim编辑器" class="headerlink" title="Vim编辑器"></a>Vim编辑器</h2><p>vim 是 vi 的增强版</p><p>ctrl+s 锁定shell窗口</p><p>ctrl+q 解锁shell窗口</p><p><img src="https://i.loli.net/2020/11/10/EtaezGNJrdy5x6f.png" alt="1604990135712.png"></p><h3 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">d: 删除  y：复制</span><br><span class="line">dd  删除当前行 -- 剪切</span><br><span class="line">dG 从当前行删除到行尾</span><br><span class="line">dgg  从当前行删除到行首</span><br><span class="line">ndd  从当前光标行开始删除n行</span><br><span class="line">D    从光标开始删除到行尾</span><br><span class="line">d0   从光标开始删除到行首</span><br><span class="line">yy  复制当前行</span><br><span class="line">nyy  复制n行</span><br><span class="line">p  粘贴到光标位置</span><br><span class="line">u  (undo) 撤销</span><br><span class="line">ctrl+r  撤销还原</span><br><span class="line">gg  回到行首</span><br><span class="line">ngg 回到第n行</span><br><span class="line">shift + g  回到行尾</span><br><span class="line">ygg   从当前行复制到行首</span><br><span class="line">yG    从当前行复制到行尾</span><br><span class="line">0 或者 ^      回到当前行的开始位置</span><br><span class="line"><span class="meta">$</span><span class="bash">     回到当前行的尾部位置</span></span><br><span class="line">/搜索的文字   n 表示下一个  N 向上查找</span><br><span class="line">/^字符串    查找以什么字符串开头的</span><br><span class="line">/字符串$    查找以什么字符串结尾的</span><br><span class="line">   如果替换的时候需要忽略大小写，需要到末行模式设置set noic</span><br><span class="line">r  替换单个字符</span><br><span class="line">shift+r  进入替换模式  替换光标后的多个字符</span><br><span class="line">x 从光标位置开始逐一删除后面的内容</span><br><span class="line">shift+x 从光标位置开始逐一删除前面的内容</span><br><span class="line">替换模式 ---&gt; esc ---&gt; 命令模式</span><br></pre></td></tr></table></figure><h3 id="末行模式（底部扩展命令模式）"><a href="#末行模式（底部扩展命令模式）" class="headerlink" title="末行模式（底部扩展命令模式）"></a>末行模式（底部扩展命令模式）</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">替换语法：</span><br><span class="line">:[范围] s/old/new/[选项]</span><br><span class="line">-------------------------------</span><br><span class="line">:s/root/abc/  将光标所在行的第一个root换成abc</span><br><span class="line">:2,2 s/root/abc/   将第二行的第一个root换成abc   </span><br><span class="line">:1,2 s/root/abc/g  将第一行到二行的所有的root换成abc   </span><br><span class="line">:% s/root/abc/g    将所有行的所有root换成abc</span><br><span class="line">:% s/.$//     将所有行的最后一个字符替换成空</span><br><span class="line">备注：上面的/是可以用其他的符号替换的。都遇见匹配的内容有/的时候就可以用其他符号</span><br><span class="line">比如：</span><br><span class="line">:s #/dev/null#abc#   将光标所在行的第一个/dev/null替换成abc</span><br><span class="line">:% s/.*/&amp;#/   在所有行的末尾添加#</span><br><span class="line">.* 表示一行的所有内容</span><br><span class="line">&amp; 表示的就是匹配到的内容</span><br><span class="line">--------------------------------</span><br><span class="line">:set nu  显示行号</span><br><span class="line">:set nonu 取消行号</span><br><span class="line">:set ic (ignore case) 忽略大小写</span><br><span class="line">:set noic 区分大小写</span><br><span class="line">:set list 查字符串中的符号  比如可以看换行符 空格符  制表符</span><br><span class="line">:set nolist 取消显示符号</span><br><span class="line">:set ai 设置缩进</span><br><span class="line">:set noai 取消缩进</span><br></pre></td></tr></table></figure><h3 id="可视化模式（visual）"><a href="#可视化模式（visual）" class="headerlink" title="可视化模式（visual）"></a>可视化模式（visual）</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ctrl+v 可视化块</span><br><span class="line">shfit+v 可视化行</span><br><span class="line"></span><br><span class="line">shfit + &gt; 向右缩进</span><br><span class="line">shfit + &lt; 向左缩进</span><br><span class="line"></span><br><span class="line">在多行前添加内容</span><br><span class="line">先选中内容 --&gt; I ---&gt; 输入添加的内容 --&gt;esc</span><br><span class="line">x 和 d 删除选中内容</span><br><span class="line">y 是复制</span><br></pre></td></tr></table></figure><h2 id="Linux文件类型"><a href="#Linux文件类型" class="headerlink" title="Linux文件类型"></a>Linux文件类型</h2><p>在LInux中一切皆文件。Linux中的文件是没有扩展名的。Linux文件如果加上扩展名也仅仅是告诉开发人员看的。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">d：文件夹</span><br><span class="line">-：文件</span><br><span class="line">l：链接文件</span><br><span class="line">b：块设备文件  硬盘  U盘</span><br><span class="line">c: 字符设备文件  打印机  终端</span><br><span class="line">s：socket文件</span><br></pre></td></tr></table></figure><p>可以使用<code>file</code>命名查看文件和目录类型</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@hadoop10 dev]# file vcs</span><br><span class="line">vcs: character special</span><br></pre></td></tr></table></figure><h2 id="Linux文件的时间"><a href="#Linux文件的时间" class="headerlink" title="Linux文件的时间"></a>Linux文件的时间</h2><p>Access Time（atime）: 访问时间</p><p>访问时间要发生变化需要满足以下任意一个条件：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、有数据写入</span><br><span class="line">2、本次访问时间和上一次访问时间间隔达到86400秒</span><br></pre></td></tr></table></figure><p>Modify Time (mtime): 文件内容发生变化的时间</p><p>Change Time (ctime): 文件属性发生变化的时间</p><h2 id="查看文件的属性"><a href="#查看文件的属性" class="headerlink" title="查看文件的属性"></a>查看文件的属性</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">stat 文件</span><br><span class="line"></span><br><span class="line">[root@hadoop10 opt]# stat 2.txt </span><br><span class="line">  File: `2.txt'</span><br><span class="line">  Size: 51      Blocks: 8      IO Block: 4096      regular file</span><br><span class="line">Device: fd00h/64768d    Inode: 267517      Links: 1</span><br><span class="line">Access: (0700/-rwx------)  Uid: (    0/    root)   Gid: (    0/    root)</span><br><span class="line">Access: 2020-07-30 16:45:31.291999243 +0800</span><br><span class="line">Modify: 2020-07-30 16:45:31.291999243 +0800</span><br><span class="line">Change: 2020-07-30 16:45:31.362999191 +0800</span><br></pre></td></tr></table></figure><h2 id="复制和移动"><a href="#复制和移动" class="headerlink" title="复制和移动"></a>复制和移动</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp 文件  指定的文件路径  #拷贝文件到指定路径</span><br><span class="line">mv 文件/目录  指定的路径  #剪切文件/目录到指定路径  可以重命名文件</span><br><span class="line">cp -r 目录  指定的路径  #拷贝目录到指定路径</span><br></pre></td></tr></table></figure><h2 id="查看文件内容"><a href="#查看文件内容" class="headerlink" title="查看文件内容"></a>查看文件内容</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat 文件</span><br><span class="line">head 文件 # 默认查看文件的前10行内容</span><br><span class="line">head -n 2 文件  # 查看文件的前2行内容</span><br><span class="line">tail 文件 # 默认查看文件的最后10行内容</span><br><span class="line">tail -n 2 文件  # 查看文件的最后2行内容</span><br><span class="line">tail -f 文件  # 根据文件的描述符信息监控文件。文件名更改后就监控不到了</span><br><span class="line">tail -F 文件 # 根据文件的名称监控文件，而且还有重试</span><br><span class="line">more 文件   # 分页查看</span><br><span class="line">    空格 下一页</span><br><span class="line">    b   上一页</span><br><span class="line">    回车 下一行</span><br><span class="line">less 文件    # 可以接收命令</span><br><span class="line">    空格 下一页</span><br><span class="line">    b   上一页</span><br><span class="line">    回车 下一行</span><br><span class="line">    q 退出</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux学习-01</title>
      <link href="2018/03/06/Linux%E5%AD%A6%E4%B9%A0-01/"/>
      <url>2018/03/06/Linux%E5%AD%A6%E4%B9%A0-01/</url>
      
        <content type="html"><![CDATA[<h2 id="Linux介绍"><a href="#Linux介绍" class="headerlink" title="Linux介绍"></a>Linux介绍</h2><p>​     Linux是一个基于<a href="https://baike.baidu.com/item/POSIX" target="_blank" rel="noopener">POSIX</a>和Unix的多用户、<a href="https://baike.baidu.com/item/多任务/1011764" target="_blank" rel="noopener">多任务</a>、支持<a href="https://baike.baidu.com/item/多线程/1190404" target="_blank" rel="noopener">多线程</a>和多<a href="https://baike.baidu.com/item/CPU" target="_blank" rel="noopener">CPU</a>的操作系统 </p><p><strong>平常说的Linux其实真正指的是Linux的内核。</strong></p><blockquote><p>RedHat：企业版、社区版</p><p>CentOS：就是RedHat的社区版</p><p>Ubuntu: 乌班图</p><p>中标麒麟：Kylin</p></blockquote><h2 id="Linux用户和用户组"><a href="#Linux用户和用户组" class="headerlink" title="Linux用户和用户组"></a>Linux用户和用户组</h2><p>root 是超级管理员。大Boss</p><p>推荐学习网站：<a href="https://man.linuxde.net/" target="_blank" rel="noopener">https://man.linuxde.net/</a></p><h3 id="使用帮助"><a href="#使用帮助" class="headerlink" title="使用帮助"></a>使用帮助</h3><p>1、命令  —help</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">useradd --help</span><br></pre></td></tr></table></figure><p>2、man 命令  （manual）</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">man手册的章节：</span><br><span class="line">1      User Commands</span><br><span class="line">5      File Formats and Conventions</span><br><span class="line">8      System Administration tools and Deamons</span><br></pre></td></tr></table></figure><p>按enter下一页</p><p>按q退出man</p><h3 id="清屏"><a href="#清屏" class="headerlink" title="清屏"></a>清屏</h3><p><code>ctrl + l</code></p><h3 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">useradd 用户名</span><br><span class="line">passwd 用户名</span><br></pre></td></tr></table></figure><p>在linux中添加用户会发生以下事情：</p><p>1、每一个用户都有自己的家的路径，叫做家目录(home)</p><p>每一个用户登录Linux系统都会进入自己家目录</p><p><code>~</code>表示的就是用户的家目录</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/root  这是root的家目录</span><br><span class="line">/home/用户名   普通用户的家目录</span><br></pre></td></tr></table></figure><p>2、每一个用户都有自己的用户组。如果在创建用户的时候没有明确的指定用户组，默认就是使用自己的用户名作为组名。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat /etc/group   # 查看组信息</span><br><span class="line"></span><br><span class="line">cat /etc/passwd  #查看用户信息</span><br></pre></td></tr></table></figure><p>3、有自己的邮件地址</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/var/mail</span><br></pre></td></tr></table></figure><h3 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Usage: userdel [options] LOGIN</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -r, --remove                  remove home directory and mail spool</span><br></pre></td></tr></table></figure><p>删除用户的时候是否需要删除家目录？？？</p><p>   根据删除用户时，用户的数据是否还需要使用。一般情况下删除用户先不要删家目录。</p><h3 id="修改用户"><a href="#修改用户" class="headerlink" title="修改用户"></a>修改用户</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Usage: usermod [options] LOGIN</span><br></pre></td></tr></table></figure><h3 id="添加组"><a href="#添加组" class="headerlink" title="添加组"></a>添加组</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Usage: groupadd [options] GROUP</span><br></pre></td></tr></table></figure><h3 id="删除组"><a href="#删除组" class="headerlink" title="删除组"></a>删除组</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@hadoop10 hadoop]# groupdel baby</span><br><span class="line">groupdel: cannot remove the primary group of user 'xiaoming'</span><br></pre></td></tr></table></figure><h3 id="修改组"><a href="#修改组" class="headerlink" title="修改组"></a>修改组</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Usage: groupmod [options] GROUP</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -g, --gid GID                 change the group ID to GID</span><br><span class="line">  -h, --help                    display this help message and exit</span><br><span class="line">  -n, --new-name NEW_GROUP      change the name to NEW_GROUP</span><br></pre></td></tr></table></figure><h3 id="id"><a href="#id" class="headerlink" title="id"></a>id</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@hadoop10 var]# id</span><br><span class="line"></span><br><span class="line">uid=0(root) gid=0(root) groups=0(root) context=unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023</span><br></pre></td></tr></table></figure><h3 id="whoami"><a href="#whoami" class="headerlink" title="whoami"></a>whoami</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@hadoop10 var]# whoami</span><br><span class="line">root</span><br></pre></td></tr></table></figure><h2 id="Linux文件系统"><a href="#Linux文件系统" class="headerlink" title="Linux文件系统"></a>Linux文件系统</h2><p>在Linux中是没有盘符的概念的。只有目录树层次结构</p><p>根目录就是 <code>/</code></p><p><img src="https://i.loli.net/2020/11/10/DTSLFaterzUgqlb.png" alt="image-20200729165157269.png"></p><p><strong>*</strong> 在Linux中一切皆文件</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/bin：普通用户执行的命令</span><br><span class="line">/sbin: 管理员执行的命令</span><br><span class="line">/etc: 配置文件的目录</span><br><span class="line">/dev/null: 可以理解成回收站 里面永远是空的</span><br><span class="line">/home：普通用户的家目录</span><br><span class="line">/root: root用户的家目录</span><br><span class="line">/opt: 程序安装目录</span><br><span class="line">/proc: 程序的进程信息</span><br><span class="line">/usr/local: 程序安装目录</span><br><span class="line">/var: 存放变化的文件 日志、mail</span><br></pre></td></tr></table></figure><h3 id="文件和目录命令"><a href="#文件和目录命令" class="headerlink" title="文件和目录命令"></a>文件和目录命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd ~   #回到家目录</span><br><span class="line">cd     #回到家目录</span><br><span class="line">cd ..  #返回上级目录</span><br><span class="line">cd .   #当前目录</span><br><span class="line">cd -   #返回上一次的目录</span><br><span class="line">cd 路径 #进入指定路径</span><br><span class="line"></span><br><span class="line">ls: #查看目录下的文件和目录</span><br><span class="line">ls -l #详细信息显示目录下的文件和目录</span><br><span class="line">   -h #人性化</span><br><span class="line">   -a #all 包含隐藏文件</span><br><span class="line">ll 是ls -l的别名</span><br><span class="line"></span><br><span class="line">pwd #查看当前所在目录</span><br><span class="line"></span><br><span class="line">绝对路径：以/开头的</span><br><span class="line"></span><br><span class="line">相对路径：不是以/开头的</span><br></pre></td></tr></table></figure><h3 id="创建文件夹"><a href="#创建文件夹" class="headerlink" title="创建文件夹"></a>创建文件夹</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir --help</span><br><span class="line">Usage: mkdir [OPTION]... DIRECTORY...</span><br><span class="line">  -p, --parents     no error if existing, make parent directories as needed</span><br><span class="line">  -v, --verbose     print a message for each created directory</span><br></pre></td></tr></table></figure><h3 id="删除文件夹"><a href="#删除文件夹" class="headerlink" title="删除文件夹"></a>删除文件夹</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rmdir 目录 #删除空目录</span><br><span class="line">rm -r -f # 递归强制删除目录和文件    谨慎使用</span><br></pre></td></tr></table></figure><h3 id="文件命令"><a href="#文件命令" class="headerlink" title="文件命令"></a>文件命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">touch 文件名 # 创建一个空文件;修改文件的时间</span><br><span class="line">cat 文件 # 查看文件内容</span><br><span class="line"></span><br><span class="line">echo “java”  #输出内容 默认到屏幕</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scala的数据类型</title>
      <link href="2018/03/01/Scala%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>2018/03/01/Scala%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>学过Java我们知道Java中的数据类型分为：基本数据类型和引用数据类型。</p><p>Java中的基本数据类型不能当作对象使用，所以Java也不能称之为纯面向对象的语言。</p><p>而今天我们介绍的Scala却是一个纯面向对象的语言，真的很纯哦。。。。</p><p>那么，既然Scala是一个纯面向对象的语言，所以其中的数据类型应该也和对象有关联，接下来我们就来看看Scala中的数据类型。</p><h2 id="Scala的数据类型"><a href="#Scala的数据类型" class="headerlink" title="Scala的数据类型"></a>Scala的数据类型</h2><p>在Scala中，所有的值（包括数值和函数）都有类型，下图展示了Scala中数据类型层次结构：</p><p><img src="https://i.loli.net/2019/12/13/9tvcKjRgbFym8Qo.jpg" alt="data.jpg"></p><h3 id="Any"><a href="#Any" class="headerlink" title="Any"></a>Any</h3><ul><li><p>Any是Scala中所有数据类型的超类型，也叫做<strong><em>顶级类型</em></strong>。</p></li><li><p>Any定义了一些通用的方法：equals、hashCode、toString和getClass等。</p></li><li><p>Any有两个直接的子类：</p><ul><li><p><strong>AnyVal</strong></p></li><li><p><strong>AnyRef</strong></p></li></ul></li></ul><h4 id="AnyVal"><a href="#AnyVal" class="headerlink" title="AnyVal"></a>AnyVal</h4><ul><li><p>AnyVal表示<strong>值类型</strong></p></li><li><p>AnyVal包括9个子类型：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Byte</span><br><span class="line">Short</span><br><span class="line">Int</span><br><span class="line">Long</span><br><span class="line">Char</span><br><span class="line">Float</span><br><span class="line">Double</span><br><span class="line">Boolean</span><br><span class="line">Unit</span><br></pre></td></tr></table></figure><p>其中1-7又被称为<strong><em>数值类型</em></strong>（numeric value types）;</p><p>​        8-9又被称为<strong><em>非数值类型</em></strong>（non-numeric value types）</p></li></ul><p>  <strong>当然，AnyVal的9个子类型还有一种分组方式：</strong></p>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- The &apos;&apos;subrange types&apos;&apos; are [[scala.Byte]], [[scala.Short]], and [[scala.Char]].</span><br><span class="line"></span><br><span class="line">- The &apos;&apos;integer types&apos;&apos; include the subrange types as well as [[scala.Int]] and [[scala.Long]].</span><br><span class="line"></span><br><span class="line">- The &apos;&apos;floating point types&apos;&apos; are [[scala.Float]] and [[scala.Double]].</span><br></pre></td></tr></table></figure><h5 id="Unit"><a href="#Unit" class="headerlink" title="Unit"></a>Unit</h5><p>  ​    Unit是不带任何意义的值类型，它仅有一个实例可以像这样声明：()。</p><p>  ​    因为Scala中所有的函数必须有返回，所以说有时候Unit也是有用的返回类型。</p><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p>  AnyVal的9种类型 就是java中8种基本数据类型 + Unit类型。不过Scala中的Byte、Int等不是基本数据类型，而是可以做对象使用的。比如：</p>  <figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> num:<span class="type">Int</span> = <span class="number">10</span></span><br><span class="line">println(num.toString)<span class="comment">//num可以调用方法</span></span><br></pre></td></tr></table></figure><h4 id="AnyRef"><a href="#AnyRef" class="headerlink" title="AnyRef"></a>AnyRef</h4><ul><li><p>AnyRef代表引用类型。</p></li><li><p>所有非值类型都被定义为引用类型。</p></li><li><p>在Scala中，每个用户自定义的类型都是AnyRef的子类型。</p></li><li><p>如果Scala被应用在Java的运行环境中，AnyRef相当于java.lang.Object。</p></li></ul><h5 id="Nothing"><a href="#Nothing" class="headerlink" title="Nothing"></a>Nothing</h5><ul><li><p>Nothing是所有类型的子类型，也称为<strong><em>底部类型</em></strong></p></li><li><p>没有一个值是Nothing类型的。它的用途之一是给出非正常终止的信号，如抛出异常、程序退出或者一个无限循环（可以理解为它是一个不对值进行定义的表达式的类型，或者是一个不能正常返回的方法）。</p><p><strong><em>比如：</em></strong></p><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">//该方法是用来抛出异常的，不需要返回具体的结果。所以返回值定义成Nothing即可</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">break</span></span>(): <span class="type">Nothing</span> = &#123; <span class="keyword">throw</span> breakException &#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="Null"><a href="#Null" class="headerlink" title="Null"></a>Null</h5><ul><li><p>Null是所有引用类型的子类型（即AnyRef的任意子类型）。</p></li><li><p>它有一个单例值由关键字null所定义。</p></li><li><p>Null主要是使得Scala满足和其他JVM语言的互操作性，但是几乎不应该在Scala代码中使用。</p><p><strong><em>比如：</em></strong></p><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> </span>&#123;</span><br><span class="line">  <span class="comment">//在类型定义的属性，初始化的时候就不推荐使用null,而是用_</span></span><br><span class="line">  <span class="keyword">var</span> name:<span class="type">String</span>=_</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Scala </category>
          
      </categories>
      
      
        <tags>
            
            <tag> scala </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
