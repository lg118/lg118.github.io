<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>大数据平台的利器--Ambari+HDP</title>
      <link href="/2020/01/08/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%B9%B3%E5%8F%B0%E7%9A%84%E5%88%A9%E5%99%A8--Ambari+HDP/"/>
      <url>/2020/01/08/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%B9%B3%E5%8F%B0%E7%9A%84%E5%88%A9%E5%99%A8--Ambari+HDP/</url>
      
        <content type="html"><![CDATA[<h1 id="Ambari是什么"><a href="#Ambari是什么" class="headerlink" title="Ambari是什么"></a>Ambari是什么</h1><p>Ambari 是 Apache 软件基金会 的一个顶级项目。</p><p>Apache Ambari项目用于配置、管理和监视Apache Hadoop集群的软件，简化Hadoop管理。Ambari提供了一个直观、易于使用的Hadoop管理web UI。</p><p>但是这里的 Hadoop 是广义，指的是 Hadoop 整个生态圈（例如 Hive，Hbase，Sqoop，Zookeeper 等），而并不仅是特指 Hadoop。</p><p>用一句话来说，<strong>Ambari 就是为了让 Hadoop 以及相关的大数据软件更容易使用的一个工具。</strong></p><h1 id="Ambari组成"><a href="#Ambari组成" class="headerlink" title="Ambari组成"></a>Ambari组成</h1><p>Ambari 自身也是一个分布式架构的软件，主要由两部分组成：Ambari Server 和 Ambari Agent。简单来说，用户通过 Ambari Server 通知 Ambari Agent 安装对应的软件；Agent 会定时地发送各个机器每个软件模块的状态给 Ambari Server，最终这些状态信息会呈现在 Ambari 的 GUI（图形用户界面），方便用户了解到集群的各种状态，并进行相应的维护。</p><h1 id="HDP是什么"><a href="#HDP是什么" class="headerlink" title="HDP是什么"></a>HDP是什么</h1><p>Hortonworks Data Platform (HDP)是一个用于分布式存储和处理大型多源数据集的开源框架。</p><p><img alt="hdp-architecture-diagram.png" data-src="https://i.loli.net/2020/01/08/d1klgM6E2LJsqYf.png" class="lazyload"></p><h1 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h1><h2 id="一、集群规划"><a href="#一、集群规划" class="headerlink" title="一、集群规划"></a>一、集群规划</h2><div class="table-container"><table><thead><tr><th>主机名</th><th>IP地址</th><th>功能</th></tr></thead><tbody><tr><td>hadoop101</td><td>192.168.10.101</td><td>Yum源</td></tr><tr><td>hadoop102</td><td>192.168.10.102</td><td>Ambri Server + MySQL</td></tr><tr><td>hadoop103</td><td>192.168.10.103</td><td>Compute Node</td></tr><tr><td>hadoop104</td><td>192.168.10.104</td><td>Compute Node</td></tr></tbody></table></div><h2 id="二、下载安装包"><a href="#二、下载安装包" class="headerlink" title="二、下载安装包"></a>二、下载安装包</h2><p>HDP： </p><p><a href="http://public-repo-1.hortonworks.com/HDP/centos6/2.x/updates/2.6.4.0/HDP-2.6.4.0-centos6-rpm.tar.gz" target="_blank" rel="noopener">http://public-repo-1.hortonworks.com/HDP/centos6/2.x/updates/2.6.4.0/HDP-2.6.4.0-centos6-rpm.tar.gz</a></p><p>ambari：</p><p><a href="http://public-repo-1.hortonworks.com/ambari/centos6/2.x/updates/2.6.1.0/ambari-2.6.1.0-centos6.tar.gz" target="_blank" rel="noopener">http://public-repo-1.hortonworks.com/ambari/centos6/2.x/updates/2.6.1.0/ambari-2.6.1.0-centos6.tar.gz</a></p><p>HDP-UTILS：</p><p><a href="http://public-repo-1.hortonworks.com/HDP-UTILS-1.1.0.21/repos/centos6/HDP-UTILS-1.1.0.21-centos6.tar.gz" target="_blank" rel="noopener">http://public-repo-1.hortonworks.com/HDP-UTILS-1.1.0.21/repos/centos6/HDP-UTILS-1.1.0.21-centos6.tar.gz</a></p><h2 id="三、新建虚拟机，安装CentOS"><a href="#三、新建虚拟机，安装CentOS" class="headerlink" title="三、新建虚拟机，安装CentOS"></a>三、新建虚拟机，安装CentOS</h2><p>安装步骤省略</p><p><strong><em>注意：磁盘空间不低于50G</em></strong></p><h2 id="四、关闭防火墙"><a href="#四、关闭防火墙" class="headerlink" title="四、关闭防火墙"></a>四、关闭防火墙</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">service iptables stop</span><br><span class="line">chkconfig iptables off</span><br></pre></td></tr></table></figure><h2 id="五、关闭SELINUX"><a href="#五、关闭SELINUX" class="headerlink" title="五、关闭SELINUX"></a>五、关闭SELINUX</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/selinux/config</span><br><span class="line">修改其中的 SELINUX=enforcing 为 SELINUX=disabled</span><br></pre></td></tr></table></figure><h2 id="六、为提升hadoop性能，hadoop环境上要求关闭Transparent-Hugepages（THP，页面内存透明化）"><a href="#六、为提升hadoop性能，hadoop环境上要求关闭Transparent-Hugepages（THP，页面内存透明化）" class="headerlink" title="六、为提升hadoop性能，hadoop环境上要求关闭Transparent Hugepages（THP，页面内存透明化）"></a>六、为提升hadoop性能，hadoop环境上要求关闭Transparent Hugepages（THP，页面内存透明化）</h2><h3 id="1、查看是否启用"><a href="#1、查看是否启用" class="headerlink" title="1、查看是否启用"></a>1、查看是否启用</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# cat /sys/kernel/mm/transparent_hugepage/defrag</span><br><span class="line">[always] madvise never</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# cat /sys/kernel/mm/transparent_hugepage/enabled</span><br><span class="line">[always] madvise never</span><br></pre></td></tr></table></figure><h3 id="2、禁用-编辑rc-local启动文件"><a href="#2、禁用-编辑rc-local启动文件" class="headerlink" title="2、禁用　编辑rc.local启动文件"></a>2、禁用　编辑rc.local启动文件</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# vim /etc/rc.d/rc.local</span><br><span class="line">增加下列内容：</span><br><span class="line">if test -f /sys/kernel/mm/transparent_hugepage/enabled; then</span><br><span class="line">echo never &gt; /sys/kernel/mm/transparent_hugepage/enabled</span><br><span class="line">fi</span><br><span class="line">if test -f /sys/kernel/mm/transparent_hugepage/defrag; then</span><br><span class="line">echo never &gt; /sys/kernel/mm/transparent_hugepage/defrag</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h3 id="3、重启"><a href="#3、重启" class="headerlink" title="3、重启"></a>3、重启</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# reboot</span><br></pre></td></tr></table></figure><h2 id="七、配置aliYum源"><a href="#七、配置aliYum源" class="headerlink" title="七、配置aliYum源"></a>七、配置aliYum源</h2><p><a href="https://developer.aliyun.com/mirror/centos?spm=a2c6h.13651102.0.0.53322f708nr7q9" target="_blank" rel="noopener">https://developer.aliyun.com/mirror/centos?spm=a2c6h.13651102.0.0.53322f708nr7q9</a></p><h3 id="1、备份"><a href="#1、备份" class="headerlink" title="1、备份"></a>1、备份</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</span><br></pre></td></tr></table></figure><h3 id="2、下载新的CentOS-Base-repo-到-etc-yum-repos-d"><a href="#2、下载新的CentOS-Base-repo-到-etc-yum-repos-d" class="headerlink" title="2、下载新的CentOS-Base.repo 到/etc/yum.repos.d/"></a>2、下载新的CentOS-Base.repo 到/etc/yum.repos.d/</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-6.repo</span><br></pre></td></tr></table></figure><h3 id="3、之后运行yum-makecache生成缓存"><a href="#3、之后运行yum-makecache生成缓存" class="headerlink" title="3、之后运行yum makecache生成缓存"></a>3、之后运行<code>yum makecache</code>生成缓存</h3><h2 id="八、配置时间同步"><a href="#八、配置时间同步" class="headerlink" title="八、配置时间同步"></a>八、配置时间同步</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y install ntp</span><br><span class="line">service ntpd start</span><br><span class="line">chkconfig ntpd on</span><br></pre></td></tr></table></figure><h2 id="九、安装jdk"><a href="#九、安装jdk" class="headerlink" title="九、安装jdk"></a>九、安装jdk</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">解压</span></span><br><span class="line">tar -zxvf jdk-8u144-linux-x64.tar.gz -C /usr</span><br><span class="line">ln -s jdk1.8.0_144 java</span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置环境变量</span></span><br><span class="line">vim /etc/profile</span><br><span class="line">export JAVA_HOME=/usr/java</span><br><span class="line">export PATH=$PATH:$JAVA_HOME/bin</span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><h2 id="十、配置IP映射"><a href="#十、配置IP映射" class="headerlink" title="十、配置IP映射"></a>十、配置IP映射</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/hosts</span><br><span class="line">192.168.10.101 hadoop101</span><br><span class="line">192.168.10.102 hadoop102</span><br><span class="line">192.168.10.103 hadoop103</span><br><span class="line">192.168.10.104 hadoop104</span><br></pre></td></tr></table></figure><h2 id="十一、克隆虚拟机"><a href="#十一、克隆虚拟机" class="headerlink" title="十一、克隆虚拟机"></a>十一、克隆虚拟机</h2><p><strong><em>步骤略</em></strong></p><h2 id="十二、安装MySQL【hadoop102】"><a href="#十二、安装MySQL【hadoop102】" class="headerlink" title="十二、安装MySQL【hadoop102】"></a>十二、安装MySQL【hadoop102】</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1、检查是否安装了MySQL</span><br><span class="line">[root@hadoop201 ~]# rpm -qa | grep -i mysql</span><br><span class="line">mysql-libs-5.1.71-1.el6.x86_64</span><br><span class="line">2、卸载</span><br><span class="line">[root@hadoop201 ~]# rpm -e --nodeps mysql-libs-5.1.71-1.el6.x86_64</span><br><span class="line">3、安装</span><br><span class="line">[root@hadoop201 ~]# rpm -ivh /opt/MySQL-server-5.5.28-1.linux2.6.x86_64.rpm</span><br><span class="line">4、启动MySQL</span><br><span class="line">[root@hadoop201 ~]# service mysql start</span><br><span class="line">chkconfig mysql on</span><br><span class="line">5、安装客户端</span><br><span class="line">[root@hadoop201 ~]# rpm -ivh  /opt/MySQL-client-5.5.28-1.linux2.6.x86_64.rpm</span><br><span class="line">6、执行配置脚本（注意：尽量不要使用全数字密码，避免出问题）</span><br><span class="line">我的密码是 hadoop102</span><br><span class="line">[root@hadoop201 ~]# /usr/bin/mysql_secure_installation</span><br><span class="line">7、授权无主机登录</span><br><span class="line">[root@hadoop102 ~]# mysql -uroot -p hadoop102</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> GRANT ALL PRIVILEGES ON *.* TO <span class="string">'root'</span>@<span class="string">'%'</span> IDENTIFIED BY <span class="string">'hadoop102'</span>;</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> FLUSH PRIVILEGES;</span></span><br></pre></td></tr></table></figure><h2 id="十三、安装httpd-hadoop101节点安装"><a href="#十三、安装httpd-hadoop101节点安装" class="headerlink" title="十三、安装httpd(hadoop101节点安装)"></a>十三、安装httpd(hadoop101节点安装)</h2><h3 id="1、安装httpd"><a href="#1、安装httpd" class="headerlink" title="1、安装httpd"></a>1、安装httpd</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y install httpd</span><br></pre></td></tr></table></figure><h3 id="2、在-var-www-html下创建ambari和hdp目录"><a href="#2、在-var-www-html下创建ambari和hdp目录" class="headerlink" title="2、在/var/www/html下创建ambari和hdp目录"></a>2、在/var/www/html下创建ambari和hdp目录</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /var/www/html/</span><br><span class="line">mkdir ambari</span><br><span class="line">mkdir hdp</span><br><span class="line">mkdir -p hdp/HDP-UTILS</span><br></pre></td></tr></table></figure><h3 id="3、上传资源包"><a href="#3、上传资源包" class="headerlink" title="3、上传资源包"></a>3、上传资源包</h3><p>上传ambari-2.6.1.0-centos6.tar.gz、HDP-2.6.4.0-centos6-rpm.tar.gz、HDP-UTILS-1.1.0.21-centos6.tar.gz</p><h3 id="4、解压到指定目录"><a href="#4、解压到指定目录" class="headerlink" title="4、解压到指定目录"></a>4、解压到指定目录</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -zxvf /opt/ambari-2.6.1.0-centos6.tar.gz -C /var/www/html/ambari/</span><br><span class="line">tar -zxvf /opt/HDP-2.6.4.0-centos6-rpm.tar.gz -C /var/www/html/hdp/</span><br><span class="line">tar -zxvf /opt/HDP-UTILS-1.1.0.21-centos6.tar.gz -C /var/www/html/hdp/HDP-UTILS/</span><br></pre></td></tr></table></figure><h3 id="5、启动httpd"><a href="#5、启动httpd" class="headerlink" title="5、启动httpd"></a>5、启动httpd</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">service httpd restart</span><br><span class="line">chkconfig httpd on</span><br></pre></td></tr></table></figure><h3 id="6、web访问"><a href="#6、web访问" class="headerlink" title="6、web访问"></a>6、web访问</h3><p>现在可以通过访问<a href="http://192.168.10.101/ambari/查看是否能成功访问" target="_blank" rel="noopener">http://192.168.10.101/ambari/查看是否能成功访问</a></p><h2 id="十四、配置Ambari-HDP本地yum源"><a href="#十四、配置Ambari-HDP本地yum源" class="headerlink" title="十四、配置Ambari+HDP本地yum源"></a>十四、配置Ambari+HDP本地yum源</h2><h3 id="1、-安装本地源制作相关工具"><a href="#1、-安装本地源制作相关工具" class="headerlink" title="1、 安装本地源制作相关工具"></a>1、 安装本地源制作相关工具</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y yum-utils createrepo yum-plugin-priorities</span><br></pre></td></tr></table></figure><h3 id="2、编辑ambari-repo"><a href="#2、编辑ambari-repo" class="headerlink" title="2、编辑ambari.repo"></a>2、编辑ambari.repo</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 ~]# cd  /var/www/html/ambari</span><br><span class="line">[root@hadoop101 ~]# vim  ambari/centos6/2.6.1.0-143/ambari.repo</span><br><span class="line"><span class="meta">#</span><span class="bash">VERSION_NUMBER=2.6.1.0-143</span></span><br><span class="line">[ambari-2.6.1.0]</span><br><span class="line">name=ambari Version - ambari-2.6.1.0</span><br><span class="line">baseurl=http://192.168.10.101/ambari/ambari/centos6/2.6.1.0-143/</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=http://192.168.10.101/ambari/ambari/centos6/2.6.1.0-143/RPM-GPG-KEY/RPM-GPG-KEY-Jenkins</span><br><span class="line">enabled=1</span><br><span class="line">priority=1</span><br></pre></td></tr></table></figure><h3 id="3、复制ambari-repo"><a href="#3、复制ambari-repo" class="headerlink" title="3、复制ambari.repo"></a>3、复制ambari.repo</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp ambari/centos6/2.6.1.0-143/ambari.repo  /etc/yum.repos.d/</span><br></pre></td></tr></table></figure><h3 id="4、编辑hdp-repo"><a href="#4、编辑hdp-repo" class="headerlink" title="4、编辑hdp.repo"></a>4、编辑hdp.repo</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 ~]# cd /var/www/html/hdp</span><br><span class="line">[root@hadoop101 ~]# vim HDP/centos6/2.6.4.0-91/hdp.repo</span><br><span class="line"><span class="meta">#</span><span class="bash">VERSION_NUMBER=2.6.4.0-91</span></span><br><span class="line">[HDP-2.6.4.0]</span><br><span class="line">name=HDP Version - HDP-2.6.4.0</span><br><span class="line">baseurl=http://192.168.10.101/hdp/HDP/centos6/2.6.4.0-91/</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=http://192.168.10.101/hdp/HDP/centos6/2.6.4.0-91/RPM-GPG-KEY/RPM-GPG-KEY-Jenkins</span><br><span class="line">enabled=1</span><br><span class="line">priority=1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[HDP-UTILS-1.1.0.22]</span><br><span class="line">name=HDP-UTILS Version - HDP-UTILS-1.1.0.22</span><br><span class="line">baseurl=http://192.168.10.101/hdp/HDP-UTILS</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=http://192.168.10.101/hdp/HDP-UTILS/RPM-GPG-KEY/RPM-GPG-KEY-Jenkins</span><br><span class="line">enabled=1</span><br><span class="line">priority=1</span><br></pre></td></tr></table></figure><h3 id="5、复制hdp-repo"><a href="#5、复制hdp-repo" class="headerlink" title="5、复制hdp.repo"></a>5、复制hdp.repo</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp HDP/centos6/2.6.4.0-91/hdp.repo /etc/yum.repos.d/</span><br></pre></td></tr></table></figure><h3 id="6、配置免密登录"><a href="#6、配置免密登录" class="headerlink" title="6、配置免密登录"></a>6、配置免密登录</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen</span><br><span class="line">ssh-copy-id root@hadoop101</span><br><span class="line">ssh-copy-id root@hadoop102</span><br><span class="line">ssh-copy-id root@hadoop103</span><br><span class="line">ssh-copy-id root@hadoop104</span><br></pre></td></tr></table></figure><h3 id="7、将创建好的文件拷贝到子节点"><a href="#7、将创建好的文件拷贝到子节点" class="headerlink" title="7、将创建好的文件拷贝到子节点"></a>7、将创建好的文件拷贝到子节点</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 etc]# scp -r yum.repos.d/ hadoop102:$PWD</span><br><span class="line">[root@hadoop101 etc]# scp -r yum.repos.d/ hadoop103:$PWD</span><br><span class="line">[root@hadoop101 etc]# scp -r yum.repos.d/ hadoop104:$PWD</span><br></pre></td></tr></table></figure><h3 id="8、生成本地源"><a href="#8、生成本地源" class="headerlink" title="8、生成本地源"></a>8、生成本地源</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">createrepo -v /var/www/html/hdp/HDP/centos6/</span><br><span class="line">createrepo -v /var/www/html/hdp/HDP-UTILS/</span><br></pre></td></tr></table></figure><h2 id="十五、安装Ambari-Server【hadoop102】"><a href="#十五、安装Ambari-Server【hadoop102】" class="headerlink" title="十五、安装Ambari Server【hadoop102】"></a>十五、安装Ambari Server<strong>【hadoop102】</strong></h2><h3 id="1、安装和配置ambari-server"><a href="#1、安装和配置ambari-server" class="headerlink" title="1、安装和配置ambari-server"></a>1、安装和配置ambari-server</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y install ambari-server</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">在mysql上创建 database ambari;</span></span><br><span class="line">mysql -uroot -phadoop102</span><br><span class="line">create database ambari;</span><br><span class="line">use ambari;</span><br><span class="line">source /var/lib/ambari-server/resources/Ambari-DDL-MySQL-CREATE.sql</span><br><span class="line"><span class="meta">#</span><span class="bash">在mysql上创建 database hive;</span></span><br><span class="line">create database hive;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">mysql驱动放入到：</span></span><br><span class="line">mkdir /usr/share/java</span><br><span class="line">cp /opt/mysql-connector-java-5.1.39.jar /var/lib/ambari-server/resources/</span><br><span class="line">cp /opt/mysql-connector-java-5.1.39.jar /usr/share/java/</span><br><span class="line">cp /opt/mysql-connector-java-5.1.39.jar /usr/lib/ambari-server/</span><br></pre></td></tr></table></figure><h3 id="2、python中英文编码问题"><a href="#2、python中英文编码问题" class="headerlink" title="2、python中英文编码问题"></a>2、python中英文编码问题</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">为了解决后期安装服务时python中英文编码问题，需要vim /usr/lib/python2.6/site-packages/resource_management/core/logger.py文件（master.one节点）</span></span><br><span class="line"><span class="meta">#</span><span class="bash">在import sys下添加如下代码：</span></span><br><span class="line">reload(sys)</span><br><span class="line">sys.setdefaultencoding('utf-8')</span><br></pre></td></tr></table></figure><h3 id="3、配置ambari-server"><a href="#3、配置ambari-server" class="headerlink" title="3、配置ambari-server"></a>3、配置ambari-server</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ambari-server setup</span><br><span class="line"></span><br><span class="line">Using python  /usr/bin/python</span><br><span class="line">Setup ambari-server</span><br><span class="line">Checking SELinux...</span><br><span class="line">SELinux status is 'enabled'</span><br><span class="line">SELinux mode is 'permissive'</span><br><span class="line">WARNING: SELinux is set to 'permissive' mode and temporarily disabled.</span><br><span class="line">OK to continue [y/n] (y)? y</span><br><span class="line">Customize user account for ambari-server daemon [y/n] (n)? y</span><br><span class="line">Enter user account for ambari-server daemon (root):root</span><br><span class="line">Adjusting ambari-server permissions and ownership...</span><br><span class="line">Checking firewall status...</span><br><span class="line">Checking JDK...</span><br><span class="line">[1] Oracle JDK 1.8 + Java Cryptography Extension (JCE) Policy Files 8</span><br><span class="line">[2] Oracle JDK 1.7 + Java Cryptography Extension (JCE) Policy Files 7</span><br><span class="line">[3] Custom JDK</span><br><span class="line">==============================================================================</span><br><span class="line">Enter choice (1): 3</span><br><span class="line">WARNING: JDK must be installed on all hosts and JAVA_HOME must be valid on all hosts.</span><br><span class="line">WARNING: JCE Policy files are required for configuring Kerberos security. If you plan to use Kerberos,please make sure JCE Unlimited Strength Jurisdiction Policy Files are valid on all hosts.</span><br><span class="line">Path to JAVA_HOME: /usr/java</span><br><span class="line">Validating JDK on Ambari Server...done.</span><br><span class="line">Checking GPL software agreement...</span><br><span class="line">GPL License for LZO: https://www.gnu.org/licenses/old-licenses/gpl-2.0.en.html</span><br><span class="line">Enable Ambari Server to download and install GPL Licensed LZO packages [y/n] (n)? y</span><br><span class="line">Completing setup...</span><br><span class="line">Configuring database...</span><br><span class="line">Enter advanced database configuration [y/n] (n)? y</span><br><span class="line">Configuring database...</span><br><span class="line">==============================================================================</span><br><span class="line">Choose one of the following options:</span><br><span class="line">[1] - PostgreSQL (Embedded)</span><br><span class="line">[2] - Oracle</span><br><span class="line">[3] - MySQL / MariaDB</span><br><span class="line">[4] - PostgreSQL</span><br><span class="line">[5] - Microsoft SQL Server (Tech Preview)</span><br><span class="line">[6] - SQL Anywhere</span><br><span class="line">[7] - BDB</span><br><span class="line">==============================================================================</span><br><span class="line">Enter choice (1): 3</span><br><span class="line">Hostname (localhost): 192.160.10.102</span><br><span class="line">Port (3306): 3306</span><br><span class="line">Database name (ambari): </span><br><span class="line">Username (ambari): root</span><br><span class="line">Enter Database Password (bigdata): hadoop102</span><br><span class="line">Configuring ambari database...</span><br><span class="line">Configuring remote database connection properties...</span><br><span class="line">WARNING: Before starting Ambari Server, you must run the following DDL against the database to create the schema: /var/lib/ambari-server/resources/Ambari-DDL-MySQL-CREATE.sql</span><br><span class="line">Proceed with configuring remote database connection properties [y/n] (y)? y</span><br><span class="line">Extracting system views...</span><br><span class="line">ambari-admin-2.6.1.0.143.jar</span><br><span class="line">...........</span><br><span class="line">Adjusting ambari-server permissions and ownership...</span><br><span class="line">Ambari Server 'setup' completed successfully.</span><br></pre></td></tr></table></figure><h3 id="4、启动ambari"><a href="#4、启动ambari" class="headerlink" title="4、启动ambari"></a>4、启动ambari</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ambari-server start</span><br></pre></td></tr></table></figure><p><strong><em>注意：出现Server not yet listening on http port 8080 after 50 seconds. Exiting异常执行以下语句：</em></strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo 'server.startup.web.timeout=120' &gt;&gt; /etc/ambari-server/conf/ambari.properties</span><br></pre></td></tr></table></figure><h2 id="十六、安装agent"><a href="#十六、安装agent" class="headerlink" title="十六、安装agent"></a>十六、安装agent</h2><p>在所有节点上安装ambari-agent</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y ambari-agent</span><br><span class="line">service ambari-agent start</span><br><span class="line">chkconfig ambari-agent on</span><br></pre></td></tr></table></figure><p><strong>成功启动后在浏览器输入Ambari地址：</strong></p><p><a href="http://192.168.10.102:8080" target="_blank" rel="noopener">http://192.168.10.102:8080</a></p><h2 id="十七、官方文档"><a href="#十七、官方文档" class="headerlink" title="十七、官方文档"></a>十七、官方文档</h2><p><a href="https://docs.cloudera.com/HDPDocuments/HDP2/HDP-2.6.4/bk_release-notes/bk_release-notes.pdf" target="_blank" rel="noopener">https://docs.cloudera.com/HDPDocuments/HDP2/HDP-2.6.4/bk_release-notes/bk_release-notes.pdf</a></p><p><a href="https://docs.cloudera.com/HDPDocuments/Ambari-2.5.1.0/bk_ambari-installation/bk_ambari-installation.pdf" target="_blank" rel="noopener">https://docs.cloudera.com/HDPDocuments/Ambari-2.5.1.0/bk_ambari-installation/bk_ambari-installation.pdf</a></p>]]></content>
      
      
      <categories>
          
          <category> Ambari+HDP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ambari </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scala隐式转换的问题分析</title>
      <link href="/2019/12/24/Scala%E4%B8%AD%E9%9A%90%E5%BC%8F%E8%BD%AC%E6%8D%A2%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90/"/>
      <url>/2019/12/24/Scala%E4%B8%AD%E9%9A%90%E5%BC%8F%E8%BD%AC%E6%8D%A2%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="Scala隐式转换的问题分析"><a href="#Scala隐式转换的问题分析" class="headerlink" title="Scala隐式转换的问题分析"></a>Scala隐式转换的问题分析</h1><h2 id="引出问题"><a href="#引出问题" class="headerlink" title="引出问题"></a>引出问题</h2><p>首先来看一个需求：<strong>将String类型的数字赋值给Int类型的变量。</strong></p><p>也就是这样：</p><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> num:<span class="type">Int</span>=<span class="string">"20"</span></span><br></pre></td></tr></table></figure><p>要想实现这样的效果，小伙伴们应该都能想到使用<code>隐式方法</code>这个技能。许多小伙伴一鸡冻就撸出了如下的代码：</p><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">implicit</span> <span class="function"><span class="keyword">def</span> <span class="title">strToInt</span></span>(str:<span class="type">String</span>):<span class="type">Int</span>= &#123;</span><br><span class="line">      str.toInt</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><strong><em>友情提示：</em></strong>隐式转换的代码要定义在object中哦~~~</p><p>定义了如上的隐式方法后，接下来我们来使用一下该隐式方法。接下来来一段完整代码尝尝：</p><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">TestDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> num:<span class="type">Int</span> = <span class="string">"20"</span></span><br><span class="line">    println(num)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 定义的隐式方法</span></span><br><span class="line"><span class="comment">    *    该方法的功能是将String转成Int</span></span><br><span class="line"><span class="comment">    * @param str  需要转换的字符串</span></span><br><span class="line"><span class="comment">    * @return 返回 Int</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">  <span class="keyword">implicit</span> <span class="function"><span class="keyword">def</span> <span class="title">strToInt</span></span>(str:<span class="type">String</span>):<span class="type">Int</span>= &#123;</span><br><span class="line">    str.toInt</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码撸完，感觉还不错，接着我们运行以上代码：哐当，出错啦。。。。</p><p>控制台输出以下错误信息：</p><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="type">Error</span>:(<span class="number">17</span>, <span class="number">5</span>) <span class="class"><span class="keyword">type</span> <span class="title">mismatch</span></span>;</span><br><span class="line"> found   : str<span class="class">.<span class="keyword">type</span> (<span class="params">with underlying type <span class="type">String</span></span>)</span></span><br><span class="line"><span class="class"> <span class="title">required</span></span>: ?&#123;<span class="function"><span class="keyword">def</span> <span class="title">toInt</span></span>: ?&#125;</span><br><span class="line"><span class="type">Note</span> that <span class="keyword">implicit</span> conversions are not applicable because they are ambiguous:</span><br><span class="line"> both method augmentString in <span class="class"><span class="keyword">object</span> <span class="title">Predef</span> <span class="title">of</span> <span class="title">type</span> (<span class="params">x: <span class="type">String</span></span>)<span class="title">scala</span>.<span class="title">collection</span>.<span class="title">immutable</span>.<span class="title">StringOps</span></span></span><br><span class="line"><span class="class"> <span class="title">and</span> <span class="title">method</span> <span class="title">strToInt</span> <span class="title">in</span> <span class="title">object</span> <span class="title">TestDemo</span> <span class="title">of</span> <span class="title">type</span> (<span class="params">str: <span class="type">String</span></span>)<span class="title">Int</span></span></span><br><span class="line"><span class="class"> <span class="title">are</span> <span class="title">possible</span> <span class="title">conversion</span> <span class="title">functions</span> <span class="title">from</span> <span class="title">str</span>.<span class="title">type</span> <span class="title">to</span> <span class="title">?</span></span>&#123;<span class="function"><span class="keyword">def</span> <span class="title">toInt</span></span>: ?&#125;</span><br><span class="line">    str.toInt</span><br><span class="line"><span class="type">Error</span>:(<span class="number">17</span>, <span class="number">9</span>) value toInt is not a member of <span class="type">String</span></span><br><span class="line">    str.toInt</span><br></pre></td></tr></table></figure><p>大伙看错误信息中有个关键的单词<code>ambiguous(模糊不清的，模棱两可的)</code>，以上错误信息的大致意思是说：</p><blockquote><p>隐式转换在这里不适用了，因为隐式转换出现了模糊不清的情况，这里有两个方法<br>一个在object Predef中有一个<strong>augmentString</strong>方法将x:String转成scala.collection.immutable.StringOps，<br>另一个在object TestDemo中有<strong>strToInt</strong>方法将str: String转成了Int<br>以上两个方法都可以将str: String转成了Int，所以隐式转换出现了模糊不清的情况</p></blockquote><p>看完后估计有的小伙伴还是一头雾水，这到底是说的啥，这到底是为什么？？好，那接下来我们就看看其中的究竟。</p><h2 id="分析原因"><a href="#分析原因" class="headerlink" title="分析原因"></a>分析原因</h2><h3 id="分析String相关的源码"><a href="#分析String相关的源码" class="headerlink" title="分析String相关的源码"></a>分析String相关的源码</h3><p>首先我们来看一段代码：</p><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">   <span class="keyword">val</span> str:<span class="type">String</span> = <span class="string">"20"</span></span><br><span class="line">   <span class="keyword">val</span> i = str.toInt</span><br><span class="line">   println(i)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>以上代码的正确编译运行，输出结果是Int类型的<code>20</code>。</p><p>接下来我们按住键盘上的Ctrl，鼠标点击String查看String类型，发现在object Predef中有这么一段代码：</p><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">String</span>        </span>= java.lang.<span class="type">String</span></span><br></pre></td></tr></table></figure><p>通过这段代码我们知道，Scala中的String其实是使用了java中的String。好了，那我们回顾以下java中的String有toInt()方法吗，熟悉Java的肯定立马就能回答：没有。对的，就是没有！！</p><p>String中没有toInt()方法，但是这里的<code>str</code>却可以使用<code>toInt()</code>，那说明<code>str.toInt</code>这里发生了隐式转换。没错，这里的str由String转换成了StringOps。这么转换的呢，我们上源码：</p><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">implicit</span> <span class="function"><span class="keyword">def</span> <span class="title">augmentString</span></span>(x: <span class="type">String</span>): <span class="type">StringOps</span> = <span class="keyword">new</span> <span class="type">StringOps</span>(x)</span><br></pre></td></tr></table></figure><p>在object Perdef中有一个隐式方法<code>augmentString</code>将String转换成了StringOps。接着我们再来看看StringOps的源码：</p><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">StringOps</span>(<span class="params">override val repr: <span class="type">String</span></span>) <span class="keyword">extends</span> <span class="title">AnyVal</span> <span class="keyword">with</span> <span class="title">StringLike</span>[<span class="type">String</span>] </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="keyword">protected</span>[<span class="keyword">this</span>] <span class="function"><span class="keyword">def</span> <span class="title">thisCollection</span></span>: <span class="type">WrappedString</span> = </span><br><span class="line">    <span class="keyword">new</span> <span class="type">WrappedString</span>(repr)</span><br><span class="line">    </span><br><span class="line">  <span class="keyword">override</span> <span class="keyword">protected</span>[<span class="keyword">this</span>] <span class="function"><span class="keyword">def</span> <span class="title">toCollection</span></span>(repr: <span class="type">String</span>): <span class="type">WrappedString</span> = </span><br><span class="line">  <span class="keyword">new</span> <span class="type">WrappedString</span>(repr)</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** Creates a string builder buffer as builder for this class */</span></span><br><span class="line">  <span class="keyword">override</span> <span class="keyword">protected</span>[<span class="keyword">this</span>] <span class="function"><span class="keyword">def</span> <span class="title">newBuilder</span> </span>= <span class="type">StringBuilder</span>.newBuilder</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">apply</span></span>(index: <span class="type">Int</span>): <span class="type">Char</span> = repr charAt index</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">slice</span></span>(from: <span class="type">Int</span>, until: <span class="type">Int</span>): <span class="type">String</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> start = <span class="keyword">if</span> (from &lt; <span class="number">0</span>) <span class="number">0</span> <span class="keyword">else</span> from</span><br><span class="line">    <span class="keyword">if</span> (until &lt;= start || start &gt;= repr.length)</span><br><span class="line">      <span class="keyword">return</span> <span class="string">""</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> end = <span class="keyword">if</span> (until &gt; length) length <span class="keyword">else</span> until</span><br><span class="line">    repr.substring(start, end)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">toString</span> </span>= repr</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">length</span> </span>= repr.length</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">seq</span> </span>= <span class="keyword">new</span> <span class="type">WrappedString</span>(repr)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在StringOps中没有直接发现toInt()方法，不要慌，仔细看看<code>StringOps</code>继承了<code>StringLike</code>，接着我们看看<code>StringLike</code>源码：</p><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">StringLike</span>[+<span class="type">Repr</span>] <span class="keyword">extends</span> <span class="title">Any</span> <span class="keyword">with</span> <span class="title">scala</span>.<span class="title">collection</span>.<span class="title">IndexedSeqOptimized</span>[<span class="type">Char</span>, <span class="type">Repr</span>] <span class="keyword">with</span> <span class="title">Ordered</span>[<span class="type">String</span>] </span>&#123;</span><br><span class="line"> <span class="comment">//省略代码................</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">toInt</span></span>: <span class="type">Int</span>         = java.lang.<span class="type">Integer</span>.parseInt(toString)</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * @throws java.lang.NumberFormatException  - If the string does not contain a parsable long.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">toLong</span></span>: <span class="type">Long</span>       = java.lang.<span class="type">Long</span>.parseLong(toString)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>终于在StringLike中找到了toInt，因为<code>StringOps</code>继承了<code>StringLike</code>，所以<code>StringOps</code>也就有了toInt()。</p><p>再看刚才的隐式方法：</p><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">implicit</span> <span class="function"><span class="keyword">def</span> <span class="title">augmentString</span></span>(x: <span class="type">String</span>): <span class="type">StringOps</span> = <span class="keyword">new</span> <span class="type">StringOps</span>(x)</span><br></pre></td></tr></table></figure><p>隐式方法<code>augmentString</code>将String转换成了<code>StringOps</code>，所以：</p><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">   <span class="keyword">val</span> str:<span class="type">String</span> = <span class="string">"20"</span></span><br><span class="line">   <span class="keyword">val</span> i = str.toInt <span class="comment">// 底层代码实现：augmentString(str).toInt</span></span><br><span class="line">   println(i)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>好了，通过以上代码分析，我们知道<code>StringOps</code>中存在<code>toInt</code>方法，所以通过隐式转换将str转成StringOps后就可以调用toInt了。</p><h3 id="分析Int相关的源码"><a href="#分析Int相关的源码" class="headerlink" title="分析Int相关的源码"></a>分析Int相关的源码</h3><p>接下来，我们继续分析Int类的源码：</p><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Int</span> <span class="title">private</span> <span class="keyword">extends</span> <span class="title">AnyVal</span> </span>&#123;</span><br><span class="line">  <span class="comment">//省略代码</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">toInt</span></span>: <span class="type">Int</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">toLong</span></span>: <span class="type">Long</span></span><br><span class="line">  <span class="comment">//省略代码</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>通过查看Int的源码发现在Int中也存在一个<code>toInt</code>的方法，那么现在如果也存在一个将String转成Int的隐式方法，那么，String也能调用<code>toInt</code>了。分析到这里，我们渐渐的感觉到发现冲突产生的地方了，好的，我们马上来看看我们写的隐式方法的代码：</p><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 定义的隐式方法</span></span><br><span class="line"><span class="comment">    *    该方法的功能是将String转成Int</span></span><br><span class="line"><span class="comment">    * @param str  需要转换的字符串</span></span><br><span class="line"><span class="comment">    * @return 返回 Int</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="keyword">implicit</span> <span class="function"><span class="keyword">def</span> <span class="title">strToInt</span></span>(str:<span class="type">String</span>):<span class="type">Int</span>= &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * 通过分析我们知道StringOps和Int都有toInt方法，所以</span></span><br><span class="line"><span class="comment">      * str.toInt在这里有两个隐式函数都可以进行转换</span></span><br><span class="line"><span class="comment">      * 1、使用scala.Predef 中的</span></span><br><span class="line"><span class="comment">      *       implicit def augmentString(x: String): StringOps = new StringOps(x)</span></span><br><span class="line"><span class="comment">      *   所以str.toInt 就等价于  augmentString(str).toInt</span></span><br><span class="line"><span class="comment">      *</span></span><br><span class="line"><span class="comment">      * 2、使用自己定义这个隐式方法(递归调用)</span></span><br><span class="line"><span class="comment">      *      augmentString 就等价于 strToInt(str).toInt</span></span><br><span class="line"><span class="comment">      *</span></span><br><span class="line"><span class="comment">      *  好了，我们知道隐式转换只能匹配一个，不能有多个，</span></span><br><span class="line"><span class="comment">      *  而这里str.toInt找到两个隐式转换都可以实现，所以出现了之前“模棱两可”的错误信息</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">    str.toInt</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>既然分析清楚了出现错误的原因，接下来我们就根据原因来看看如何解决吧。</p><p><strong>解决方法的本质就是不要让toInt隐式转换的时候找到多个隐式方法出现“模棱两可”。</strong></p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h3><p>使用<code>Integer.parseInt(str)</code>替换<code>str.toInt</code>。完整代码代码如下：</p><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">TestDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> str:<span class="type">Int</span> = <span class="string">"20"</span></span><br><span class="line">    println(str)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">implicit</span> <span class="function"><span class="keyword">def</span> <span class="title">strToInt</span></span>(str:<span class="type">String</span>):<span class="type">Int</span>= &#123;</span><br><span class="line">    <span class="type">Integer</span>.parseInt(str)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用<code>Integer.parseInt(str)</code>替换<code>str.toInt</code>，没有使用<code>str.toInt</code>了，隐式转换自然就就没有了。</p><h3 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h3><p>使用<code>new StringOps(str).toInt</code>替换<code>str.toInt</code>。完整代码代码如下：</p><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">TestDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> str:<span class="type">Int</span> = <span class="string">"20"</span></span><br><span class="line">    println(str)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">implicit</span> <span class="function"><span class="keyword">def</span> <span class="title">strToInt</span></span>(str:<span class="type">String</span>):<span class="type">Int</span>= &#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="type">StringOps</span>(str).toInt</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用<code>new StringOps(str).toInt</code>替换<code>str.toInt</code>。这里使用<code>new StringOps(str)</code>显式调用了<code>toInt</code>，所以也没有隐式转换了。</p><h3 id="方案三"><a href="#方案三" class="headerlink" title="方案三"></a>方案三</h3><p>将自己定义的隐式方法<code>implicit def strToInt(str:String):Int</code>的返回值省略，该方法就不能被递归调用了，那这时候<code>str.toInt</code>就只有<code>implicit def augmentString(x: String): StringOps</code>这一个隐式转换方法了，也解决了两个隐式方法的冲突问题。完整代码如下：</p><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">TestDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> str:<span class="type">Int</span> = <span class="string">"20"</span>  <span class="comment">// error</span></span><br><span class="line">    println(str)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">implicit</span> <span class="function"><span class="keyword">def</span> <span class="title">strToInt</span></span>(str:<span class="type">String</span>) = &#123;</span><br><span class="line">    str.toInt</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码第四行<code>val str:Int = &quot;20&quot;</code>编译错误，错误信息如下：</p><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="type">Error</span>:(<span class="number">8</span>, <span class="number">19</span>) <span class="class"><span class="keyword">type</span> <span class="title">mismatch</span></span>;</span><br><span class="line"> found   : <span class="type">String</span>(<span class="string">"20"</span>)</span><br><span class="line"> required: <span class="type">Int</span></span><br><span class="line"> <span class="type">Note</span>: <span class="keyword">implicit</span> method strToInt is not applicable here because it comes after the application point and it lacks an explicit result <span class="class"><span class="keyword">type</span></span></span><br><span class="line"><span class="class">    <span class="title">val</span> <span class="title">str</span></span>:<span class="type">Int</span> = <span class="string">"20"</span></span><br></pre></td></tr></table></figure><p>出现该错误的原因是：</p><blockquote><p>隐式方法没有显式给出返回类型，必须位于应用点之前</p></blockquote><p>所以正确代码如下：</p><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">TestDemo</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">implicit</span> <span class="function"><span class="keyword">def</span> <span class="title">strToInt</span></span>(str:<span class="type">String</span>) = &#123;</span><br><span class="line">    str.toInt</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> str:<span class="type">Int</span> = <span class="string">"20"</span></span><br><span class="line">    println(str)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好了，到这里我们的问题分析及解决方案就结束了，希望对大家有所帮助。</p>]]></content>
      
      
      <categories>
          
          <category> Scala </category>
          
      </categories>
      
      
        <tags>
            
            <tag> scala </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oracle安装和卸载</title>
      <link href="/2018/03/10/Oracle%E5%AE%89%E8%A3%85%E5%92%8C%E5%8D%B8%E8%BD%BD/"/>
      <url>/2018/03/10/Oracle%E5%AE%89%E8%A3%85%E5%92%8C%E5%8D%B8%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<h1 id="Oracle安装和卸载"><a href="#Oracle安装和卸载" class="headerlink" title="Oracle安装和卸载"></a>Oracle安装和卸载</h1><h2 id="Oracle版本说明"><a href="#Oracle版本说明" class="headerlink" title="Oracle版本说明"></a>Oracle版本说明</h2><p>Oracle 9i<br>Oracle 10g<br>Oracle 11g<br>Oracle 12c</p><p>i：i 代表 Internet。8i 版本开启对 Internet 的支持。所以，在版本号之后，添加了标识 i。<br>g：g 代表 Grid 网格。10g 加入了网格计算的功能，因此版本号之后的标识使用了字母g。<br>c：c 代表云(cloud)计算设计。12c 版本表示对云计算的支持。</p><h2 id="Oracle安装"><a href="#Oracle安装" class="headerlink" title="Oracle安装"></a>Oracle安装</h2><ol><li><p>两个.zip文件下载完成后，解压两个压缩包到同一目录（默认是“database”）。</p></li><li><p>双击解压目录下的setup.exe安装oracle（注意：安装文件路径不要使用特殊字符、空格、汉字等）。执行安装程序，会出现一个命令行窗口。</p></li><li><p>命令行窗口小时候，如果出现以下界面：</p><p><img alt="0.jpg" data-src="https://i.loli.net/2019/12/16/pRQrNP8syHDjvBS.jpg" class="lazyload"></p><p>出现这个问题是因为配置文件中配置了对应的系统，所以需要添加自己对应的系统。<br>首先打开解压后的database文件夹，找到stage文件夹，再找到cvu文件夹，进去后打开cvu_prereq.xml文件，在该文件中的CERTIFIED_SYSTEMS标签中添加如下内容：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">OPERATING_SYSTEM</span> <span class="attr">RELEASE</span>=<span class="string">"6.2"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">VERSION</span> <span class="attr">VALUE</span>=<span class="string">"3"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ARCHITECTURE</span> <span class="attr">VALUE</span>=<span class="string">"64-bit"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">NAME</span> <span class="attr">VALUE</span>=<span class="string">"Windows 10"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ENV_VAR_LIST</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ENV_VAR</span> <span class="attr">NAME</span>=<span class="string">"PATH"</span> <span class="attr">MAX_LENGTH</span>=<span class="string">"1023"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ENV_VAR_LIST</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">OPERATING_SYSTEM</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改完成后保存退出，再次点击setup.exe运行就不会出现这个错误了。</p></li><li><p>开始安装<br><img alt="1.jpg" data-src="https://i.loli.net/2019/12/16/jza9GdfpF6BknMu.jpg" class="lazyload"></p><p><img alt="2.jpg" data-src="https://i.loli.net/2019/12/16/KOXfQHAoj5iRZsm.jpg" class="lazyload"></p></li></ol><p>​        <img alt="3.jpg" data-src="https://i.loli.net/2019/12/16/bMKkYPWxU69hHDn.jpg" class="lazyload"></p><p><img alt="4.jpg" data-src="https://i.loli.net/2019/12/16/i5CFNlHKczEAQRg.jpg" class="lazyload"></p><p><img alt="4-1.jpg" data-src="https://i.loli.net/2019/12/16/NKAMr5Z3ByLgVzD.jpg" class="lazyload"></p><p><img alt="4-2.jpg" data-src="https://i.loli.net/2019/12/16/CfMtenBqkVXU4vS.jpg" class="lazyload"></p><p><img alt="5.jpg" data-src="https://i.loli.net/2019/12/16/EFTkZA6sQaw4mqj.jpg" class="lazyload"></p><p><img alt="6.jpg" data-src="https://i.loli.net/2019/12/16/cvMHVqlZw9uf5rg.jpg" class="lazyload"></p><p><img alt="7.jpg" data-src="https://i.loli.net/2019/12/16/YBj39618g52PFGp.jpg" class="lazyload"></p><p><img alt="7-1.jpg" data-src="https://i.loli.net/2019/12/16/wqvpmD3tkcoBx6S.jpg" class="lazyload"></p><p><img alt="7-2.jpg" data-src="https://i.loli.net/2019/12/16/IjraQJVFX5HZuSk.jpg" class="lazyload"></p><p><img alt="7-3.jpg" data-src="https://i.loli.net/2019/12/16/1MQrmJ4n6Wy2D9d.jpg" class="lazyload"></p><p><img alt="7-4.jpg" data-src="https://i.loli.net/2019/12/16/RMyVxrPzDUNwQJE.jpg" class="lazyload"></p><p><img alt="8.jpg" data-src="https://i.loli.net/2019/12/16/NaidTWpsxj5PLol.jpg" class="lazyload"></p><h2 id="Oracle卸载"><a href="#Oracle卸载" class="headerlink" title="Oracle卸载"></a>Oracle卸载</h2><ol><li><p>停止使用 Oracle 的服务</p><p>进入计算机管理，在服务中，找到 oracle 开头的所有服务，右击选择停止。</p></li><li><p>运行卸载 Oracle 数据库程</p><p>在开始菜单中找到 Oracle 安装产品，点击运行 Oracle 自带的卸载程序 Universal Installer工具卸载。</p></li><li><p>删除使用 Oracle 的服务</p><p>开始菜单中，找到 Universal Installer，运行 Oracle Universal Installer，单击卸载产品，在产品清单窗口中，单击全部展开，除了 OraDb11g_home1 外，勾选其他项目，单击删除，根据软件提示单击下一步最终完成卸载。</p></li><li><p>删除注册表中 Oracle 相关项</p><ul><li><p>在 命 令 窗 口 ， 输 入 regedit ， 打 开 注 册 表 ， 依 次 展 开<code>HKEY_LOCAL_MACHINE\SOFTWARE</code>，找到 oracle删除</p></li><li><p>依次展开 <code>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services</code> 中，删除所有oracle 开头的项</p></li><li><p>依 次 展 开<code>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Eventlog\Application</code>，删除<br>所有 oracle 开头的项</p></li><li>扩展删除（以下不是必须的注册表删除项），如果安装不成功也可以把这些删除了<ul><li>在 <code>HKEY_CLASSES_ROOT</code>，删除以 Ora、Oracle、Orcl 或 EnumOra 为前缀的键</li><li>删 除<br><code>HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\MenuOrder\StartMenu\Programs</code> 中所有以 oracle 开头的键</li><li>删 除 <code>HKEY_LOCAL_MACHINE\SOFTWARE\ODBC\ODBCINST.INI</code> 中 除 <code>Microsoft ODBC for Oracle</code>注册表键以外的所有含有 Oracle 的键</li></ul></li></ul></li><li><p>删除 Oracle 环境变量</p><p>右键点击我的电脑—&gt;属性—&gt;高级—&gt;环境变量,删除环境变量 ORACLE_HOME、TNS_ADMIN 等环境变量，删除 PATH 中等环境变量有关 Oracle 的设定的路径信息</p></li><li><p>删除“开始”菜单中 Oracle 目录</p><p>打开资源管理器，在地址栏中输入“%userprofile%\「开始」菜单\程序”回车，删除安装的 Oracle 目录。然后再到地址栏中输入“%allusersprofile%\「开始」菜单\程序”回车，删除安装的 Oracle 目录</p></li><li><p>重新启动计算机</p></li><li><p>删除 Program Files\Oracle 目录</p><p>如果 Program Files\Oracle 目录存在，则删除 Program Files\Oracle 目录。</p></li><li><p>删除 Oracle 安装目录</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux学习-03</title>
      <link href="/2018/03/09/Linux%E5%AD%A6%E4%B9%A0-03/"/>
      <url>/2018/03/09/Linux%E5%AD%A6%E4%B9%A0-03/</url>
      
        <content type="html"><![CDATA[<h2 id="查询命令"><a href="#查询命令" class="headerlink" title="查询命令"></a>查询命令</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">which 命令   #查询的命令要求是配置了环境变量的。</span><br><span class="line">whereis  命令  #查询命令、源码文件、帮助手册</span><br></pre></td></tr></table></figure><h2 id="查询文件"><a href="#查询文件" class="headerlink" title="查询文件"></a>查询文件</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">locate 文件名  #locate本地维护了一个数据库，查询的时候根据索引进行文件查找</span><br><span class="line">updatedb  #更新数据库</span><br><span class="line">locate的数据库每天更新一次，为了确保能够准确的查询出文件，建议查询前先更新数据库</span><br><span class="line">----------------------------------</span><br><span class="line">find 根据目录的层次结构进行搜索</span><br><span class="line">find / -name java.txt  #从/开始查找名字是java.txt的文件</span><br><span class="line">find /opt/ -size +100M #从/opt目录中查找大小大于100M的文件</span><br><span class="line">find / -user hadoop #从/开始查找属于hadoop用户的文件</span><br><span class="line">find / -atime -5 #从/开始查找访问时间是5天前的文件</span><br></pre></td></tr></table></figure><h2 id="过滤"><a href="#过滤" class="headerlink" title="过滤"></a>过滤</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">grep [OPTION]... PATTERN [FILE]...</span><br><span class="line">在遇到pattern的地方，*就是正则符号 </span><br><span class="line">---------------------------------------------</span><br><span class="line">-n: #过滤后的内容显示行号</span><br><span class="line">[root@hadoop10 opt]# grep -n 'hello' word.txt </span><br><span class="line">1:hello java</span><br><span class="line"></span><br><span class="line">-o: #仅显示匹配到的内容</span><br><span class="line">[root@hadoop10 opt]# grep -o 'hello' word.txt  </span><br><span class="line">hello</span><br><span class="line"></span><br><span class="line">-i #忽略大小写</span><br><span class="line">[root@hadoop10 opt]# grep -io 'HELLO' word.txt </span><br><span class="line">hello</span><br><span class="line"></span><br><span class="line">-v # 显示未匹配到的内容</span><br><span class="line">[root@hadoop10 opt]# grep -iv 'HELLO' word.txt  </span><br><span class="line">hadoop linux</span><br><span class="line"></span><br><span class="line">grep -E  ===&gt; egrep</span><br></pre></td></tr></table></figure><h2 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">语法：</span><br><span class="line">  命令1 | 命令2 # 命令1的输出是命令2的输入</span><br><span class="line"></span><br><span class="line">[root@hadoop10 opt]# ll | grep '.*\.txt'</span><br><span class="line">.* #表示零个或多个任意字符</span><br><span class="line">\. #表示转义</span><br><span class="line"></span><br><span class="line">[root@hadoop10 opt]# ll | grep '.\+txt'  </span><br><span class="line">\+ #表示将实体符号+转义成正则的数量词</span><br><span class="line"></span><br><span class="line">在遇到pattern的地方，*就是正则符号 </span><br><span class="line"></span><br><span class="line">注意：</span><br><span class="line">[root@hadoop10 opt]# rm -rf *.txt</span><br><span class="line">此时的*就是通配符</span><br><span class="line"></span><br><span class="line">echo 123456 | passwd --stdin java</span><br></pre></td></tr></table></figure><h2 id="追加和重定向-覆盖"><a href="#追加和重定向-覆盖" class="headerlink" title="追加和重定向(覆盖)"></a>追加和重定向(覆盖)</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt; 追加</span></span><br><span class="line">[root@hadoop10 opt]# echo "hello123" &gt;&gt; java.txt</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">重定向(覆盖)</span></span><br><span class="line"></span><br><span class="line">[root@hadoop10 opt]# cat java.txt </span><br><span class="line">java123</span><br><span class="line">hello123</span><br><span class="line">[root@hadoop10 opt]# echo "ssssb" &gt; java.txt </span><br><span class="line">[root@hadoop10 opt]# cat java.txt </span><br><span class="line">ssssb</span><br></pre></td></tr></table></figure><h2 id="文件的权限UGO"><a href="#文件的权限UGO" class="headerlink" title="文件的权限UGO"></a>文件的权限UGO</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"> rwx  rwx rwx</span><br><span class="line">所属用户的权限   所属用户组的权限     其他用户的权限</span><br><span class="line"></span><br><span class="line">修改文件的权限：</span><br><span class="line">u: user</span><br><span class="line">g: group</span><br><span class="line">o: other</span><br><span class="line">a: all</span><br><span class="line">+ 增加权限</span><br><span class="line">- 取消权限</span><br><span class="line">chmod u+x  文件/目录</span><br><span class="line"></span><br><span class="line">文件权限的数字表示法：</span><br><span class="line">rwx</span><br><span class="line">000   -- 0</span><br><span class="line">111   -- 7</span><br><span class="line">4 2 1 </span><br><span class="line"></span><br><span class="line">chmod 764 11.txt</span><br><span class="line"></span><br><span class="line">注意：---权限是针对是否可以操作文件/目录的内容而言的</span><br><span class="line">针对文件：</span><br><span class="line">  r: 表示可以查看文件的内容</span><br><span class="line">  w: 表示可以编辑文件内容</span><br><span class="line">  x: 文件可以被执行。一般用于脚本</span><br><span class="line"> </span><br><span class="line"> 针对文件夹：</span><br><span class="line">  r: 表示可以查看目录下的内容。比如可以使用ls</span><br><span class="line">  w：表示可以在目录中创建文件及文件夹</span><br><span class="line">  x: 表示的可以进入该目录</span><br></pre></td></tr></table></figure><h2 id="更改文件的用户及用户组"><a href="#更改文件的用户及用户组" class="headerlink" title="更改文件的用户及用户组"></a>更改文件的用户及用户组</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chown 用户:用户组 文件  #修改文件的所属用户及组</span><br></pre></td></tr></table></figure><h2 id="打包和压缩"><a href="#打包和压缩" class="headerlink" title="打包和压缩"></a>打包和压缩</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">打包：</span><br><span class="line">   tar -cvf xx.tar 1.txt 2.txt</span><br><span class="line">   c: create</span><br><span class="line">   v: 显示打包过程信息</span><br><span class="line">   f: 文件</span><br><span class="line"> </span><br><span class="line">解包:</span><br><span class="line">  tar -xvf xx.tar</span><br><span class="line">  x: 解包</span><br><span class="line">  </span><br><span class="line">---------------------------------------</span><br><span class="line">压缩：</span><br><span class="line">   zip aa.zip xx.tar</span><br><span class="line">解压：</span><br><span class="line">  unzip aa.zip</span><br><span class="line">  </span><br><span class="line"> bzip2 文件</span><br><span class="line"> gzip 文件</span><br><span class="line"> gunzip xx.tar.gz  解压</span><br><span class="line"> </span><br><span class="line">打包并压缩：</span><br><span class="line"> [root@hadoop10 data]# tar -zcvf xx.tar.gz 1.txt 2.txt 3.txt </span><br><span class="line">解压并解包：</span><br><span class="line">[root@hadoop10 data]# tar -zxvf xx.tar.gz </span><br><span class="line"></span><br><span class="line">tar -zxvf jdk-8u144-linux-x64.tar.gz -C apps/</span><br><span class="line">-C:指定解压到哪里</span><br></pre></td></tr></table></figure><h2 id="软连接"><a href="#软连接" class="headerlink" title="软连接"></a>软连接</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@hadoop10 apps]# ln -s jdk1.8.0_144/ jdk</span><br><span class="line">jdk -&gt; jdk1.8.0_144/</span><br></pre></td></tr></table></figure><h2 id="rpm包的安装"><a href="#rpm包的安装" class="headerlink" title="rpm包的安装"></a>rpm包的安装</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">安装</span></span><br><span class="line">    rpm -ivh xx.rpm</span><br><span class="line">    -i:install 安装</span><br><span class="line">    -v:显示安装过程</span><br><span class="line">    -h:显示安装进度</span><br><span class="line">    </span><br><span class="line"><span class="meta">#</span><span class="bash">查询安装程序的package信息</span></span><br><span class="line">    -q  --query</span><br><span class="line">-f, --file              query/verify package(s) owning file</span><br><span class="line"></span><br><span class="line">[root@hadoop10 bin]# rpm -qf /usr/java</span><br><span class="line">    filesystem-2.4.30-3.el6.x86_64</span><br><span class="line">    jdk1.8.0_131-1.8.0_131-fcs.x86_64</span><br><span class="line">   </span><br><span class="line"><span class="meta">#</span><span class="bash">卸载</span></span><br><span class="line">-e, --erase=&lt;package&gt;+           erase (uninstall) package</span><br><span class="line">[root@hadoop10 bin]# rpm -ev  jdk1.8.0_131-1.8.0_131-fcs.x86_64</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查询所有安装的package信息</span></span><br><span class="line">[root@hadoop10 bin]# rpm -qa | grep -i mysql</span><br><span class="line"> mysql-libs-5.1.71-1.el6.x86_64</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"> 更改安装目录</span></span><br><span class="line">[root@hadoop10 opt]# rpm -ivh --prefix=/opt/java/ jdk-8u131-linux-x64.rpm</span><br><span class="line"></span><br><span class="line">rpm在安装或卸载的时候如果有其他的依赖包，需要先卸载依赖或者添加一个选项 --nodeps</span><br></pre></td></tr></table></figure><h2 id="yum"><a href="#yum" class="headerlink" title="yum"></a>yum</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">使用yum的前提是可以上网</span><br><span class="line">rpm相当于下载到本地的jar</span><br><span class="line">yum相当于maven</span><br><span class="line">yum 也提供了一个库，里面存放了rpm</span><br><span class="line">如果不能上外网，是可以搭建本地yum源。</span><br></pre></td></tr></table></figure><h3 id="更改yum源"><a href="#更改yum源" class="headerlink" title="更改yum源"></a>更改yum源</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1、进入到/etc/yum.repos.d/目录下，备份之前的CentOS-Base.repo地址。</span><br><span class="line">cd /etc/yum.repos.d/</span><br><span class="line">mv CentOS-Base.repo CentOS-Base.repo.bak</span><br><span class="line">2、下载阿里云yum源</span><br><span class="line">wget -O CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-6.repo</span><br><span class="line"></span><br><span class="line">3、将服务器上的软件包信息缓存到本地,以提高搜索安装软件的速度</span><br><span class="line">yum makecache</span><br></pre></td></tr></table></figure><h3 id="yum-命令"><a href="#yum-命令" class="headerlink" title="yum 命令"></a>yum 命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum list: 列出yum中可以安装的package</span><br><span class="line">yum list installed:查询已安装的程序</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Scala </category>
          
      </categories>
      
      
        <tags>
            
            <tag> scala </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux学习-02</title>
      <link href="/2018/03/08/Linux%E5%AD%A6%E4%B9%A0-02/"/>
      <url>/2018/03/08/Linux%E5%AD%A6%E4%B9%A0-02/</url>
      
        <content type="html"><![CDATA[<h2 id="Vim编辑器"><a href="#Vim编辑器" class="headerlink" title="Vim编辑器"></a>Vim编辑器</h2><p>vim 是 vi 的增强版</p><p>ctrl+s 锁定shell窗口</p><p>ctrl+q 解锁shell窗口</p><p><img alt="1604990135712.png" data-src="https://i.loli.net/2020/11/10/EtaezGNJrdy5x6f.png" class="lazyload"></p><h3 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">d: 删除  y：复制</span><br><span class="line">dd  删除当前行 -- 剪切</span><br><span class="line">dG 从当前行删除到行尾</span><br><span class="line">dgg  从当前行删除到行首</span><br><span class="line">ndd  从当前光标行开始删除n行</span><br><span class="line">D    从光标开始删除到行尾</span><br><span class="line">d0   从光标开始删除到行首</span><br><span class="line">yy  复制当前行</span><br><span class="line">nyy  复制n行</span><br><span class="line">p  粘贴到光标位置</span><br><span class="line">u  (undo) 撤销</span><br><span class="line">ctrl+r  撤销还原</span><br><span class="line">gg  回到行首</span><br><span class="line">ngg 回到第n行</span><br><span class="line">shift + g  回到行尾</span><br><span class="line">ygg   从当前行复制到行首</span><br><span class="line">yG    从当前行复制到行尾</span><br><span class="line">0 或者 ^      回到当前行的开始位置</span><br><span class="line"><span class="meta">$</span><span class="bash">     回到当前行的尾部位置</span></span><br><span class="line">/搜索的文字   n 表示下一个  N 向上查找</span><br><span class="line">/^字符串    查找以什么字符串开头的</span><br><span class="line">/字符串$    查找以什么字符串结尾的</span><br><span class="line">   如果替换的时候需要忽略大小写，需要到末行模式设置set noic</span><br><span class="line">r  替换单个字符</span><br><span class="line">shift+r  进入替换模式  替换光标后的多个字符</span><br><span class="line">x 从光标位置开始逐一删除后面的内容</span><br><span class="line">shift+x 从光标位置开始逐一删除前面的内容</span><br><span class="line">替换模式 ---&gt; esc ---&gt; 命令模式</span><br></pre></td></tr></table></figure><h3 id="末行模式（底部扩展命令模式）"><a href="#末行模式（底部扩展命令模式）" class="headerlink" title="末行模式（底部扩展命令模式）"></a>末行模式（底部扩展命令模式）</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">替换语法：</span><br><span class="line">:[范围] s/old/new/[选项]</span><br><span class="line">-------------------------------</span><br><span class="line">:s/root/abc/  将光标所在行的第一个root换成abc</span><br><span class="line">:2,2 s/root/abc/   将第二行的第一个root换成abc   </span><br><span class="line">:1,2 s/root/abc/g  将第一行到二行的所有的root换成abc   </span><br><span class="line">:% s/root/abc/g    将所有行的所有root换成abc</span><br><span class="line">:% s/.$//     将所有行的最后一个字符替换成空</span><br><span class="line">备注：上面的/是可以用其他的符号替换的。都遇见匹配的内容有/的时候就可以用其他符号</span><br><span class="line">比如：</span><br><span class="line">:s #/dev/null#abc#   将光标所在行的第一个/dev/null替换成abc</span><br><span class="line">:% s/.*/&amp;#/   在所有行的末尾添加#</span><br><span class="line">.* 表示一行的所有内容</span><br><span class="line">&amp; 表示的就是匹配到的内容</span><br><span class="line">--------------------------------</span><br><span class="line">:set nu  显示行号</span><br><span class="line">:set nonu 取消行号</span><br><span class="line">:set ic (ignore case) 忽略大小写</span><br><span class="line">:set noic 区分大小写</span><br><span class="line">:set list 查字符串中的符号  比如可以看换行符 空格符  制表符</span><br><span class="line">:set nolist 取消显示符号</span><br><span class="line">:set ai 设置缩进</span><br><span class="line">:set noai 取消缩进</span><br></pre></td></tr></table></figure><h3 id="可视化模式（visual）"><a href="#可视化模式（visual）" class="headerlink" title="可视化模式（visual）"></a>可视化模式（visual）</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ctrl+v 可视化块</span><br><span class="line">shfit+v 可视化行</span><br><span class="line"></span><br><span class="line">shfit + &gt; 向右缩进</span><br><span class="line">shfit + &lt; 向左缩进</span><br><span class="line"></span><br><span class="line">在多行前添加内容</span><br><span class="line">先选中内容 --&gt; I ---&gt; 输入添加的内容 --&gt;esc</span><br><span class="line">x 和 d 删除选中内容</span><br><span class="line">y 是复制</span><br></pre></td></tr></table></figure><h2 id="Linux文件类型"><a href="#Linux文件类型" class="headerlink" title="Linux文件类型"></a>Linux文件类型</h2><p>在LInux中一切皆文件。Linux中的文件是没有扩展名的。Linux文件如果加上扩展名也仅仅是告诉开发人员看的。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">d：文件夹</span><br><span class="line">-：文件</span><br><span class="line">l：链接文件</span><br><span class="line">b：块设备文件  硬盘  U盘</span><br><span class="line">c: 字符设备文件  打印机  终端</span><br><span class="line">s：socket文件</span><br></pre></td></tr></table></figure><p>可以使用<code>file</code>命名查看文件和目录类型</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@hadoop10 dev]# file vcs</span><br><span class="line">vcs: character special</span><br></pre></td></tr></table></figure><h2 id="Linux文件的时间"><a href="#Linux文件的时间" class="headerlink" title="Linux文件的时间"></a>Linux文件的时间</h2><p>Access Time（atime）: 访问时间</p><p>访问时间要发生变化需要满足以下任意一个条件：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、有数据写入</span><br><span class="line">2、本次访问时间和上一次访问时间间隔达到86400秒</span><br></pre></td></tr></table></figure><p>Modify Time (mtime): 文件内容发生变化的时间</p><p>Change Time (ctime): 文件属性发生变化的时间</p><h2 id="查看文件的属性"><a href="#查看文件的属性" class="headerlink" title="查看文件的属性"></a>查看文件的属性</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">stat 文件</span><br><span class="line"></span><br><span class="line">[root@hadoop10 opt]# stat 2.txt </span><br><span class="line">  File: `2.txt'</span><br><span class="line">  Size: 51      Blocks: 8      IO Block: 4096      regular file</span><br><span class="line">Device: fd00h/64768d    Inode: 267517      Links: 1</span><br><span class="line">Access: (0700/-rwx------)  Uid: (    0/    root)   Gid: (    0/    root)</span><br><span class="line">Access: 2020-07-30 16:45:31.291999243 +0800</span><br><span class="line">Modify: 2020-07-30 16:45:31.291999243 +0800</span><br><span class="line">Change: 2020-07-30 16:45:31.362999191 +0800</span><br></pre></td></tr></table></figure><h2 id="复制和移动"><a href="#复制和移动" class="headerlink" title="复制和移动"></a>复制和移动</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp 文件  指定的文件路径  #拷贝文件到指定路径</span><br><span class="line">mv 文件/目录  指定的路径  #剪切文件/目录到指定路径  可以重命名文件</span><br><span class="line">cp -r 目录  指定的路径  #拷贝目录到指定路径</span><br></pre></td></tr></table></figure><h2 id="查看文件内容"><a href="#查看文件内容" class="headerlink" title="查看文件内容"></a>查看文件内容</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat 文件</span><br><span class="line">head 文件 # 默认查看文件的前10行内容</span><br><span class="line">head -n 2 文件  # 查看文件的前2行内容</span><br><span class="line">tail 文件 # 默认查看文件的最后10行内容</span><br><span class="line">tail -n 2 文件  # 查看文件的最后2行内容</span><br><span class="line">tail -f 文件  # 根据文件的描述符信息监控文件。文件名更改后就监控不到了</span><br><span class="line">tail -F 文件 # 根据文件的名称监控文件，而且还有重试</span><br><span class="line">more 文件   # 分页查看</span><br><span class="line">    空格 下一页</span><br><span class="line">    b   上一页</span><br><span class="line">    回车 下一行</span><br><span class="line">less 文件    # 可以接收命令</span><br><span class="line">    空格 下一页</span><br><span class="line">    b   上一页</span><br><span class="line">    回车 下一行</span><br><span class="line">    q 退出</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux学习-01</title>
      <link href="/2018/03/06/Linux%E5%AD%A6%E4%B9%A0-01/"/>
      <url>/2018/03/06/Linux%E5%AD%A6%E4%B9%A0-01/</url>
      
        <content type="html"><![CDATA[<h2 id="Linux介绍"><a href="#Linux介绍" class="headerlink" title="Linux介绍"></a>Linux介绍</h2><p>​     Linux是一个基于<a href="https://baike.baidu.com/item/POSIX" target="_blank" rel="noopener">POSIX</a>和Unix的多用户、<a href="https://baike.baidu.com/item/多任务/1011764" target="_blank" rel="noopener">多任务</a>、支持<a href="https://baike.baidu.com/item/多线程/1190404" target="_blank" rel="noopener">多线程</a>和多<a href="https://baike.baidu.com/item/CPU" target="_blank" rel="noopener">CPU</a>的操作系统 </p><p><strong>平常说的Linux其实真正指的是Linux的内核。</strong></p><blockquote><p>RedHat：企业版、社区版</p><p>CentOS：就是RedHat的社区版</p><p>Ubuntu: 乌班图</p><p>中标麒麟：Kylin</p></blockquote><h2 id="Linux用户和用户组"><a href="#Linux用户和用户组" class="headerlink" title="Linux用户和用户组"></a>Linux用户和用户组</h2><p>root 是超级管理员。大Boss</p><p>推荐学习网站：<a href="https://man.linuxde.net/" target="_blank" rel="noopener">https://man.linuxde.net/</a></p><h3 id="使用帮助"><a href="#使用帮助" class="headerlink" title="使用帮助"></a>使用帮助</h3><p>1、命令  —help</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">useradd --help</span><br></pre></td></tr></table></figure><p>2、man 命令  （manual）</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">man手册的章节：</span><br><span class="line">1      User Commands</span><br><span class="line">5      File Formats and Conventions</span><br><span class="line">8      System Administration tools and Deamons</span><br></pre></td></tr></table></figure><p>按enter下一页</p><p>按q退出man</p><h3 id="清屏"><a href="#清屏" class="headerlink" title="清屏"></a>清屏</h3><p><code>ctrl + l</code></p><h3 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">useradd 用户名</span><br><span class="line">passwd 用户名</span><br></pre></td></tr></table></figure><p>在linux中添加用户会发生以下事情：</p><p>1、每一个用户都有自己的家的路径，叫做家目录(home)</p><p>每一个用户登录Linux系统都会进入自己家目录</p><p><code>~</code>表示的就是用户的家目录</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/root  这是root的家目录</span><br><span class="line">/home/用户名   普通用户的家目录</span><br></pre></td></tr></table></figure><p>2、每一个用户都有自己的用户组。如果在创建用户的时候没有明确的指定用户组，默认就是使用自己的用户名作为组名。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat /etc/group   # 查看组信息</span><br><span class="line"></span><br><span class="line">cat /etc/passwd  #查看用户信息</span><br></pre></td></tr></table></figure><p>3、有自己的邮件地址</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/var/mail</span><br></pre></td></tr></table></figure><h3 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Usage: userdel [options] LOGIN</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -r, --remove                  remove home directory and mail spool</span><br></pre></td></tr></table></figure><p>删除用户的时候是否需要删除家目录？？？</p><p>   根据删除用户时，用户的数据是否还需要使用。一般情况下删除用户先不要删家目录。</p><h3 id="修改用户"><a href="#修改用户" class="headerlink" title="修改用户"></a>修改用户</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Usage: usermod [options] LOGIN</span><br></pre></td></tr></table></figure><h3 id="添加组"><a href="#添加组" class="headerlink" title="添加组"></a>添加组</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Usage: groupadd [options] GROUP</span><br></pre></td></tr></table></figure><h3 id="删除组"><a href="#删除组" class="headerlink" title="删除组"></a>删除组</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@hadoop10 hadoop]# groupdel baby</span><br><span class="line">groupdel: cannot remove the primary group of user 'xiaoming'</span><br></pre></td></tr></table></figure><h3 id="修改组"><a href="#修改组" class="headerlink" title="修改组"></a>修改组</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Usage: groupmod [options] GROUP</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -g, --gid GID                 change the group ID to GID</span><br><span class="line">  -h, --help                    display this help message and exit</span><br><span class="line">  -n, --new-name NEW_GROUP      change the name to NEW_GROUP</span><br></pre></td></tr></table></figure><h3 id="id"><a href="#id" class="headerlink" title="id"></a>id</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@hadoop10 var]# id</span><br><span class="line"></span><br><span class="line">uid=0(root) gid=0(root) groups=0(root) context=unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023</span><br></pre></td></tr></table></figure><h3 id="whoami"><a href="#whoami" class="headerlink" title="whoami"></a>whoami</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@hadoop10 var]# whoami</span><br><span class="line">root</span><br></pre></td></tr></table></figure><h2 id="Linux文件系统"><a href="#Linux文件系统" class="headerlink" title="Linux文件系统"></a>Linux文件系统</h2><p>在Linux中是没有盘符的概念的。只有目录树层次结构</p><p>根目录就是 <code>/</code></p><p><img alt="image-20200729165157269.png" data-src="https://i.loli.net/2020/11/10/DTSLFaterzUgqlb.png" class="lazyload"></p><p><strong>*</strong> 在Linux中一切皆文件</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/bin：普通用户执行的命令</span><br><span class="line">/sbin: 管理员执行的命令</span><br><span class="line">/etc: 配置文件的目录</span><br><span class="line">/dev/null: 可以理解成回收站 里面永远是空的</span><br><span class="line">/home：普通用户的家目录</span><br><span class="line">/root: root用户的家目录</span><br><span class="line">/opt: 程序安装目录</span><br><span class="line">/proc: 程序的进程信息</span><br><span class="line">/usr/local: 程序安装目录</span><br><span class="line">/var: 存放变化的文件 日志、mail</span><br></pre></td></tr></table></figure><h3 id="文件和目录命令"><a href="#文件和目录命令" class="headerlink" title="文件和目录命令"></a>文件和目录命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd ~   #回到家目录</span><br><span class="line">cd     #回到家目录</span><br><span class="line">cd ..  #返回上级目录</span><br><span class="line">cd .   #当前目录</span><br><span class="line">cd -   #返回上一次的目录</span><br><span class="line">cd 路径 #进入指定路径</span><br><span class="line"></span><br><span class="line">ls: #查看目录下的文件和目录</span><br><span class="line">ls -l #详细信息显示目录下的文件和目录</span><br><span class="line">   -h #人性化</span><br><span class="line">   -a #all 包含隐藏文件</span><br><span class="line">ll 是ls -l的别名</span><br><span class="line"></span><br><span class="line">pwd #查看当前所在目录</span><br><span class="line"></span><br><span class="line">绝对路径：以/开头的</span><br><span class="line"></span><br><span class="line">相对路径：不是以/开头的</span><br></pre></td></tr></table></figure><h3 id="创建文件夹"><a href="#创建文件夹" class="headerlink" title="创建文件夹"></a>创建文件夹</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir --help</span><br><span class="line">Usage: mkdir [OPTION]... DIRECTORY...</span><br><span class="line">  -p, --parents     no error if existing, make parent directories as needed</span><br><span class="line">  -v, --verbose     print a message for each created directory</span><br></pre></td></tr></table></figure><h3 id="删除文件夹"><a href="#删除文件夹" class="headerlink" title="删除文件夹"></a>删除文件夹</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rmdir 目录 #删除空目录</span><br><span class="line">rm -r -f # 递归强制删除目录和文件    谨慎使用</span><br></pre></td></tr></table></figure><h3 id="文件命令"><a href="#文件命令" class="headerlink" title="文件命令"></a>文件命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">touch 文件名 # 创建一个空文件;修改文件的时间</span><br><span class="line">cat 文件 # 查看文件内容</span><br><span class="line"></span><br><span class="line">echo “java”  #输出内容 默认到屏幕</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scala的数据类型</title>
      <link href="/2018/03/01/Scala%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>/2018/03/01/Scala%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>学过Java我们知道Java中的数据类型分为：基本数据类型和引用数据类型。</p><p>Java中的基本数据类型不能当作对象使用，所以Java也不能称之为纯面向对象的语言。</p><p>而今天我们介绍的Scala却是一个纯面向对象的语言，真的很纯哦。。。。</p><p>那么，既然Scala是一个纯面向对象的语言，所以其中的数据类型应该也和对象有关联，接下来我们就来看看Scala中的数据类型。</p><h2 id="Scala的数据类型"><a href="#Scala的数据类型" class="headerlink" title="Scala的数据类型"></a>Scala的数据类型</h2><p>在Scala中，所有的值（包括数值和函数）都有类型，下图展示了Scala中数据类型层次结构：</p><p><img alt="data.jpg" data-src="https://i.loli.net/2019/12/13/9tvcKjRgbFym8Qo.jpg" class="lazyload"></p><h3 id="Any"><a href="#Any" class="headerlink" title="Any"></a>Any</h3><ul><li><p>Any是Scala中所有数据类型的超类型，也叫做<strong><em>顶级类型</em></strong>。</p></li><li><p>Any定义了一些通用的方法：equals、hashCode、toString和getClass等。</p></li><li><p>Any有两个直接的子类：</p><ul><li><p><strong>AnyVal</strong></p></li><li><p><strong>AnyRef</strong></p></li></ul></li></ul><h4 id="AnyVal"><a href="#AnyVal" class="headerlink" title="AnyVal"></a>AnyVal</h4><ul><li><p>AnyVal表示<strong>值类型</strong></p></li><li><p>AnyVal包括9个子类型：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Byte</span><br><span class="line">Short</span><br><span class="line">Int</span><br><span class="line">Long</span><br><span class="line">Char</span><br><span class="line">Float</span><br><span class="line">Double</span><br><span class="line">Boolean</span><br><span class="line">Unit</span><br></pre></td></tr></table></figure><p>其中1-7又被称为<strong><em>数值类型</em></strong>（numeric value types）;</p><p>​        8-9又被称为<strong><em>非数值类型</em></strong>（non-numeric value types）</p></li></ul><p>  <strong>当然，AnyVal的9个子类型还有一种分组方式：</strong></p>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- The &apos;&apos;subrange types&apos;&apos; are [[scala.Byte]], [[scala.Short]], and [[scala.Char]].</span><br><span class="line"></span><br><span class="line">- The &apos;&apos;integer types&apos;&apos; include the subrange types as well as [[scala.Int]] and [[scala.Long]].</span><br><span class="line"></span><br><span class="line">- The &apos;&apos;floating point types&apos;&apos; are [[scala.Float]] and [[scala.Double]].</span><br></pre></td></tr></table></figure><h5 id="Unit"><a href="#Unit" class="headerlink" title="Unit"></a>Unit</h5><p>  ​    Unit是不带任何意义的值类型，它仅有一个实例可以像这样声明：()。</p><p>  ​    因为Scala中所有的函数必须有返回，所以说有时候Unit也是有用的返回类型。</p><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p>  AnyVal的9种类型 就是java中8种基本数据类型 + Unit类型。不过Scala中的Byte、Int等不是基本数据类型，而是可以做对象使用的。比如：</p>  <figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> num:<span class="type">Int</span> = <span class="number">10</span></span><br><span class="line">println(num.toString)<span class="comment">//num可以调用方法</span></span><br></pre></td></tr></table></figure><h4 id="AnyRef"><a href="#AnyRef" class="headerlink" title="AnyRef"></a>AnyRef</h4><ul><li><p>AnyRef代表引用类型。</p></li><li><p>所有非值类型都被定义为引用类型。</p></li><li><p>在Scala中，每个用户自定义的类型都是AnyRef的子类型。</p></li><li><p>如果Scala被应用在Java的运行环境中，AnyRef相当于java.lang.Object。</p></li></ul><h5 id="Nothing"><a href="#Nothing" class="headerlink" title="Nothing"></a>Nothing</h5><ul><li><p>Nothing是所有类型的子类型，也称为<strong><em>底部类型</em></strong></p></li><li><p>没有一个值是Nothing类型的。它的用途之一是给出非正常终止的信号，如抛出异常、程序退出或者一个无限循环（可以理解为它是一个不对值进行定义的表达式的类型，或者是一个不能正常返回的方法）。</p><p><strong><em>比如：</em></strong></p><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">//该方法是用来抛出异常的，不需要返回具体的结果。所以返回值定义成Nothing即可</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">break</span></span>(): <span class="type">Nothing</span> = &#123; <span class="keyword">throw</span> breakException &#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="Null"><a href="#Null" class="headerlink" title="Null"></a>Null</h5><ul><li><p>Null是所有引用类型的子类型（即AnyRef的任意子类型）。</p></li><li><p>它有一个单例值由关键字null所定义。</p></li><li><p>Null主要是使得Scala满足和其他JVM语言的互操作性，但是几乎不应该在Scala代码中使用。</p><p><strong><em>比如：</em></strong></p><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> </span>&#123;</span><br><span class="line">  <span class="comment">//在类型定义的属性，初始化的时候就不推荐使用null,而是用_</span></span><br><span class="line">  <span class="keyword">var</span> name:<span class="type">String</span>=_</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Scala </category>
          
      </categories>
      
      
        <tags>
            
            <tag> scala </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
