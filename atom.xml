<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>木子李</title>
  
  <subtitle>JUST DO IT</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://lg118.github.io/"/>
  <updated>2019-12-16T03:38:19.205Z</updated>
  <id>https://lg118.github.io/</id>
  
  <author>
    <name>木子李</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Oracle安装和卸载</title>
    <link href="https://lg118.github.io/2018/03/10/Oracle%E5%AE%89%E8%A3%85%E5%92%8C%E5%8D%B8%E8%BD%BD/"/>
    <id>https://lg118.github.io/2018/03/10/Oracle%E5%AE%89%E8%A3%85%E5%92%8C%E5%8D%B8%E8%BD%BD/</id>
    <published>2018-03-09T16:00:00.000Z</published>
    <updated>2019-12-16T03:38:19.205Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Oracle安装和卸载"><a href="#Oracle安装和卸载" class="headerlink" title="Oracle安装和卸载"></a>Oracle安装和卸载</h1><h2 id="Oracle版本说明"><a href="#Oracle版本说明" class="headerlink" title="Oracle版本说明"></a>Oracle版本说明</h2><p>Oracle 9i<br>Oracle 10g<br>Oracle 11g<br>Oracle 12c</p><p>i：i 代表 Internet。8i 版本开启对 Internet 的支持。所以，在版本号之后，添加了标识 i。<br>g：g 代表 Grid 网格。10g 加入了网格计算的功能，因此版本号之后的标识使用了字母g。<br>c：c 代表云(cloud)计算设计。12c 版本表示对云计算的支持。</p><h2 id="Oracle安装"><a href="#Oracle安装" class="headerlink" title="Oracle安装"></a>Oracle安装</h2><ol><li><p>两个.zip文件下载完成后，解压两个压缩包到同一目录（默认是“database”）。</p></li><li><p>双击解压目录下的setup.exe安装oracle（注意：安装文件路径不要使用特殊字符、空格、汉字等）。执行安装程序，会出现一个命令行窗口。</p></li><li><p>命令行窗口小时候，如果出现以下界面：</p><p><img alt="0.jpg" data-src="https://i.loli.net/2019/12/16/pRQrNP8syHDjvBS.jpg" class="lazyload"></p><p>出现这个问题是因为配置文件中配置了对应的系统，所以需要添加自己对应的系统。<br>首先打开解压后的database文件夹，找到stage文件夹，再找到cvu文件夹，进去后打开cvu_prereq.xml文件，在该文件中的CERTIFIED_SYSTEMS标签中添加如下内容：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">OPERATING_SYSTEM</span> <span class="attr">RELEASE</span>=<span class="string">"6.2"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">VERSION</span> <span class="attr">VALUE</span>=<span class="string">"3"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ARCHITECTURE</span> <span class="attr">VALUE</span>=<span class="string">"64-bit"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">NAME</span> <span class="attr">VALUE</span>=<span class="string">"Windows 10"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ENV_VAR_LIST</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ENV_VAR</span> <span class="attr">NAME</span>=<span class="string">"PATH"</span> <span class="attr">MAX_LENGTH</span>=<span class="string">"1023"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ENV_VAR_LIST</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">OPERATING_SYSTEM</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改完成后保存退出，再次点击setup.exe运行就不会出现这个错误了。</p></li><li><p>开始安装<br><img alt="1.jpg" data-src="https://i.loli.net/2019/12/16/jza9GdfpF6BknMu.jpg" class="lazyload"></p><p><img alt="2.jpg" data-src="https://i.loli.net/2019/12/16/KOXfQHAoj5iRZsm.jpg" class="lazyload"></p></li></ol><p>​        <img alt="3.jpg" data-src="https://i.loli.net/2019/12/16/bMKkYPWxU69hHDn.jpg" class="lazyload"></p><p><img alt="4.jpg" data-src="https://i.loli.net/2019/12/16/i5CFNlHKczEAQRg.jpg" class="lazyload"></p><p><img alt="4-1.jpg" data-src="https://i.loli.net/2019/12/16/NKAMr5Z3ByLgVzD.jpg" class="lazyload"></p><p><img alt="4-2.jpg" data-src="https://i.loli.net/2019/12/16/CfMtenBqkVXU4vS.jpg" class="lazyload"></p><p><img alt="5.jpg" data-src="https://i.loli.net/2019/12/16/EFTkZA6sQaw4mqj.jpg" class="lazyload"></p><p><img alt="6.jpg" data-src="https://i.loli.net/2019/12/16/cvMHVqlZw9uf5rg.jpg" class="lazyload"></p><p><img alt="7.jpg" data-src="https://i.loli.net/2019/12/16/YBj39618g52PFGp.jpg" class="lazyload"></p><p><img alt="7-1.jpg" data-src="https://i.loli.net/2019/12/16/wqvpmD3tkcoBx6S.jpg" class="lazyload"></p><p><img alt="7-2.jpg" data-src="https://i.loli.net/2019/12/16/IjraQJVFX5HZuSk.jpg" class="lazyload"></p><p><img alt="7-3.jpg" data-src="https://i.loli.net/2019/12/16/1MQrmJ4n6Wy2D9d.jpg" class="lazyload"></p><p><img alt="7-4.jpg" data-src="https://i.loli.net/2019/12/16/RMyVxrPzDUNwQJE.jpg" class="lazyload"></p><p><img alt="8.jpg" data-src="https://i.loli.net/2019/12/16/NaidTWpsxj5PLol.jpg" class="lazyload"></p><h2 id="Oracle卸载"><a href="#Oracle卸载" class="headerlink" title="Oracle卸载"></a>Oracle卸载</h2><ol><li><p>停止使用 Oracle 的服务</p><p>进入计算机管理，在服务中，找到 oracle 开头的所有服务，右击选择停止。</p></li><li><p>运行卸载 Oracle 数据库程</p><p>在开始菜单中找到 Oracle 安装产品，点击运行 Oracle 自带的卸载程序 Universal Installer工具卸载。</p></li><li><p>删除使用 Oracle 的服务</p><p>开始菜单中，找到 Universal Installer，运行 Oracle Universal Installer，单击卸载产品，在产品清单窗口中，单击全部展开，除了 OraDb11g_home1 外，勾选其他项目，单击删除，根据软件提示单击下一步最终完成卸载。</p></li><li><p>删除注册表中 Oracle 相关项</p><ul><li><p>在 命 令 窗 口 ， 输 入 regedit ， 打 开 注 册 表 ， 依 次 展 开<code>HKEY_LOCAL_MACHINE\SOFTWARE</code>，找到 oracle删除</p></li><li><p>依次展开 <code>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services</code> 中，删除所有oracle 开头的项</p></li><li><p>依 次 展 开<code>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Eventlog\Application</code>，删除<br>所有 oracle 开头的项</p></li><li>扩展删除（以下不是必须的注册表删除项），如果安装不成功也可以把这些删除了<ul><li>在 <code>HKEY_CLASSES_ROOT</code>，删除以 Ora、Oracle、Orcl 或 EnumOra 为前缀的键</li><li>删 除<br><code>HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\MenuOrder\StartMenu\Programs</code> 中所有以 oracle 开头的键</li><li>删 除 <code>HKEY_LOCAL_MACHINE\SOFTWARE\ODBC\ODBCINST.INI</code> 中 除 <code>Microsoft ODBC for Oracle</code>注册表键以外的所有含有 Oracle 的键</li></ul></li></ul></li><li><p>删除 Oracle 环境变量</p><p>右键点击我的电脑—&gt;属性—&gt;高级—&gt;环境变量,删除环境变量 ORACLE_HOME、TNS_ADMIN 等环境变量，删除 PATH 中等环境变量有关 Oracle 的设定的路径信息</p></li><li><p>删除“开始”菜单中 Oracle 目录</p><p>打开资源管理器，在地址栏中输入“%userprofile%\「开始」菜单\程序”回车，删除安装的 Oracle 目录。然后再到地址栏中输入“%allusersprofile%\「开始」菜单\程序”回车，删除安装的 Oracle 目录</p></li><li><p>重新启动计算机</p></li><li><p>删除 Program Files\Oracle 目录</p><p>如果 Program Files\Oracle 目录存在，则删除 Program Files\Oracle 目录。</p></li><li><p>删除 Oracle 安装目录</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Oracle安装和卸载&quot;&gt;&lt;a href=&quot;#Oracle安装和卸载&quot; class=&quot;headerlink&quot; title=&quot;Oracle安装和卸载&quot;&gt;&lt;/a&gt;Oracle安装和卸载&lt;/h1&gt;&lt;h2 id=&quot;Oracle版本说明&quot;&gt;&lt;a href=&quot;#Oracle版
      
    
    </summary>
    
    
      <category term="数据库" scheme="https://lg118.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="Oracle" scheme="https://lg118.github.io/tags/Oracle/"/>
    
  </entry>
  
  <entry>
    <title>Scala的数据类型</title>
    <link href="https://lg118.github.io/2018/03/01/Scala%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>https://lg118.github.io/2018/03/01/Scala%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</id>
    <published>2018-02-28T16:00:00.000Z</published>
    <updated>2019-12-16T05:35:20.896Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>学过Java我们知道Java中的数据类型分为：基本数据类型和引用数据类型。</p><p>Java中的基本数据类型不能当作对象使用，所以Java也不能称之为纯面向对象的语言。</p><p>而今天我们介绍的Scala却是一个纯面向对象的语言，真的很纯哦。。。。</p><p>那么，既然Scala是一个纯面向对象的语言，所以其中的数据类型应该也和对象有关联，接下来我们就来看看Scala中的数据类型。</p><h2 id="Scala的数据类型"><a href="#Scala的数据类型" class="headerlink" title="Scala的数据类型"></a>Scala的数据类型</h2><p>在Scala中，所有的值（包括数值和函数）都有类型，下图展示了Scala中数据类型层次结构：</p><p><img alt="data.jpg" data-src="https://i.loli.net/2019/12/13/9tvcKjRgbFym8Qo.jpg" class="lazyload"></p><h3 id="Any"><a href="#Any" class="headerlink" title="Any"></a>Any</h3><ul><li><p>Any是Scala中所有数据类型的超类型，也叫做<strong><em>顶级类型</em></strong>。</p></li><li><p>Any定义了一些通用的方法：equals、hashCode、toString和getClass等。</p></li><li><p>Any有两个直接的子类：</p><ul><li><p><strong>AnyVal</strong></p></li><li><p><strong>AnyRef</strong></p></li></ul></li></ul><h4 id="AnyVal"><a href="#AnyVal" class="headerlink" title="AnyVal"></a>AnyVal</h4><ul><li><p>AnyVal表示<strong>值类型</strong></p></li><li><p>AnyVal包括9个子类型：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">  Byte</span><br><span class="line">  Short</span><br><span class="line">  Int</span><br><span class="line">  Long</span><br><span class="line">  Char</span><br><span class="line">  Float</span><br><span class="line">  Double</span><br><span class="line">  Boolean</span><br><span class="line">Unit</span><br></pre></td></tr></table></figure><p>其中1-7又被称为<strong><em>数值类型</em></strong>（numeric value types）;</p><p>​        8-9又被称为<strong><em>非数值类型</em></strong>（non-numeric value types）</p></li></ul><p>  <strong>当然，AnyVal的9个子类型还有一种分组方式：</strong></p>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- The &apos;&apos;subrange types&apos;&apos; are [[scala.Byte]], [[scala.Short]], and [[scala.Char]].</span><br><span class="line"></span><br><span class="line">- The &apos;&apos;integer types&apos;&apos; include the subrange types as well as [[scala.Int]] and [[scala.Long]].</span><br><span class="line"></span><br><span class="line">- The &apos;&apos;floating point types&apos;&apos; are [[scala.Float]] and [[scala.Double]].</span><br></pre></td></tr></table></figure><h5 id="Unit"><a href="#Unit" class="headerlink" title="Unit"></a>Unit</h5><p>  ​    Unit是不带任何意义的值类型，它仅有一个实例可以像这样声明：()。</p><p>  ​    因为Scala中所有的函数必须有返回，所以说有时候Unit也是有用的返回类型。</p><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p>  AnyVal的9种类型 就是java中8种基本数据类型 + Unit类型。不过Scala中的Byte、Int等不是基本数据类型，而是可以做对象使用的。比如：</p>  <figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> num:<span class="type">Int</span> = <span class="number">10</span></span><br><span class="line">println(num.toString)<span class="comment">//num可以调用方法</span></span><br></pre></td></tr></table></figure><h4 id="AnyRef"><a href="#AnyRef" class="headerlink" title="AnyRef"></a>AnyRef</h4><ul><li><p>AnyRef代表引用类型。</p></li><li><p>所有非值类型都被定义为引用类型。</p></li><li><p>在Scala中，每个用户自定义的类型都是AnyRef的子类型。</p></li><li><p>如果Scala被应用在Java的运行环境中，AnyRef相当于java.lang.Object。</p></li></ul><h5 id="Nothing"><a href="#Nothing" class="headerlink" title="Nothing"></a>Nothing</h5><ul><li><p>Nothing是所有类型的子类型，也称为<strong><em>底部类型</em></strong></p></li><li><p>没有一个值是Nothing类型的。它的用途之一是给出非正常终止的信号，如抛出异常、程序退出或者一个无限循环（可以理解为它是一个不对值进行定义的表达式的类型，或者是一个不能正常返回的方法）。</p><p><strong><em>比如：</em></strong></p><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">//该方法是用来抛出异常的，不需要返回具体的结果。所以返回值定义成Nothing即可</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">break</span></span>(): <span class="type">Nothing</span> = &#123; <span class="keyword">throw</span> breakException &#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="Null"><a href="#Null" class="headerlink" title="Null"></a>Null</h5><ul><li><p>Null是所有引用类型的子类型（即AnyRef的任意子类型）。</p></li><li><p>它有一个单例值由关键字null所定义。</p></li><li><p>Null主要是使得Scala满足和其他JVM语言的互操作性，但是几乎不应该在Scala代码中使用。</p><p><strong><em>比如：</em></strong></p><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> </span>&#123;</span><br><span class="line">  <span class="comment">//在类型定义的属性，初始化的时候就不推荐使用null,而是用_</span></span><br><span class="line">  <span class="keyword">var</span> name:<span class="type">String</span>=_</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;学过Java我们知道Java中的数据类型分为：基本数据类型和引用数据类型。&lt;/p&gt;
&lt;p&gt;Java中的基本数据类型不能当作对象使用，所以Ja
      
    
    </summary>
    
    
      <category term="Scala" scheme="https://lg118.github.io/categories/Scala/"/>
    
    
      <category term="scala" scheme="https://lg118.github.io/tags/scala/"/>
    
  </entry>
  
</feed>
