<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>木子李</title>
  
  <subtitle>JUST DO IT</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://lg118.github.io/"/>
  <updated>2019-11-22T06:01:22.283Z</updated>
  <id>https://lg118.github.io/</id>
  
  <author>
    <name>木子李</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="https://lg118.github.io/2019/11/22/hello-world/"/>
    <id>https://lg118.github.io/2019/11/22/hello-world/</id>
    <published>2019-11-22T06:01:22.282Z</published>
    <updated>2019-11-22T06:01:22.283Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Scala的数据类型</title>
    <link href="https://lg118.github.io/2018/01/03/Scala%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>https://lg118.github.io/2018/01/03/Scala%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</id>
    <published>2018-01-02T16:00:00.000Z</published>
    <updated>2019-12-13T09:53:16.855Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>学过Java我们知道Java中的数据类型分为：基本数据类型和引用数据类型。</p><p>Java中的基本数据类型不能当作对象使用，所以Java也不能称之为纯面向对象的语言。</p><p>而今天我们介绍的Scala却是一个纯面向对象的语言，真的很纯哦。。。。</p><p>那么，既然Scala是一个纯面向对象的语言，所以其中的数据类型应该也和对象有关联，接下来我们就来看看Scala中的数据类型。</p><h2 id="Scala的数据类型"><a href="#Scala的数据类型" class="headerlink" title="Scala的数据类型"></a>Scala的数据类型</h2><p>在Scala中，所有的值（包括数值和函数）都有类型，下图展示了Scala中数据类型层次结构：</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">![<span class="string">data.jpg</span>](<span class="link">https://i.loli.net/2019/12/13/9tvcKjRgbFym8Qo.jpg</span>)</span><br></pre></td></tr></table></figure><h3 id="Any"><a href="#Any" class="headerlink" title="Any"></a>Any</h3><ul><li><p>Any是Scala中所有数据类型的超类型，也叫做<strong><em>顶级类型</em></strong>。</p></li><li><p>Any定义了一些通用的方法：equals、hashCode、toString和getClass等。</p></li><li><p>Any有两个直接的子类：</p><ul><li><p><strong>AnyVal</strong></p></li><li><p><strong>AnyRef</strong></p></li></ul></li></ul><h4 id="AnyVal"><a href="#AnyVal" class="headerlink" title="AnyVal"></a>AnyVal</h4><ul><li><p>AnyVal表示<strong>值类型</strong></p></li><li><p>AnyVal包括9个子类型：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  Byte</span><br><span class="line">  Short</span><br><span class="line">  Int</span><br><span class="line">  Long</span><br><span class="line">  Char</span><br><span class="line">  Float</span><br><span class="line">  Double</span><br><span class="line">  Boolean</span><br><span class="line">Unit</span><br></pre></td></tr></table></figure><p>其中1-7又被称为<strong><em>数值类型</em></strong>（numeric value types）;</p><p>​        8-9又被称为<strong><em>非数值类型</em></strong>（non-numeric value types）</p></li></ul><p>  <strong>当然，AnyVal的9个子类型还有一种分组方式：</strong></p>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- The &apos;&apos;subrange types&apos;&apos; are [[scala.Byte]], [[scala.Short]], and [[scala.Char]].</span><br><span class="line"></span><br><span class="line">- The &apos;&apos;integer types&apos;&apos; include the subrange types as well as [[scala.Int]] and [[scala.Long]].</span><br><span class="line"></span><br><span class="line">- The &apos;&apos;floating point types&apos;&apos; are [[scala.Float]] and [[scala.Double]].</span><br></pre></td></tr></table></figure><h5 id="Unit"><a href="#Unit" class="headerlink" title="Unit"></a>Unit</h5><p>  ​    Unit是不带任何意义的值类型，它仅有一个实例可以像这样声明：()。</p><p>  ​    因为Scala中所有的函数必须有返回，所以说有时候Unit也是有用的返回类型。</p><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p>  AnyVal的9种类型 就是java中8种基本数据类型 + Unit类型。不过Scala中的Byte、Int等不是基本数据类型，而是可以做对象使用的。比如：</p>  <figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> num:<span class="type">Int</span> = <span class="number">10</span></span><br><span class="line">println(num.toString)<span class="comment">//num可以调用方法</span></span><br></pre></td></tr></table></figure><h4 id="AnyRef"><a href="#AnyRef" class="headerlink" title="AnyRef"></a>AnyRef</h4><ul><li><p>AnyRef代表引用类型。</p></li><li><p>所有非值类型都被定义为引用类型。</p></li><li><p>在Scala中，每个用户自定义的类型都是AnyRef的子类型。</p></li><li><p>如果Scala被应用在Java的运行环境中，AnyRef相当于java.lang.Object。</p></li></ul><h5 id="Nothing"><a href="#Nothing" class="headerlink" title="Nothing"></a>Nothing</h5><ul><li><p>Nothing是所有类型的子类型，也称为<strong><em>底部类型</em></strong></p></li><li><p>没有一个值是Nothing类型的。它的用途之一是给出非正常终止的信号，如抛出异常、程序退出或者一个无限循环（可以理解为它是一个不对值进行定义的表达式的类型，或者是一个不能正常返回的方法）。</p><p><strong><em>比如：</em></strong></p><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">//该方法是用来抛出异常的，不需要返回具体的结果。所以返回值定义成Nothing即可</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">break</span></span>(): <span class="type">Nothing</span> = &#123; <span class="keyword">throw</span> breakException &#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="Null"><a href="#Null" class="headerlink" title="Null"></a>Null</h5><ul><li><p>Null是所有引用类型的子类型（即AnyRef的任意子类型）。</p></li><li><p>它有一个单例值由关键字null所定义。</p></li><li><p>Null主要是使得Scala满足和其他JVM语言的互操作性，但是几乎不应该在Scala代码中使用。</p><p><strong><em>比如：</em></strong></p><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> </span>&#123;</span><br><span class="line">  <span class="comment">//在类型定义的属性，初始化的时候就不推荐使用null,而是用_</span></span><br><span class="line">  <span class="keyword">var</span> name:<span class="type">String</span>=_</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;学过Java我们知道Java中的数据类型分为：基本数据类型和引用数据类型。&lt;/p&gt;
&lt;p&gt;Java中的基本数据类型不能当作对象使用，所以Ja
      
    
    </summary>
    
    
      <category term="Scala" scheme="https://lg118.github.io/categories/Scala/"/>
    
    
      <category term="scala" scheme="https://lg118.github.io/tags/scala/"/>
    
  </entry>
  
</feed>
